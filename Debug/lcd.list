
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000128  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2d7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001876  00000000  00000000  0002a313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0002bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4b6  00000000  00000000  0002c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009af2  00000000  00000000  0004bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8b79  00000000  00000000  000558b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010e429  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ad8  00000000  00000000  0010e47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f38 	.word	0x08002f38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002f38 	.word	0x08002f38

080001c8 <ds18b20_read_address>:
//{
//  return wire_init();
//}

HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 80001d0:	f000 fc40 	bl	8000a54 <wire_reset>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <ds18b20_read_address+0x16>
    return HAL_ERROR;
 80001da:	2301      	movs	r3, #1
 80001dc:	e021      	b.n	8000222 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 80001de:	2033      	movs	r0, #51	; 0x33
 80001e0:	f000 fcc2 	bl	8000b68 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e009      	b.n	80001fe <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	18d4      	adds	r4, r2, r3
 80001f0:	f000 fc78 	bl	8000ae4 <wire_read>
 80001f4:	4603      	mov	r3, r0
 80001f6:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2b07      	cmp	r3, #7
 8000202:	ddf2      	ble.n	80001ea <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000204:	2107      	movs	r1, #7
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f000 fcf6 	bl	8000bf8 <wire_crc>
 800020c:	4603      	mov	r3, r0
 800020e:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3307      	adds	r3, #7
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	7afa      	ldrb	r2, [r7, #11]
 8000218:	429a      	cmp	r2, r3
 800021a:	d101      	bne.n	8000220 <ds18b20_read_address+0x58>
    return HAL_OK;
 800021c:	2300      	movs	r3, #0
 800021e:	e000      	b.n	8000222 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8000220:	2301      	movs	r3, #1
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bd90      	pop	{r4, r7, pc}

0800022a <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b084      	sub	sp, #16
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	460b      	mov	r3, r1
 8000234:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000236:	f000 fc0d 	bl	8000a54 <wire_reset>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <send_cmd+0x1a>
    return HAL_ERROR;
 8000240:	2301      	movs	r3, #1
 8000242:	e01e      	b.n	8000282 <send_cmd+0x58>

  if (!rom_code) {
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d103      	bne.n	8000252 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800024a:	20cc      	movs	r0, #204	; 0xcc
 800024c:	f000 fc8c 	bl	8000b68 <wire_write>
 8000250:	e012      	b.n	8000278 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000252:	2055      	movs	r0, #85	; 0x55
 8000254:	f000 fc88 	bl	8000b68 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	e009      	b.n	8000272 <send_cmd+0x48>
      wire_write(rom_code[i]);
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fc7e 	bl	8000b68 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3301      	adds	r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b07      	cmp	r3, #7
 8000276:	ddf2      	ble.n	800025e <send_cmd+0x34>
  }
  wire_write(cmd);
 8000278:	78fb      	ldrb	r3, [r7, #3]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fc74 	bl	8000b68 <wire_write>
  return HAL_OK;
 8000280:	2300      	movs	r3, #0
}
 8000282:	4618      	mov	r0, r3
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	b082      	sub	sp, #8
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000292:	2144      	movs	r1, #68	; 0x44
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f7ff ffc8 	bl	800022a <send_cmd>
 800029a:	4603      	mov	r3, r0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 80002ae:	21be      	movs	r1, #190	; 0xbe
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ffba 	bl	800022a <send_cmd>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 80002bc:	2301      	movs	r3, #1
 80002be:	e01e      	b.n	80002fe <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	e009      	b.n	80002da <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	18d4      	adds	r4, r2, r3
 80002cc:	f000 fc0a 	bl	8000ae4 <wire_read>
 80002d0:	4603      	mov	r3, r0
 80002d2:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b08      	cmp	r3, #8
 80002de:	ddf2      	ble.n	80002c6 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80002e0:	2108      	movs	r1, #8
 80002e2:	6838      	ldr	r0, [r7, #0]
 80002e4:	f000 fc88 	bl	8000bf8 <wire_crc>
 80002e8:	4603      	mov	r3, r0
 80002ea:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	3308      	adds	r3, #8
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	7afa      	ldrb	r2, [r7, #11]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d101      	bne.n	80002fc <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80002f8:	2300      	movs	r3, #0
 80002fa:	e000      	b.n	80002fe <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80002fc:	2301      	movs	r3, #1
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
	...

08000308 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000310:	f107 030c 	add.w	r3, r7, #12
 8000314:	4619      	mov	r1, r3
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ffc4 	bl	80002a4 <ds18b20_read_scratchpad>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d002      	beq.n	8000328 <ds18b20_get_temp+0x20>
    return 85.0f;
 8000322:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000350 <ds18b20_get_temp+0x48>
 8000326:	e00b      	b.n	8000340 <ds18b20_get_temp+0x38>
 8000328:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 800032a:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 800032c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000330:	ee07 3a90 	vmov	s15, r3
 8000334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000338:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800033c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000340:	eef0 7a47 	vmov.f32	s15, s14
}
 8000344:	eeb0 0a67 	vmov.f32	s0, s15
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	42aa0000 	.word	0x42aa0000

08000354 <delay_us>:
#include "lcd_1602.h"

static void delay_us(uint32_t delay){
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	delay*=32;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	607b      	str	r3, [r7, #4]
	while(delay--);
 8000362:	bf00      	nop
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	607a      	str	r2, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1fa      	bne.n	8000364 <delay_us+0x10>
}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <lcd_send_4bit>:

static void lcd_send_4bit(uint8_t data){	
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	
	if(data & 0x10) d4(1); else d4(0);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	2b00      	cmp	r3, #0
 800038e:	d005      	beq.n	800039c <lcd_send_4bit+0x20>
 8000390:	2201      	movs	r2, #1
 8000392:	2110      	movs	r1, #16
 8000394:	481d      	ldr	r0, [pc, #116]	; (800040c <lcd_send_4bit+0x90>)
 8000396:	f000 ff5d 	bl	8001254 <HAL_GPIO_WritePin>
 800039a:	e004      	b.n	80003a6 <lcd_send_4bit+0x2a>
 800039c:	2200      	movs	r2, #0
 800039e:	2110      	movs	r1, #16
 80003a0:	481a      	ldr	r0, [pc, #104]	; (800040c <lcd_send_4bit+0x90>)
 80003a2:	f000 ff57 	bl	8001254 <HAL_GPIO_WritePin>
	if(data & 0x20) d5(1); else d5(0);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d005      	beq.n	80003bc <lcd_send_4bit+0x40>
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <lcd_send_4bit+0x90>)
 80003b6:	f000 ff4d 	bl	8001254 <HAL_GPIO_WritePin>
 80003ba:	e004      	b.n	80003c6 <lcd_send_4bit+0x4a>
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	4812      	ldr	r0, [pc, #72]	; (800040c <lcd_send_4bit+0x90>)
 80003c2:	f000 ff47 	bl	8001254 <HAL_GPIO_WritePin>
	if(data & 0x40) d6(1); else d6(0);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d005      	beq.n	80003dc <lcd_send_4bit+0x60>
 80003d0:	2201      	movs	r2, #1
 80003d2:	2140      	movs	r1, #64	; 0x40
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <lcd_send_4bit+0x90>)
 80003d6:	f000 ff3d 	bl	8001254 <HAL_GPIO_WritePin>
 80003da:	e004      	b.n	80003e6 <lcd_send_4bit+0x6a>
 80003dc:	2200      	movs	r2, #0
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	480a      	ldr	r0, [pc, #40]	; (800040c <lcd_send_4bit+0x90>)
 80003e2:	f000 ff37 	bl	8001254 <HAL_GPIO_WritePin>
	if(data & 0x80) d7(1); else d7(0);
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	da05      	bge.n	80003fa <lcd_send_4bit+0x7e>
 80003ee:	2201      	movs	r2, #1
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <lcd_send_4bit+0x90>)
 80003f4:	f000 ff2e 	bl	8001254 <HAL_GPIO_WritePin>
	
}
 80003f8:	e004      	b.n	8000404 <lcd_send_4bit+0x88>
	if(data & 0x80) d7(1); else d7(0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <lcd_send_4bit+0x90>)
 8000400:	f000 ff28 	bl	8001254 <HAL_GPIO_WritePin>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	48000400 	.word	0x48000400

08000410 <lcd_send>:

static void lcd_send(int8_t rs,uint8_t data){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	460a      	mov	r2, r1
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	4613      	mov	r3, r2
 800041e:	71bb      	strb	r3, [r7, #6]
	rs(rs);rw(0);
 8000420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d005      	beq.n	8000434 <lcd_send+0x24>
 8000428:	2201      	movs	r2, #1
 800042a:	2101      	movs	r1, #1
 800042c:	481a      	ldr	r0, [pc, #104]	; (8000498 <lcd_send+0x88>)
 800042e:	f000 ff11 	bl	8001254 <HAL_GPIO_WritePin>
 8000432:	e004      	b.n	800043e <lcd_send+0x2e>
 8000434:	2200      	movs	r2, #0
 8000436:	2101      	movs	r1, #1
 8000438:	4817      	ldr	r0, [pc, #92]	; (8000498 <lcd_send+0x88>)
 800043a:	f000 ff0b 	bl	8001254 <HAL_GPIO_WritePin>
 800043e:	2200      	movs	r2, #0
 8000440:	2102      	movs	r1, #2
 8000442:	4815      	ldr	r0, [pc, #84]	; (8000498 <lcd_send+0x88>)
 8000444:	f000 ff06 	bl	8001254 <HAL_GPIO_WritePin>
	lcd_send_4bit(data);
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff96 	bl	800037c <lcd_send_4bit>
	en(1);delay_us(100);en(0);
 8000450:	2201      	movs	r2, #1
 8000452:	2104      	movs	r1, #4
 8000454:	4810      	ldr	r0, [pc, #64]	; (8000498 <lcd_send+0x88>)
 8000456:	f000 fefd 	bl	8001254 <HAL_GPIO_WritePin>
 800045a:	2064      	movs	r0, #100	; 0x64
 800045c:	f7ff ff7a 	bl	8000354 <delay_us>
 8000460:	2200      	movs	r2, #0
 8000462:	2104      	movs	r1, #4
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <lcd_send+0x88>)
 8000466:	f000 fef5 	bl	8001254 <HAL_GPIO_WritePin>
	lcd_send_4bit(data<<4);
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff83 	bl	800037c <lcd_send_4bit>
	en(1);delay_us(100);en(0);
 8000476:	2201      	movs	r2, #1
 8000478:	2104      	movs	r1, #4
 800047a:	4807      	ldr	r0, [pc, #28]	; (8000498 <lcd_send+0x88>)
 800047c:	f000 feea 	bl	8001254 <HAL_GPIO_WritePin>
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f7ff ff67 	bl	8000354 <delay_us>
 8000486:	2200      	movs	r2, #0
 8000488:	2104      	movs	r1, #4
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <lcd_send+0x88>)
 800048c:	f000 fee2 	bl	8001254 <HAL_GPIO_WritePin>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	48000400 	.word	0x48000400

0800049c <lcd_data>:

void lcd_cmd(uint8_t command){
	lcd_send(1,command);
}

void lcd_data(char c){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	lcd_send(1,(uint8_t)c);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4619      	mov	r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff ffb0 	bl	8000410 <lcd_send>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <lcd_init>:

void lcd_init(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	//bl(1);
	lcd_send(0,0x33);
 80004bc:	2133      	movs	r1, #51	; 0x33
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ffa6 	bl	8000410 <lcd_send>
  lcd_send(0,0x32);
 80004c4:	2132      	movs	r1, #50	; 0x32
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff ffa2 	bl	8000410 <lcd_send>
  lcd_send(0,0x28);
 80004cc:	2128      	movs	r1, #40	; 0x28
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff ff9e 	bl	8000410 <lcd_send>
  lcd_send(0,0x0C);
 80004d4:	210c      	movs	r1, #12
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ff9a 	bl	8000410 <lcd_send>
  lcd_send(0,0x06);
 80004dc:	2106      	movs	r1, #6
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ff96 	bl	8000410 <lcd_send>
  lcd_send(0,0x01);
 80004e4:	2101      	movs	r1, #1
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff ff92 	bl	8000410 <lcd_send>
	HAL_Delay(2);
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fc35 	bl	8000d5c <HAL_Delay>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <lcd_gotoxy>:
    lcd_send(0,0x01);
    HAL_Delay(2);
}


void lcd_gotoxy(char x, char y){
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	4603      	mov	r3, r0
 80004fe:	460a      	mov	r2, r1
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	4613      	mov	r3, r2
 8000504:	71bb      	strb	r3, [r7, #6]
	
    lcd_send(0,0x80+x+(y*0x40));
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	b2da      	uxtb	r2, r3
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4413      	add	r3, r2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	3b80      	subs	r3, #128	; 0x80
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff ff79 	bl	8000410 <lcd_send>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_puts>:

void lcd_puts(char *text){
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
    while(*text){
 800052e:	e007      	b.n	8000540 <lcd_puts+0x1a>
        lcd_data(*text);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffb1 	bl	800049c <lcd_data>
        text++;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
    while(*text){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1f3      	bne.n	8000530 <lcd_puts+0xa>
    }
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb99 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f845 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8e9 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f883 	bl	8000670 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800056a:	f000 f8b1 	bl	80006d0 <MX_USART3_UART_Init>
//    Error_Handler();
//  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe29 	bl	80001c8 <ds18b20_read_address>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x2c>
    Error_Handler();
 800057c:	f000 f958 	bl	8000830 <Error_Handler>
  }

  lcd_init();
 8000580:	f7ff ff9a 	bl	80004b8 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_gotoxy(0,0);
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ffb5 	bl	80004f6 <lcd_gotoxy>
	  lcd_puts("Hello");
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <main+0x88>)
 800058e:	f7ff ffca 	bl	8000526 <lcd_puts>

	  ds18b20_start_measure(NULL);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fe79 	bl	800028a <ds18b20_start_measure>

	  HAL_Delay(750);
 8000598:	f240 20ee 	movw	r0, #750	; 0x2ee
 800059c:	f000 fbde 	bl	8000d5c <HAL_Delay>
	  lcd_gotoxy(0,0);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ffa7 	bl	80004f6 <lcd_gotoxy>

	  float temp = ds18b20_get_temp(NULL);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff fead 	bl	8000308 <ds18b20_get_temp>
 80005ae:	ed87 0a03 	vstr	s0, [r7, #12]
	    if (temp >= 80.0f)
 80005b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80005e0 <main+0x8c>
 80005ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c2:	db03      	blt.n	80005cc <main+0x78>
	      lcd_puts("Error");
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <main+0x90>)
 80005c6:	f7ff ffae 	bl	8000526 <lcd_puts>
 80005ca:	e002      	b.n	80005d2 <main+0x7e>
	    else
	      lcd_puts("Temperaturka");
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x94>)
 80005ce:	f7ff ffaa 	bl	8000526 <lcd_puts>
	    HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f000 fbc1 	bl	8000d5c <HAL_Delay>
  {
 80005da:	e7d3      	b.n	8000584 <main+0x30>
 80005dc:	08002f50 	.word	0x08002f50
 80005e0:	42a00000 	.word	0x42a00000
 80005e4:	08002f58 	.word	0x08002f58
 80005e8:	08002f60 	.word	0x08002f60

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2228      	movs	r2, #40	; 0x28
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fc94 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2310      	movs	r3, #16
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2300      	movs	r3, #0
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000622:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fe29 	bl	8001284 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000638:	f000 f8fa 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fd1c 	bl	8002094 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000662:	f000 f8e5 	bl	8000830 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3740      	adds	r7, #64	; 0x40
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_USART2_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800067c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006b4:	f001 ff24 	bl	8002500 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f8b7 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MX_USART3_UART_Init+0x64>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_USART3_UART_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_USART3_UART_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x60>)
 800070e:	2210      	movs	r2, #16
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_USART3_UART_Init+0x60>)
 8000714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x60>)
 800071c:	f001 ff3e 	bl	800259c <HAL_HalfDuplex_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000726:	f000 f883 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028
 8000734:	40004800 	.word	0x40004800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b35      	ldr	r3, [pc, #212]	; (8000824 <MX_GPIO_Init+0xec>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a34      	ldr	r2, [pc, #208]	; (8000824 <MX_GPIO_Init+0xec>)
 8000754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <MX_GPIO_Init+0xec>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_GPIO_Init+0xec>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <MX_GPIO_Init+0xec>)
 800076c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_GPIO_Init+0xec>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <MX_GPIO_Init+0xec>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a28      	ldr	r2, [pc, #160]	; (8000824 <MX_GPIO_Init+0xec>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xec>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xec>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a22      	ldr	r2, [pc, #136]	; (8000824 <MX_GPIO_Init+0xec>)
 800079c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_GPIO_Init+0xec>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 fd4d 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007ba:	2200      	movs	r2, #0
 80007bc:	21f7      	movs	r1, #247	; 0xf7
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <MX_GPIO_Init+0xf0>)
 80007c0:	f000 fd48 	bl	8001254 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_GPIO_Init+0xf4>)
 80007dc:	f000 fbc8 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fbb9 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 80007fe:	23f7      	movs	r3, #247	; 0xf7
 8000800:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xf0>)
 8000816:	f000 fbab 	bl	8000f70 <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400
 800082c:	48000800 	.word	0x48000800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fb48 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <HAL_UART_MspInit+0xdc>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d129      	bne.n	80008fa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <HAL_UART_MspInit+0xe0>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <HAL_UART_MspInit+0xe0>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <HAL_UART_MspInit+0xe0>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <HAL_UART_MspInit+0xe0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a28      	ldr	r2, [pc, #160]	; (8000964 <HAL_UART_MspInit+0xe0>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <HAL_UART_MspInit+0xe0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	230c      	movs	r3, #12
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 fb3c 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008f8:	e02d      	b.n	8000956 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_UART_MspInit+0xe4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d128      	bne.n	8000956 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_UART_MspInit+0xe0>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <HAL_UART_MspInit+0xe0>)
 800090a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800090e:	61d3      	str	r3, [r2, #28]
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_UART_MspInit+0xe0>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0xe0>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_UART_MspInit+0xe0>)
 8000922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000926:	6153      	str	r3, [r2, #20]
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_UART_MspInit+0xe0>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000946:	2307      	movs	r3, #7
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_UART_MspInit+0xe8>)
 8000952:	f000 fb0d 	bl	8000f70 <HAL_GPIO_Init>
}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	; 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40004400 	.word	0x40004400
 8000964:	40021000 	.word	0x40021000
 8000968:	40004800 	.word	0x40004800
 800096c:	48000400 	.word	0x48000400

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f9ae 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <set_baudrate>:
#include "stm32f3xx_hal_uart_ex.h"

UART_HandleTypeDef huart3;

static void set_baudrate(uint32_t baudrate)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <set_baudrate+0x64>)
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <set_baudrate+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <set_baudrate+0x64>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <set_baudrate+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <set_baudrate+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <set_baudrate+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <set_baudrate+0x64>)
 8000a10:	220c      	movs	r2, #12
 8000a12:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <set_baudrate+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <set_baudrate+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <set_baudrate+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <set_baudrate+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <set_baudrate+0x64>)
 8000a2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a32:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <set_baudrate+0x64>)
 8000a36:	f001 fdb1 	bl	800259c <HAL_HalfDuplex_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <set_baudrate+0x5c>
  {
    Error_Handler();
 8000a40:	f7ff fef6 	bl	8000830 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	40004800 	.word	0x40004800

08000a54 <wire_reset>:
//  return HAL_TIM_Base_Start(&htim6);
//}


HAL_StatusTypeDef wire_reset(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 8000a5a:	23f0      	movs	r3, #240	; 0xf0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 8000a62:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000a66:	f7ff ffbf 	bl	80009e8 <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	2201      	movs	r2, #1
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <wire_reset+0x50>)
 8000a74:	f001 fde8 	bl	8002648 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8000a78:	1db9      	adds	r1, r7, #6
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <wire_reset+0x50>)
 8000a82:	f001 fe75 	bl	8002770 <HAL_UART_Receive>
  set_baudrate(115200);
 8000a86:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000a8a:	f7ff ffad 	bl	80009e8 <set_baudrate>

  if (data_in != 0xF0)
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	2bf0      	cmp	r3, #240	; 0xf0
 8000a92:	d001      	beq.n	8000a98 <wire_reset+0x44>
    return HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e000      	b.n	8000a9a <wire_reset+0x46>
  else
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000028 	.word	0x20000028

08000aa8 <read_bit>:

static int read_bit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 8000aae:	23ff      	movs	r3, #255	; 0xff
 8000ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	2201      	movs	r2, #1
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <read_bit+0x38>)
 8000ac0:	f001 fdc2 	bl	8002648 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8000ac4:	1db9      	adds	r1, r7, #6
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2201      	movs	r2, #1
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <read_bit+0x38>)
 8000ace:	f001 fe4f 	bl	8002770 <HAL_UART_Receive>

  return data_in & 0x01;
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000028 	.word	0x20000028

08000ae4 <wire_read>:

uint8_t wire_read(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	e00e      	b.n	8000b12 <wire_read+0x2e>
    value >>= 1;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	085b      	lsrs	r3, r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8000afa:	f7ff ffd5 	bl	8000aa8 <read_bit>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <wire_read+0x28>
      value |= 0x80;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0a:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	dded      	ble.n	8000af4 <wire_read+0x10>
  }
  return value;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <write_bit>:

static void write_bit(int value)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if (value) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00a      	beq.n	8000b48 <write_bit+0x24>
      uint8_t data_out = 0xff;
 8000b32:	23ff      	movs	r3, #255	; 0xff
 8000b34:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8000b36:	f107 010f 	add.w	r1, r7, #15
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <write_bit+0x40>)
 8000b42:	f001 fd81 	bl	8002648 <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 8000b46:	e009      	b.n	8000b5c <write_bit+0x38>
      uint8_t data_out = 0x0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8000b4c:	f107 010e 	add.w	r1, r7, #14
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2201      	movs	r2, #1
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <write_bit+0x40>)
 8000b58:	f001 fd76 	bl	8002648 <HAL_UART_Transmit>
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000028 	.word	0x20000028

08000b68 <wire_write>:

void wire_write(uint8_t byte)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e00b      	b.n	8000b90 <wire_write+0x28>
    write_bit(byte & 0x01);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffd0 	bl	8000b24 <write_bit>
    byte >>= 1;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	ddf0      	ble.n	8000b78 <wire_write+0x10>
  }
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e016      	b.n	8000be4 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	4053      	eors	r3, r2
 8000bbc:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	085b      	lsrs	r3, r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <byte_crc+0x38>
      crc ^= 0x8c;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	dde5      	ble.n	8000bb6 <byte_crc+0x16>
  }
  return crc;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e00d      	b.n	8000c28 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	7afb      	ldrb	r3, [r7, #11]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ffc1 	bl	8000ba0 <byte_crc>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbed      	blt.n	8000c0c <wire_crc+0x14>

    return crc;
 8000c30:	7afb      	ldrb	r3, [r7, #11]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490e      	ldr	r1, [pc, #56]	; (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c66:	f7ff fead 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f002 f939 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fc71 	bl	8000554 <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c74:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c80:	08002fb0 	.word	0x08002fb0
  ldr r2, =_sbss
 8000c84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c88:	20000134 	.word	0x20000134

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x28>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x28>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f931 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fdc6 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f93b 	bl	8000f56 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f911 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000130 	.word	0x20000130

08000d44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000130 	.word	0x20000130

08000d5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff5c 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e14e      	b.n	800121e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8140 	beq.w	8001218 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x40>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 809a 	beq.w	8001218 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b55      	ldr	r3, [pc, #340]	; (800123c <HAL_GPIO_Init+0x2cc>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a54      	ldr	r2, [pc, #336]	; (800123c <HAL_GPIO_Init+0x2cc>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b52      	ldr	r3, [pc, #328]	; (800123c <HAL_GPIO_Init+0x2cc>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010fc:	4a50      	ldr	r2, [pc, #320]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1e0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a46      	ldr	r2, [pc, #280]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1dc>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a45      	ldr	r2, [pc, #276]	; (8001248 <HAL_GPIO_Init+0x2d8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1d8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a44      	ldr	r2, [pc, #272]	; (800124c <HAL_GPIO_Init+0x2dc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1d4>
 8001140:	2303      	movs	r3, #3
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x1e2>
 8001144:	2305      	movs	r3, #5
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x1e2>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x1e2>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x1e2>
 8001150:	2300      	movs	r3, #0
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001162:	4937      	ldr	r1, [pc, #220]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001170:	4b37      	ldr	r3, [pc, #220]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001194:	4a2e      	ldr	r2, [pc, #184]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011be:	4a24      	ldr	r2, [pc, #144]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	f47f aea9 	bne.w	8000f80 <HAL_GPIO_Init+0x10>
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	48000400 	.word	0x48000400
 8001248:	48000800 	.word	0x48000800
 800124c:	48000c00 	.word	0x48000c00
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001270:	e002      	b.n	8001278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800128a:	af00      	add	r7, sp, #0
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	f000 bef4 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 816a 	beq.w	8001582 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012ae:	4bb3      	ldr	r3, [pc, #716]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d00c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ba:	4bb0      	ldr	r3, [pc, #704]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d159      	bne.n	800137a <HAL_RCC_OscConfig+0xf6>
 80012c6:	4bad      	ldr	r3, [pc, #692]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d152      	bne.n	800137a <HAL_RCC_OscConfig+0xf6>
 80012d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	fab3 f383 	clz	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d102      	bne.n	8001306 <HAL_RCC_OscConfig+0x82>
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0xae>
 8001306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800131a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001322:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800132e:	4b93      	ldr	r3, [pc, #588]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001336:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800133a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800133e:	fa92 f2a2 	rbit	r2, r2
 8001342:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001346:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f042 0220 	orr.w	r2, r2, #32
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 810c 	beq.w	8001580 <HAL_RCC_OscConfig+0x2fc>
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 8106 	bne.w	8001580 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	f000 be86 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001384:	d106      	bne.n	8001394 <HAL_RCC_OscConfig+0x110>
 8001386:	4b7d      	ldr	r3, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7c      	ldr	r2, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e030      	b.n	80013f6 <HAL_RCC_OscConfig+0x172>
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x134>
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a76      	ldr	r2, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b74      	ldr	r3, [pc, #464]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a73      	ldr	r2, [pc, #460]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01e      	b.n	80013f6 <HAL_RCC_OscConfig+0x172>
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x15a>
 80013c4:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e00b      	b.n	80013f6 <HAL_RCC_OscConfig+0x172>
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a66      	ldr	r2, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f6:	4b61      	ldr	r3, [pc, #388]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	f023 020f 	bic.w	r2, r3, #15
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	495d      	ldr	r1, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001406:	4313      	orrs	r3, r2
 8001408:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d059      	beq.n	80014c8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fc96 	bl	8000d44 <HAL_GetTick>
 8001418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141e:	f7ff fc91 	bl	8000d44 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d902      	bls.n	8001434 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	f000 be29 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>
 8001434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001438:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001448:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <HAL_RCC_OscConfig+0x1e2>
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x20e>
 8001466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800147a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001482:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001496:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800149a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800149e:	fa92 f2a2 	rbit	r2, r2
 80014a2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80014a6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	f002 021f 	and.w	r2, r2, #31
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ab      	beq.n	800141e <HAL_RCC_OscConfig+0x19a>
 80014c6:	e05c      	b.n	8001582 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc3c 	bl	8000d44 <HAL_GetTick>
 80014cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d2:	f7ff fc37 	bl	8000d44 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d902      	bls.n	80014e8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f000 bdcf 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>
 80014e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d102      	bne.n	800151a <HAL_RCC_OscConfig+0x296>
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x2c2>
 800151a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800152e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001532:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001536:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_RCC_OscConfig+0x2f8>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800154a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800154e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001552:	fa92 f2a2 	rbit	r2, r2
 8001556:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800155a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f042 0220 	orr.w	r2, r2, #32
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ab      	bne.n	80014d2 <HAL_RCC_OscConfig+0x24e>
 800157a:	e002      	b.n	8001582 <HAL_RCC_OscConfig+0x2fe>
 800157c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 816f 	beq.w	8001870 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001592:	4bd0      	ldr	r3, [pc, #832]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800159e:	4bcd      	ldr	r3, [pc, #820]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d16c      	bne.n	8001684 <HAL_RCC_OscConfig+0x400>
 80015aa:	4bca      	ldr	r3, [pc, #808]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d166      	bne.n	8001684 <HAL_RCC_OscConfig+0x400>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80015c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x362>
 80015e0:	4bbc      	ldr	r3, [pc, #752]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	e013      	b.n	800160e <HAL_RCC_OscConfig+0x38a>
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800160a:	4bb2      	ldr	r3, [pc, #712]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	2202      	movs	r2, #2
 8001610:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001614:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001618:	fa92 f2a2 	rbit	r2, r2
 800161c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001620:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001624:	fab2 f282 	clz	r2, r2
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	f042 0220 	orr.w	r2, r2, #32
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f002 021f 	and.w	r2, r2, #31
 8001634:	2101      	movs	r1, #1
 8001636:	fa01 f202 	lsl.w	r2, r1, r2
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HAL_RCC_OscConfig+0x3cc>
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d002      	beq.n	8001650 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 bd1b 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4ba0      	ldr	r3, [pc, #640]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	21f8      	movs	r1, #248	; 0xf8
 8001660:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001668:	fa91 f1a1 	rbit	r1, r1
 800166c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001670:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001674:	fab1 f181 	clz	r1, r1
 8001678:	b2c9      	uxtb	r1, r1
 800167a:	408b      	lsls	r3, r1
 800167c:	4995      	ldr	r1, [pc, #596]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e0f5      	b.n	8001870 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8085 	beq.w	800179a <HAL_RCC_OscConfig+0x516>
 8001690:	2301      	movs	r3, #1
 8001692:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80016a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	461a      	mov	r2, r3
 80016b8:	2301      	movs	r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb42 	bl	8000d44 <HAL_GetTick>
 80016c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fb3d 	bl	8000d44 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d902      	bls.n	80016dc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f000 bcd5 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	095b      	lsrs	r3, r3, #5
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_RCC_OscConfig+0x488>
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	e013      	b.n	8001734 <HAL_RCC_OscConfig+0x4b0>
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001724:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	2202      	movs	r2, #2
 8001736:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800173a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800173e:	fa92 f2a2 	rbit	r2, r2
 8001742:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001746:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f002 021f 	and.w	r2, r2, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0af      	beq.n	80016c6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	21f8      	movs	r1, #248	; 0xf8
 8001776:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800177e:	fa91 f1a1 	rbit	r1, r1
 8001782:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001786:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800178a:	fab1 f181 	clz	r1, r1
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	408b      	lsls	r3, r1
 8001792:	4950      	ldr	r1, [pc, #320]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e06a      	b.n	8001870 <HAL_RCC_OscConfig+0x5ec>
 800179a:	2301      	movs	r3, #1
 800179c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80017ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	461a      	mov	r2, r3
 80017c2:	2300      	movs	r3, #0
 80017c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fabd 	bl	8000d44 <HAL_GetTick>
 80017ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fab8 	bl	8000d44 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d902      	bls.n	80017e6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	f000 bc50 	b.w	8002086 <HAL_RCC_OscConfig+0xe02>
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d102      	bne.n	8001816 <HAL_RCC_OscConfig+0x592>
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e013      	b.n	800183e <HAL_RCC_OscConfig+0x5ba>
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001828:	2302      	movs	r3, #2
 800182a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800182e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x650>)
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2202      	movs	r2, #2
 8001840:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001844:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001848:	fa92 f2a2 	rbit	r2, r2
 800184c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001850:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001854:	fab2 f282 	clz	r2, r2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f042 0220 	orr.w	r2, r2, #32
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f002 021f 	and.w	r2, r2, #31
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f202 	lsl.w	r2, r1, r2
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1af      	bne.n	80017d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80da 	beq.w	8001a34 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d069      	beq.n	800195e <HAL_RCC_OscConfig+0x6da>
 800188a:	2301      	movs	r3, #1
 800188c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800189c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x654>)
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2301      	movs	r3, #1
 80018b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa46 	bl	8000d44 <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018bc:	e00e      	b.n	80018dc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff fa41 	bl	8000d44 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d906      	bls.n	80018dc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e3d9      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	10908120 	.word	0x10908120
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018e6:	fa93 f3a3 	rbit	r3, r3
 80018ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800191c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4ba5      	ldr	r3, [pc, #660]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001922:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001926:	2102      	movs	r1, #2
 8001928:	6019      	str	r1, [r3, #0]
 800192a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f1a3 	rbit	r1, r3
 8001934:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001938:	6019      	str	r1, [r3, #0]
  return result;
 800193a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0b0      	beq.n	80018be <HAL_RCC_OscConfig+0x63a>
 800195c:	e06a      	b.n	8001a34 <HAL_RCC_OscConfig+0x7b0>
 800195e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001974:	601a      	str	r2, [r3, #0]
  return result;
 8001976:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800197a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x934>)
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	461a      	mov	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff f9d8 	bl	8000d44 <HAL_GetTick>
 8001994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	e009      	b.n	80019ae <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199a:	f7ff f9d3 	bl	8000d44 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e36b      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 80019ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019b2:	2202      	movs	r2, #2
 80019b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 80019f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019fe:	2102      	movs	r1, #2
 8001a00:	6019      	str	r1, [r3, #0]
 8001a02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f1a3 	rbit	r1, r3
 8001a0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a10:	6019      	str	r1, [r3, #0]
  return result;
 8001a12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1b2      	bne.n	800199a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8158 	beq.w	8001cf4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a56      	ldr	r2, [pc, #344]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <HAL_RCC_OscConfig+0x938>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d11a      	bne.n	8001abe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x938>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a4b      	ldr	r2, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x938>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a94:	f7ff f956 	bl	8000d44 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff f951 	bl	8000d44 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e2e9      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <HAL_RCC_OscConfig+0x938>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ef      	beq.n	8001a9e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x852>
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a39      	ldr	r2, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	e02f      	b.n	8001b36 <HAL_RCC_OscConfig+0x8b2>
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x876>
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a33      	ldr	r2, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	e01d      	b.n	8001b36 <HAL_RCC_OscConfig+0x8b2>
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x89a>
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x8b2>
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d06b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7ff f900 	bl	8000d44 <HAL_GetTick>
 8001b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f8fb 	bl	8000d44 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e291      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 8001b62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b90:	601a      	str	r2, [r3, #0]
  return result;
 8001b92:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d109      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x93c>
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_RCC_OscConfig+0x930>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x958>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	10908120 	.word	0x10908120
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4bbb      	ldr	r3, [pc, #748]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001be0:	2102      	movs	r1, #2
 8001be2:	6011      	str	r1, [r2, #0]
 8001be4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	fa92 f1a2 	rbit	r1, r2
 8001bee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bf2:	6011      	str	r1, [r2, #0]
  return result;
 8001bf4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	fab2 f282 	clz	r2, r2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d099      	beq.n	8001b4a <HAL_RCC_OscConfig+0x8c6>
 8001c16:	e063      	b.n	8001ce0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff f894 	bl	8000d44 <HAL_GetTick>
 8001c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff f88f 	bl	8000d44 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e225      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 8001c3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_OscConfig+0xa06>
 8001c84:	4b90      	ldr	r3, [pc, #576]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	e00d      	b.n	8001ca6 <HAL_RCC_OscConfig+0xa22>
 8001c8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c8e:	2202      	movs	r2, #2
 8001c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	4b89      	ldr	r3, [pc, #548]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001caa:	2102      	movs	r1, #2
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	fa92 f1a2 	rbit	r1, r2
 8001cb8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cbc:	6011      	str	r1, [r2, #0]
  return result;
 8001cbe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1a0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ce0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b77      	ldr	r3, [pc, #476]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a76      	ldr	r2, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 81c2 	beq.w	8002084 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	f000 819c 	beq.w	8002046 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f040 8114 	bne.w	8001f42 <HAL_RCC_OscConfig+0xcbe>
 8001d1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d32:	601a      	str	r2, [r3, #0]
  return result;
 8001d34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe fff8 	bl	8000d44 <HAL_GetTick>
 8001d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7fe fff3 	bl	8000d44 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e18b      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 8001d6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d86:	601a      	str	r2, [r3, #0]
  return result;
 8001d88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0xb24>
 8001da2:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e01b      	b.n	8001de0 <HAL_RCC_OscConfig+0xb5c>
 8001da8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	fa93 f2a3 	rbit	r2, r3
 8001dbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001de4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001de8:	6011      	str	r1, [r2, #0]
 8001dea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fa92 f1a2 	rbit	r1, r2
 8001df4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001df8:	6011      	str	r1, [r2, #0]
  return result;
 8001dfa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f002 021f 	and.w	r2, r2, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d19e      	bne.n	8001d5a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	4925      	ldr	r1, [pc, #148]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e50:	601a      	str	r2, [r3, #0]
  return result;
 8001e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e56:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe ff69 	bl	8000d44 <HAL_GetTick>
 8001e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe ff64 	bl	8000d44 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0fc      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 8001e8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ea4:	601a      	str	r2, [r3, #0]
  return result;
 8001ea6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0xc48>
 8001ec0:	4b01      	ldr	r3, [pc, #4]	; (8001ec8 <HAL_RCC_OscConfig+0xc44>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	e01e      	b.n	8001f04 <HAL_RCC_OscConfig+0xc80>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_OscConfig+0xe0c>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	fa92 f1a2 	rbit	r1, r2
 8001f18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f1c:	6011      	str	r1, [r2, #0]
  return result;
 8001f1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d09b      	beq.n	8001e78 <HAL_RCC_OscConfig+0xbf4>
 8001f40:	e0a0      	b.n	8002084 <HAL_RCC_OscConfig+0xe00>
 8001f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f2a3 	rbit	r2, r3
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	601a      	str	r2, [r3, #0]
  return result;
 8001f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	461a      	mov	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fee4 	bl	8000d44 <HAL_GetTick>
 8001f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f82:	f7fe fedf 	bl	8000d44 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e077      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
 8001f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fa93 f2a3 	rbit	r2, r3
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	601a      	str	r2, [r3, #0]
  return result;
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xd4c>
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCC_OscConfig+0xe0c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e01b      	b.n	8002008 <HAL_RCC_OscConfig+0xd84>
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f107 0320 	add.w	r3, r7, #32
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_RCC_OscConfig+0xe0c>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f107 0210 	add.w	r2, r7, #16
 800200c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002010:	6011      	str	r1, [r2, #0]
 8002012:	f107 0210 	add.w	r2, r7, #16
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	fa92 f1a2 	rbit	r1, r2
 800201c:	f107 020c 	add.w	r2, r7, #12
 8002020:	6011      	str	r1, [r2, #0]
  return result;
 8002022:	f107 020c 	add.w	r2, r7, #12
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f042 0220 	orr.w	r2, r2, #32
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d19e      	bne.n	8001f82 <HAL_RCC_OscConfig+0xcfe>
 8002044:	e01e      	b.n	8002084 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e018      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_RCC_OscConfig+0xe0c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800205c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002060:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	429a      	cmp	r2, r3
 800206c:	d108      	bne.n	8002080 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800206e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b09e      	sub	sp, #120	; 0x78
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e162      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b90      	ldr	r3, [pc, #576]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	498b      	ldr	r1, [pc, #556]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e14a      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	497f      	ldr	r1, [pc, #508]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80dc 	beq.w	80022c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d13c      	bne.n	800218a <HAL_RCC_ClockConfig+0xf6>
 8002110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002114:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800211e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d102      	bne.n	800213a <HAL_RCC_ClockConfig+0xa6>
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	e00f      	b.n	800215a <HAL_RCC_ClockConfig+0xc6>
 800213a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	667b      	str	r3, [r7, #100]	; 0x64
 8002148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214c:	663b      	str	r3, [r7, #96]	; 0x60
 800214e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800215e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002162:	fa92 f2a2 	rbit	r2, r2
 8002166:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d17b      	bne.n	800227e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0f3      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d13c      	bne.n	800220c <HAL_RCC_ClockConfig+0x178>
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_ClockConfig+0x128>
 80021b6:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_ClockConfig+0x148>
 80021bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
 80021d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80021e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021e4:	fa92 f2a2 	rbit	r2, r2
 80021e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f002 021f 	and.w	r2, r2, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d13a      	bne.n	800227e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b2      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
 800220c:	2302      	movs	r3, #2
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_RCC_ClockConfig+0x1a0>
 800222e:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e00d      	b.n	8002250 <HAL_RCC_ClockConfig+0x1bc>
 8002234:	2302      	movs	r3, #2
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	2302      	movs	r3, #2
 8002242:	623b      	str	r3, [r7, #32]
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2202      	movs	r2, #2
 8002252:	61ba      	str	r2, [r7, #24]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	fa92 f2a2 	rbit	r2, r2
 800225a:	617a      	str	r2, [r7, #20]
  return result;
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	fab2 f282 	clz	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f042 0220 	orr.w	r2, r2, #32
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f002 021f 	and.w	r2, r2, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e079      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	491a      	ldr	r1, [pc, #104]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7fe fd58 	bl	8000d44 <HAL_GetTick>
 8002294:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fd54 	bl	8000d44 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e061      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d214      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4906      	ldr	r1, [pc, #24]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_RCC_ClockConfig+0x25c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e040      	b.n	8002372 <HAL_RCC_ClockConfig+0x2de>
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCC_ClockConfig+0x2e8>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	491a      	ldr	r1, [pc, #104]	; (800237c <HAL_RCC_ClockConfig+0x2e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_RCC_ClockConfig+0x2e8>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x2e8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002336:	f000 f829 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800233a:	4601      	mov	r1, r0
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCC_ClockConfig+0x2e8>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002344:	22f0      	movs	r2, #240	; 0xf0
 8002346:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	60fa      	str	r2, [r7, #12]
  return result;
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	40d3      	lsrs	r3, r2
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x2ec>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	fa21 f303 	lsr.w	r3, r1, r3
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_RCC_ClockConfig+0x2f0>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_RCC_ClockConfig+0x2f4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fca6 	bl	8000cbc <HAL_InitTick>
  
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3778      	adds	r7, #120	; 0x78
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	08002f70 	.word	0x08002f70
 8002384:	20000000 	.word	0x20000000
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b08b      	sub	sp, #44	; 0x2c
 8002390:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x30>
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ba:	e03c      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023be:	623b      	str	r3, [r7, #32]
      break;
 80023c0:	e03c      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	fa92 f2a2 	rbit	r2, r2
 80023d4:	607a      	str	r2, [r7, #4]
  return result;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	fab2 f282 	clz	r2, r2
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	40d3      	lsrs	r3, r2
 80023e0:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	220f      	movs	r2, #15
 80023f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	fa92 f2a2 	rbit	r2, r2
 80023f8:	60fa      	str	r2, [r7, #12]
  return result;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	40d3      	lsrs	r3, r2
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	fbb2 f2f3 	udiv	r2, r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
 8002424:	e004      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_RCC_GetSysClockFreq+0xd0>)
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	623b      	str	r3, [r7, #32]
      break;
 8002434:	e002      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002438:	623b      	str	r3, [r7, #32]
      break;
 800243a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243c:	6a3b      	ldr	r3, [r7, #32]
}
 800243e:	4618      	mov	r0, r3
 8002440:	372c      	adds	r7, #44	; 0x2c
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	08002f88 	.word	0x08002f88
 8002458:	08002f98 	.word	0x08002f98
 800245c:	003d0900 	.word	0x003d0900

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800247e:	f7ff ffef 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002482:	4601      	mov	r1, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800248c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002490:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	fa92 f2a2 	rbit	r2, r2
 8002498:	603a      	str	r2, [r7, #0]
  return result;
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	fab2 f282 	clz	r2, r2
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	40d3      	lsrs	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08002f80 	.word	0x08002f80

080024bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024c2:	f7ff ffcd 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024c6:	4601      	mov	r1, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	fa92 f2a2 	rbit	r2, r2
 80024dc:	603a      	str	r2, [r7, #0]
  return result;
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	40d3      	lsrs	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08002f80 	.word	0x08002f80

08002500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e040      	b.n	8002594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f9ae 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9e8 	bl	8002914 <UART_SetConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e022      	b.n	8002594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fb12 	bl	8002b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800256a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800257a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fb99 	bl	8002cc4 <UART_CheckIdleState>
 8002592:	4603      	mov	r3, r0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e048      	b.n	8002640 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe f960 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f99a 	bl	8002914 <UART_SetConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e02a      	b.n	8002640 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fac4 	bl	8002b80 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002616:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0208 	orr.w	r2, r2, #8
 8002626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fb43 	bl	8002cc4 <UART_CheckIdleState>
 800263e:	4603      	mov	r3, r0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265c:	2b20      	cmp	r3, #32
 800265e:	f040 8082 	bne.w	8002766 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_UART_Transmit+0x26>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07a      	b.n	8002768 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_UART_Transmit+0x38>
 800267c:	2302      	movs	r3, #2
 800267e:	e073      	b.n	8002768 <HAL_UART_Transmit+0x120>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2221      	movs	r2, #33	; 0x21
 8002694:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002696:	f7fe fb55 	bl	8000d44 <HAL_GetTick>
 800269a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	d108      	bne.n	80026c8 <HAL_UART_Transmit+0x80>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	e003      	b.n	80026d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80026d8:	e02d      	b.n	8002736 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fb36 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e039      	b.n	8002768 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10b      	bne.n	8002712 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002706:	b292      	uxth	r2, r2
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	3302      	adds	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	e008      	b.n	8002724 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b292      	uxth	r2, r2
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1cb      	bne.n	80026da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fb02 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e005      	b.n	8002768 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002784:	2b20      	cmp	r3, #32
 8002786:	f040 80bf 	bne.w	8002908 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_UART_Receive+0x26>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0b7      	b.n	800290a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Receive+0x38>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0b0      	b.n	800290a <HAL_UART_Receive+0x19a>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2222      	movs	r2, #34	; 0x22
 80027bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fabe 	bl	8000d44 <HAL_GetTick>
 80027c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	88fa      	ldrh	r2, [r7, #6]
 80027d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e2:	d10e      	bne.n	8002802 <HAL_UART_Receive+0x92>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_UART_Receive+0x88>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80027f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027f6:	e02d      	b.n	8002854 <HAL_UART_Receive+0xe4>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	22ff      	movs	r2, #255	; 0xff
 80027fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002800:	e028      	b.n	8002854 <HAL_UART_Receive+0xe4>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10d      	bne.n	8002826 <HAL_UART_Receive+0xb6>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <HAL_UART_Receive+0xac>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800281a:	e01b      	b.n	8002854 <HAL_UART_Receive+0xe4>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	227f      	movs	r2, #127	; 0x7f
 8002820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002824:	e016      	b.n	8002854 <HAL_UART_Receive+0xe4>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282e:	d10d      	bne.n	800284c <HAL_UART_Receive+0xdc>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_UART_Receive+0xd2>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	227f      	movs	r2, #127	; 0x7f
 800283c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002840:	e008      	b.n	8002854 <HAL_UART_Receive+0xe4>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	223f      	movs	r2, #63	; 0x3f
 8002846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800284a:	e003      	b.n	8002854 <HAL_UART_Receive+0xe4>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800285a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002864:	d108      	bne.n	8002878 <HAL_UART_Receive+0x108>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	e003      	b.n	8002880 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002888:	e033      	b.n	80028f2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2120      	movs	r1, #32
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa5e 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e032      	b.n	800290a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	8a7b      	ldrh	r3, [r7, #18]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	3302      	adds	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e00d      	b.n	80028e0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	8a7b      	ldrh	r3, [r7, #18]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4013      	ands	r3, r2
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c5      	bne.n	800288a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <UART_SetConfig+0x254>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	6979      	ldr	r1, [r7, #20]
 8002948:	430b      	orrs	r3, r1
 800294a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a78      	ldr	r2, [pc, #480]	; (8002b6c <UART_SetConfig+0x258>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d120      	bne.n	80029d2 <UART_SetConfig+0xbe>
 8002990:	4b77      	ldr	r3, [pc, #476]	; (8002b70 <UART_SetConfig+0x25c>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d817      	bhi.n	80029cc <UART_SetConfig+0xb8>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <UART_SetConfig+0x90>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029c1 	.word	0x080029c1
 80029ac:	080029c7 	.word	0x080029c7
 80029b0:	080029bb 	.word	0x080029bb
 80029b4:	2300      	movs	r3, #0
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e01d      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029ba:	2302      	movs	r3, #2
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e01a      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029c0:	2304      	movs	r3, #4
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e017      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029c6:	2308      	movs	r3, #8
 80029c8:	77fb      	strb	r3, [r7, #31]
 80029ca:	e014      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029cc:	2310      	movs	r3, #16
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e011      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a67      	ldr	r2, [pc, #412]	; (8002b74 <UART_SetConfig+0x260>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d102      	bne.n	80029e2 <UART_SetConfig+0xce>
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e009      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a64      	ldr	r2, [pc, #400]	; (8002b78 <UART_SetConfig+0x264>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d102      	bne.n	80029f2 <UART_SetConfig+0xde>
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e001      	b.n	80029f6 <UART_SetConfig+0xe2>
 80029f2:	2310      	movs	r3, #16
 80029f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fe:	d15b      	bne.n	8002ab8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d827      	bhi.n	8002a56 <UART_SetConfig+0x142>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0xf8>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	08002a41 	.word	0x08002a41
 8002a18:	08002a57 	.word	0x08002a57
 8002a1c:	08002a47 	.word	0x08002a47
 8002a20:	08002a57 	.word	0x08002a57
 8002a24:	08002a57 	.word	0x08002a57
 8002a28:	08002a57 	.word	0x08002a57
 8002a2c:	08002a4f 	.word	0x08002a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff fd22 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8002a34:	61b8      	str	r0, [r7, #24]
        break;
 8002a36:	e013      	b.n	8002a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fd40 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8002a3c:	61b8      	str	r0, [r7, #24]
        break;
 8002a3e:	e00f      	b.n	8002a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a40:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <UART_SetConfig+0x268>)
 8002a42:	61bb      	str	r3, [r7, #24]
        break;
 8002a44:	e00c      	b.n	8002a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a46:	f7ff fca1 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002a4a:	61b8      	str	r0, [r7, #24]
        break;
 8002a4c:	e008      	b.n	8002a60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a52:	61bb      	str	r3, [r7, #24]
        break;
 8002a54:	e004      	b.n	8002a60 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d074      	beq.n	8002b50 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	005a      	lsls	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d916      	bls.n	8002ab2 <UART_SetConfig+0x19e>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d212      	bcs.n	8002ab2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f023 030f 	bic.w	r3, r3, #15
 8002a94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	89fa      	ldrh	r2, [r7, #14]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	e04e      	b.n	8002b50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77bb      	strb	r3, [r7, #30]
 8002ab6:	e04b      	b.n	8002b50 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ab8:	7ffb      	ldrb	r3, [r7, #31]
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d827      	bhi.n	8002b0e <UART_SetConfig+0x1fa>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <UART_SetConfig+0x1b0>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002ae9 	.word	0x08002ae9
 8002ac8:	08002af1 	.word	0x08002af1
 8002acc:	08002af9 	.word	0x08002af9
 8002ad0:	08002b0f 	.word	0x08002b0f
 8002ad4:	08002aff 	.word	0x08002aff
 8002ad8:	08002b0f 	.word	0x08002b0f
 8002adc:	08002b0f 	.word	0x08002b0f
 8002ae0:	08002b0f 	.word	0x08002b0f
 8002ae4:	08002b07 	.word	0x08002b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae8:	f7ff fcc6 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8002aec:	61b8      	str	r0, [r7, #24]
        break;
 8002aee:	e013      	b.n	8002b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002af0:	f7ff fce4 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8002af4:	61b8      	str	r0, [r7, #24]
        break;
 8002af6:	e00f      	b.n	8002b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <UART_SetConfig+0x268>)
 8002afa:	61bb      	str	r3, [r7, #24]
        break;
 8002afc:	e00c      	b.n	8002b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002afe:	f7ff fc45 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002b02:	61b8      	str	r0, [r7, #24]
        break;
 8002b04:	e008      	b.n	8002b18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0a:	61bb      	str	r3, [r7, #24]
        break;
 8002b0c:	e004      	b.n	8002b18 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	77bb      	strb	r3, [r7, #30]
        break;
 8002b16:	bf00      	nop
    }

    if (pclk != 0U)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085a      	lsrs	r2, r3, #1
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	d908      	bls.n	8002b4c <UART_SetConfig+0x238>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d204      	bcs.n	8002b4c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	e001      	b.n	8002b50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	efff69f3 	.word	0xefff69f3
 8002b6c:	40013800 	.word	0x40013800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40004800 	.word	0x40004800
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01a      	beq.n	8002c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7e:	d10a      	bne.n	8002c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd4:	f7fe f836 	bl	8000d44 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d10e      	bne.n	8002d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f82d 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e023      	b.n	8002d4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d10e      	bne.n	8002d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f817 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e00d      	b.n	8002d4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b09c      	sub	sp, #112	; 0x70
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d66:	e0a5      	b.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	f000 80a1 	beq.w	8002eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fd ffe7 	bl	8000d44 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13e      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	e853 3f00 	ldrex	r3, [r3]
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e6      	bne.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e5      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e067      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d04f      	beq.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e22:	d147      	bne.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e6      	bne.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3308      	adds	r3, #8
 8002e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e80:	623a      	str	r2, [r7, #32]
 8002e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	69f9      	ldr	r1, [r7, #28]
 8002e86:	6a3a      	ldr	r2, [r7, #32]
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e5      	bne.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e010      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	f43f af4a 	beq.w	8002d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3770      	adds	r7, #112	; 0x70
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4d0d      	ldr	r5, [pc, #52]	; (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2600      	movs	r6, #0
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4d0b      	ldr	r5, [pc, #44]	; (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	; (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f000 f820 	bl	8002f38 <_init>
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2600      	movs	r6, #0
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08002fa8 	.word	0x08002fa8
 8002f1c:	08002fa8 	.word	0x08002fa8
 8002f20:	08002fa8 	.word	0x08002fa8
 8002f24:	08002fac 	.word	0x08002fac

08002f28 <memset>:
 8002f28:	4402      	add	r2, r0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <_init>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr

08002f44 <_fini>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr
