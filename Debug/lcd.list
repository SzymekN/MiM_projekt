
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080064e0  080064e0  000164e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f4  080067f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080067f4  080067f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067f4  080067f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000190  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119a2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b6  00000000  00000000  00031a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00033ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  00034d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ef6  00000000  00000000  00035a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011714  00000000  00000000  000578f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4ea1  00000000  00000000  0006900a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012deab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004750  00000000  00000000  0012df00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064c8 	.word	0x080064c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080064c8 	.word	0x080064c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <ds18b20_read_address>:
//{
//  return wire_init();
//}

HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8000b74:	f000 fd8c 	bl	8001690 <wire_reset>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e021      	b.n	8000bc6 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8000b82:	2033      	movs	r0, #51	; 0x33
 8000b84:	f000 fe0e 	bl	80017a4 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e009      	b.n	8000ba2 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	18d4      	adds	r4, r2, r3
 8000b94:	f000 fdc4 	bl	8001720 <wire_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	ddf2      	ble.n	8000b8e <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000ba8:	2107      	movs	r1, #7
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fe42 	bl	8001834 <wire_crc>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3307      	adds	r3, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d101      	bne.n	8000bc4 <ds18b20_read_address+0x58>
    return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e000      	b.n	8000bc6 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000bda:	f000 fd59 	bl	8001690 <wire_reset>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <send_cmd+0x1a>
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e01e      	b.n	8000c26 <send_cmd+0x58>

  if (!rom_code) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d103      	bne.n	8000bf6 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000bee:	20cc      	movs	r0, #204	; 0xcc
 8000bf0:	f000 fdd8 	bl	80017a4 <wire_write>
 8000bf4:	e012      	b.n	8000c1c <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000bf6:	2055      	movs	r0, #85	; 0x55
 8000bf8:	f000 fdd4 	bl	80017a4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e009      	b.n	8000c16 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fdca 	bl	80017a4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b07      	cmp	r3, #7
 8000c1a:	ddf2      	ble.n	8000c02 <send_cmd+0x34>
  }
  wire_write(cmd);
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fdc0 	bl	80017a4 <wire_write>
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000c36:	2144      	movs	r1, #68	; 0x44
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffc8 	bl	8000bce <send_cmd>
 8000c3e:	4603      	mov	r3, r0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000c52:	21be      	movs	r1, #190	; 0xbe
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ffba 	bl	8000bce <send_cmd>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e01e      	b.n	8000ca2 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e009      	b.n	8000c7e <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	18d4      	adds	r4, r2, r3
 8000c70:	f000 fd56 	bl	8001720 <wire_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	ddf2      	ble.n	8000c6a <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000c84:	2108      	movs	r1, #8
 8000c86:	6838      	ldr	r0, [r7, #0]
 8000c88:	f000 fdd4 	bl	8001834 <wire_crc>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	3308      	adds	r3, #8
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	7afa      	ldrb	r2, [r7, #11]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d101      	bne.n	8000ca0 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e000      	b.n	8000ca2 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
	...

08000cac <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffc4 	bl	8000c48 <ds18b20_read_scratchpad>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <ds18b20_get_temp+0x20>
    return 85.0f;
 8000cc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000cf4 <ds18b20_get_temp+0x48>
 8000cca:	e00b      	b.n	8000ce4 <ds18b20_get_temp+0x38>
 8000ccc:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000cce:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000cd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ce0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ce4:	eef0 7a47 	vmov.f32	s15, s14
}
 8000ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	42aa0000 	.word	0x42aa0000

08000cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2120      	movs	r1, #32
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f001 f88b 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	21f7      	movs	r1, #247	; 0xf7
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000d80:	f001 f886 	bl	8001e90 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000d9c:	f000 ff06 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000da0:	2320      	movs	r3, #32
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fef7 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000dbe:	23f7      	movs	r3, #247	; 0xf7
 8000dc0:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000dd6:	f000 fee9 	bl	8001bac <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	48000800 	.word	0x48000800

08000df0 <delay_us>:
#include "lcd_1602.h"

static void delay_us(uint32_t delay){
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	delay*=32;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	015b      	lsls	r3, r3, #5
 8000dfc:	607b      	str	r3, [r7, #4]
	while(delay--);
 8000dfe:	bf00      	nop
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1fa      	bne.n	8000e00 <delay_us+0x10>
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <lcd_send_4bit>:

static void lcd_send_4bit(uint8_t data){	
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	
	if(data & 0x10) d4(1); else d4(0);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <lcd_send_4bit+0x20>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2110      	movs	r1, #16
 8000e30:	481d      	ldr	r0, [pc, #116]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e32:	f001 f82d 	bl	8001e90 <HAL_GPIO_WritePin>
 8000e36:	e004      	b.n	8000e42 <lcd_send_4bit+0x2a>
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e3e:	f001 f827 	bl	8001e90 <HAL_GPIO_WritePin>
	if(data & 0x20) d5(1); else d5(0);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d005      	beq.n	8000e58 <lcd_send_4bit+0x40>
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2120      	movs	r1, #32
 8000e50:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e52:	f001 f81d 	bl	8001e90 <HAL_GPIO_WritePin>
 8000e56:	e004      	b.n	8000e62 <lcd_send_4bit+0x4a>
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e5e:	f001 f817 	bl	8001e90 <HAL_GPIO_WritePin>
	if(data & 0x40) d6(1); else d6(0);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <lcd_send_4bit+0x60>
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e72:	f001 f80d 	bl	8001e90 <HAL_GPIO_WritePin>
 8000e76:	e004      	b.n	8000e82 <lcd_send_4bit+0x6a>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e7e:	f001 f807 	bl	8001e90 <HAL_GPIO_WritePin>
	if(data & 0x80) d7(1); else d7(0);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da05      	bge.n	8000e96 <lcd_send_4bit+0x7e>
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e90:	f000 fffe 	bl	8001e90 <HAL_GPIO_WritePin>
	
}
 8000e94:	e004      	b.n	8000ea0 <lcd_send_4bit+0x88>
	if(data & 0x80) d7(1); else d7(0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <lcd_send_4bit+0x90>)
 8000e9c:	f000 fff8 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	48000400 	.word	0x48000400

08000eac <lcd_send>:

static void lcd_send(int8_t rs,uint8_t data){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	rs(rs);rw(0);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <lcd_send+0x24>
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <lcd_send+0x88>)
 8000eca:	f000 ffe1 	bl	8001e90 <HAL_GPIO_WritePin>
 8000ece:	e004      	b.n	8000eda <lcd_send+0x2e>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <lcd_send+0x88>)
 8000ed6:	f000 ffdb 	bl	8001e90 <HAL_GPIO_WritePin>
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <lcd_send+0x88>)
 8000ee0:	f000 ffd6 	bl	8001e90 <HAL_GPIO_WritePin>
	lcd_send_4bit(data);
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff96 	bl	8000e18 <lcd_send_4bit>
	en(1);delay_us(100);en(0);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <lcd_send+0x88>)
 8000ef2:	f000 ffcd 	bl	8001e90 <HAL_GPIO_WritePin>
 8000ef6:	2064      	movs	r0, #100	; 0x64
 8000ef8:	f7ff ff7a 	bl	8000df0 <delay_us>
 8000efc:	2200      	movs	r2, #0
 8000efe:	2104      	movs	r1, #4
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <lcd_send+0x88>)
 8000f02:	f000 ffc5 	bl	8001e90 <HAL_GPIO_WritePin>
	lcd_send_4bit(data<<4);
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff83 	bl	8000e18 <lcd_send_4bit>
	en(1);delay_us(100);en(0);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2104      	movs	r1, #4
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <lcd_send+0x88>)
 8000f18:	f000 ffba 	bl	8001e90 <HAL_GPIO_WritePin>
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f7ff ff67 	bl	8000df0 <delay_us>
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <lcd_send+0x88>)
 8000f28:	f000 ffb2 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	48000400 	.word	0x48000400

08000f38 <lcd_data>:

void lcd_cmd(uint8_t command){
	lcd_send(1,command);
}

void lcd_data(char c){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	lcd_send(1,(uint8_t)c);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4619      	mov	r1, r3
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ffb0 	bl	8000eac <lcd_send>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <lcd_init>:

void lcd_init(void){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	//bl(1);
	lcd_send(0,0x33);
 8000f58:	2133      	movs	r1, #51	; 0x33
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ffa6 	bl	8000eac <lcd_send>
  lcd_send(0,0x32);
 8000f60:	2132      	movs	r1, #50	; 0x32
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ffa2 	bl	8000eac <lcd_send>
  lcd_send(0,0x28);
 8000f68:	2128      	movs	r1, #40	; 0x28
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff9e 	bl	8000eac <lcd_send>
  lcd_send(0,0x0C);
 8000f70:	210c      	movs	r1, #12
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff9a 	bl	8000eac <lcd_send>
  lcd_send(0,0x06);
 8000f78:	2106      	movs	r1, #6
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff ff96 	bl	8000eac <lcd_send>
  lcd_send(0,0x01);
 8000f80:	2101      	movs	r1, #1
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff92 	bl	8000eac <lcd_send>
	HAL_Delay(2);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 fd05 	bl	8001998 <HAL_Delay>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <lcd_clr>:

void lcd_clr(void){
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
    lcd_send(0,0x01);
 8000f96:	2101      	movs	r1, #1
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff ff87 	bl	8000eac <lcd_send>
    HAL_Delay(2);
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 fcfa 	bl	8001998 <HAL_Delay>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <lcd_gotoxy>:


void lcd_gotoxy(char x, char y){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
	
    lcd_send(0,0x80+x+(y*0x40));
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	019b      	lsls	r3, r3, #6
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	3b80      	subs	r3, #128	; 0x80
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ff6e 	bl	8000eac <lcd_send>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <lcd_puts>:

void lcd_puts(char *text){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    while(*text){
 8000fe0:	e007      	b.n	8000ff2 <lcd_puts+0x1a>
        lcd_data(*text);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffa6 	bl	8000f38 <lcd_data>
        text++;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
    while(*text){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f3      	bne.n	8000fe2 <lcd_puts+0xa>
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fc5f 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f86d 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f7ff fe71 	bl	8000cf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001016:	f000 fa2b 	bl	8001470 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800101a:	f000 fa59 	bl	80014d0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800101e:	f000 f9d1 	bl	80013c4 <MX_TIM6_Init>
//    Error_Handler();
//  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fda0 	bl	8000b6c <ds18b20_read_address>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <main+0x32>
    Error_Handler();
 8001032:	f000 f89c 	bl	800116e <Error_Handler>
  }

  lcd_init();
 8001036:	f7ff ff8d 	bl	8000f54 <lcd_init>
  lcd_gotoxy(0,0);
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ffb3 	bl	8000fa8 <lcd_gotoxy>
  lcd_puts("Hello");
 8001042:	4827      	ldr	r0, [pc, #156]	; (80010e0 <main+0xdc>)
 8001044:	f7ff ffc8 	bl	8000fd8 <lcd_puts>
  HAL_Delay(2000);
 8001048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800104c:	f000 fca4 	bl	8001998 <HAL_Delay>
  char temp_ch[8] = "";
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  char celsius[2];
  celsius[0] = (char)223;
 8001058:	23df      	movs	r3, #223	; 0xdf
 800105a:	713b      	strb	r3, [r7, #4]
  celsius[1] = 'C';
 800105c:	2343      	movs	r3, #67	; 0x43
 800105e:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds18b20_start_measure(NULL);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fde4 	bl	8000c2e <ds18b20_start_measure>

	  HAL_Delay(750);
 8001066:	f240 20ee 	movw	r0, #750	; 0x2ee
 800106a:	f000 fc95 	bl	8001998 <HAL_Delay>
	  lcd_gotoxy(0,0);
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff99 	bl	8000fa8 <lcd_gotoxy>
	  strcpy(temp_ch, "");
 8001076:	2300      	movs	r3, #0
 8001078:	723b      	strb	r3, [r7, #8]
	  float temp = ds18b20_get_temp(NULL);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fe16 	bl	8000cac <ds18b20_get_temp>
 8001080:	ed87 0a07 	vstr	s0, [r7, #28]
	    if (temp >= 80.0f)
 8001084:	edd7 7a07 	vldr	s15, [r7, #28]
 8001088:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010e4 <main+0xe0>
 800108c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	db03      	blt.n	800109e <main+0x9a>
	      lcd_puts("Error");
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <main+0xe4>)
 8001098:	f7ff ff9e 	bl	8000fd8 <lcd_puts>
 800109c:	e01b      	b.n	80010d6 <main+0xd2>
	    else{
	      gcvt(temp,4,temp_ch);
 800109e:	69f8      	ldr	r0, [r7, #28]
 80010a0:	f7ff fa4a 	bl	8000538 <__aeabi_f2d>
 80010a4:	4604      	mov	r4, r0
 80010a6:	460d      	mov	r5, r1
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	2004      	movs	r0, #4
 80010b0:	ec45 4b10 	vmov	d0, r4, r5
 80010b4:	f002 fe70 	bl	8003d98 <gcvt>
		  lcd_clr();
 80010b8:	f7ff ff6b 	bl	8000f92 <lcd_clr>
		  result = strcat(temp_ch,celsius);
 80010bc:	1d3a      	adds	r2, r7, #4
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 febd 	bl	8003e44 <strcat>
 80010ca:	61b8      	str	r0, [r7, #24]
	      lcd_puts(temp_ch);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff81 	bl	8000fd8 <lcd_puts>
	    }
	    HAL_Delay(1000);
 80010d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010da:	f000 fc5d 	bl	8001998 <HAL_Delay>
  {
 80010de:	e7bf      	b.n	8001060 <main+0x5c>
 80010e0:	080064e0 	.word	0x080064e0
 80010e4:	42a00000 	.word	0x42a00000
 80010e8:	080064e8 	.word	0x080064e8

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	; 0x40
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fe9a 	bl	8003e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001122:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fec7 	bl	8001ec0 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001138:	f000 f819 	bl	800116e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fdba 	bl	8002cd0 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001162:	f000 f804 	bl	800116e <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3740      	adds	r7, #64	; 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001172:	b672      	cpsid	i
}
 8001174:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001176:	e7fe      	b.n	8001176 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_MspInit+0x44>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_MspInit+0x44>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_MspInit+0x44>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x44>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_MspInit+0x44>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_MspInit+0x44>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ae:	2007      	movs	r0, #7
 80011b0:	f000 fcc8 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 fba4 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	return 1;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_kill>:

int _kill(int pid, int sig)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800122e:	f002 fdd7 	bl	8003de0 <__errno>
 8001232:	4603      	mov	r3, r0
 8001234:	2216      	movs	r2, #22
 8001236:	601a      	str	r2, [r3, #0]
	return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_exit>:

void _exit (int status)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffe7 	bl	8001224 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001256:	e7fe      	b.n	8001256 <_exit+0x12>

08001258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e00a      	b.n	8001280 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800126a:	f3af 8000 	nop.w
 800126e:	4601      	mov	r1, r0
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf0      	blt.n	800126a <_read+0x12>
	}

return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e009      	b.n	80012b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbf1      	blt.n	80012a4 <_write+0x12>
	}
	return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_close>:

int _close(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f2:	605a      	str	r2, [r3, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_isatty>:

int _isatty(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f002 fd3c 	bl	8003de0 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20003000 	.word	0x20003000
 8001394:	00000400 	.word	0x00000400
 8001398:	2000008c 	.word	0x2000008c
 800139c:	20000200 	.word	0x20000200

080013a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_TIM6_Init+0x64>)
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <MX_TIM6_Init+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_TIM6_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_TIM6_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_TIM6_Init+0x64>)
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_TIM6_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM6_Init+0x64>)
 80013f6:	f001 fea1 	bl	800313c <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001400:	f7ff feb5 	bl	800116e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM6_Init+0x64>)
 8001412:	f001 ff63 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800141c:	f7ff fea7 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000098 	.word	0x20000098
 800142c:	40001000 	.word	0x40001000

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_TIM_Base_MspInit+0x38>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10b      	bne.n	800145a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_TIM_Base_MspInit+0x3c>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_TIM_Base_MspInit+0x3c>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <HAL_TIM_Base_MspInit+0x3c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40001000 	.word	0x40001000
 800146c:	40021000 	.word	0x40021000

08001470 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <MX_USART2_UART_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 800147c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014b4:	f001 ff80 	bl	80033b8 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014be:	f7ff fe56 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000168 	.word	0x20000168
 80014cc:	40004400 	.word	0x40004400

080014d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <MX_USART3_UART_Init+0x64>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_USART3_UART_Init+0x60>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART3_UART_Init+0x60>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_USART3_UART_Init+0x60>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART3_UART_Init+0x60>)
 800150e:	2210      	movs	r2, #16
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_USART3_UART_Init+0x60>)
 8001514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART3_UART_Init+0x60>)
 800151c:	f001 ff9a 	bl	8003454 <HAL_HalfDuplex_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001526:	f7ff fe22 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000e4 	.word	0x200000e4
 8001534:	40004800 	.word	0x40004800

08001538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_UART_MspInit+0xdc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d129      	bne.n	80015ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_UART_MspInit+0xe0>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <HAL_UART_MspInit+0xe0>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <HAL_UART_MspInit+0xe0>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <HAL_UART_MspInit+0xe0>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a28      	ldr	r2, [pc, #160]	; (8001618 <HAL_UART_MspInit+0xe0>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_UART_MspInit+0xe0>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158a:	230c      	movs	r3, #12
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159a:	2307      	movs	r3, #7
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f000 fb00 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015ac:	e02d      	b.n	800160a <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_UART_MspInit+0xe4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d128      	bne.n	800160a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_UART_MspInit+0xe0>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a16      	ldr	r2, [pc, #88]	; (8001618 <HAL_UART_MspInit+0xe0>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c2:	61d3      	str	r3, [r2, #28]
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_UART_MspInit+0xe0>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0xe0>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_UART_MspInit+0xe0>)
 80015d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015da:	6153      	str	r3, [r2, #20]
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_UART_MspInit+0xe0>)
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	2312      	movs	r3, #18
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fa:	2307      	movs	r3, #7
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <HAL_UART_MspInit+0xe8>)
 8001606:	f000 fad1 	bl	8001bac <HAL_GPIO_Init>
}
 800160a:	bf00      	nop
 800160c:	3730      	adds	r7, #48	; 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000
 800161c:	40004800 	.word	0x40004800
 8001620:	48000400 	.word	0x48000400

08001624 <set_baudrate>:
#include "wire.h"
#include "gpio.h"
//#include "tim.h"

static void set_baudrate(uint32_t baudrate)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <set_baudrate+0x64>)
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <set_baudrate+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <set_baudrate+0x64>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <set_baudrate+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <set_baudrate+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <set_baudrate+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <set_baudrate+0x64>)
 800164c:	220c      	movs	r2, #12
 800164e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <set_baudrate+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <set_baudrate+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <set_baudrate+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <set_baudrate+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <set_baudrate+0x64>)
 800166a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800166e:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <set_baudrate+0x64>)
 8001672:	f001 feef 	bl	8003454 <HAL_HalfDuplex_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <set_baudrate+0x5c>
  {
    Error_Handler();
 800167c:	f7ff fd77 	bl	800116e <Error_Handler>
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200000e4 	.word	0x200000e4
 800168c:	40004800 	.word	0x40004800

08001690 <wire_reset>:
//  return HAL_TIM_Base_Start(&htim6);
//}


HAL_StatusTypeDef wire_reset(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 8001696:	23f0      	movs	r3, #240	; 0xf0
 8001698:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 800169e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80016a2:	f7ff ffbf 	bl	8001624 <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 80016a6:	1df9      	adds	r1, r7, #7
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	2201      	movs	r2, #1
 80016ae:	480c      	ldr	r0, [pc, #48]	; (80016e0 <wire_reset+0x50>)
 80016b0:	f001 ff26 	bl	8003500 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 80016b4:	1db9      	adds	r1, r7, #6
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	2201      	movs	r2, #1
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <wire_reset+0x50>)
 80016be:	f001 ffb3 	bl	8003628 <HAL_UART_Receive>
  set_baudrate(115200);
 80016c2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80016c6:	f7ff ffad 	bl	8001624 <set_baudrate>

  if (data_in != 0xF0)
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2bf0      	cmp	r3, #240	; 0xf0
 80016ce:	d001      	beq.n	80016d4 <wire_reset+0x44>
    return HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <wire_reset+0x46>
  else
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000e4 	.word	0x200000e4

080016e4 <read_bit>:

static int read_bit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 80016ea:	23ff      	movs	r3, #255	; 0xff
 80016ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 80016f2:	1df9      	adds	r1, r7, #7
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	2201      	movs	r2, #1
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <read_bit+0x38>)
 80016fc:	f001 ff00 	bl	8003500 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8001700:	1db9      	adds	r1, r7, #6
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	2201      	movs	r2, #1
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <read_bit+0x38>)
 800170a:	f001 ff8d 	bl	8003628 <HAL_UART_Receive>

  return data_in & 0x01;
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	f003 0301 	and.w	r3, r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200000e4 	.word	0x200000e4

08001720 <wire_read>:

uint8_t wire_read(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	e00e      	b.n	800174e <wire_read+0x2e>
    value >>= 1;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8001736:	f7ff ffd5 	bl	80016e4 <read_bit>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <wire_read+0x28>
      value |= 0x80;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001746:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b07      	cmp	r3, #7
 8001752:	dded      	ble.n	8001730 <wire_read+0x10>
  }
  return value;
 8001754:	79fb      	ldrb	r3, [r7, #7]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <write_bit>:

static void write_bit(int value)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if (value) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <write_bit+0x24>
      uint8_t data_out = 0xff;
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001772:	f107 010f 	add.w	r1, r7, #15
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	2201      	movs	r2, #1
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <write_bit+0x40>)
 800177e:	f001 febf 	bl	8003500 <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 8001782:	e009      	b.n	8001798 <write_bit+0x38>
      uint8_t data_out = 0x0;
 8001784:	2300      	movs	r3, #0
 8001786:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001788:	f107 010e 	add.w	r1, r7, #14
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	2201      	movs	r2, #1
 8001792:	4803      	ldr	r0, [pc, #12]	; (80017a0 <write_bit+0x40>)
 8001794:	f001 feb4 	bl	8003500 <HAL_UART_Transmit>
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200000e4 	.word	0x200000e4

080017a4 <wire_write>:

void wire_write(uint8_t byte)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e00b      	b.n	80017cc <wire_write+0x28>
    write_bit(byte & 0x01);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffd0 	bl	8001760 <write_bit>
    byte >>= 1;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3301      	adds	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b07      	cmp	r3, #7
 80017d0:	ddf0      	ble.n	80017b4 <wire_write+0x10>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	460a      	mov	r2, r1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e016      	b.n	8001820 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	4053      	eors	r3, r2
 80017f8:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <byte_crc+0x38>
      crc ^= 0x8c;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001810:	43db      	mvns	r3, r3
 8001812:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b07      	cmp	r3, #7
 8001824:	dde5      	ble.n	80017f2 <byte_crc+0x16>
  }
  return crc;
 8001826:	79fb      	ldrb	r3, [r7, #7]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e00d      	b.n	8001864 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	7afb      	ldrb	r3, [r7, #11]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ffc1 	bl	80017dc <byte_crc>
 800185a:	4603      	mov	r3, r0
 800185c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbed      	blt.n	8001848 <wire_crc+0x14>

    return crc;
 800186c:	7afb      	ldrb	r3, [r7, #11]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a2:	f7ff fd7d 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f002 faa1 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018aa:	f7ff fbab 	bl	8001004 <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018bc:	080067fc 	.word	0x080067fc
  ldr r2, =_sbss
 80018c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018c4:	20000200 	.word	0x20000200

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f931 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fc46 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f93b 	bl	8001b92 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f911 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000008 	.word	0x20000008
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	200001ec 	.word	0x200001ec

08001980 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;  
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200001ec 	.word	0x200001ec

08001998 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff47 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5c 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb0 	bl	8001b00 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e14e      	b.n	8001e5a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8140 	beq.w	8001e54 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 809a 	beq.w	8001e54 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_GPIO_Init+0x2d4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1dc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1d8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <HAL_GPIO_Init+0x2dc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1d4>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f aea9 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	48000400 	.word	0x48000400
 8001e84:	48000800 	.word	0x48000800
 8001e88:	48000c00 	.word	0x48000c00
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f000 bef4 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 816a 	beq.w	80021be <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eea:	4bb3      	ldr	r3, [pc, #716]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d00c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef6:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d159      	bne.n	8001fb6 <HAL_RCC_OscConfig+0xf6>
 8001f02:	4bad      	ldr	r3, [pc, #692]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0e:	d152      	bne.n	8001fb6 <HAL_RCC_OscConfig+0xf6>
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x82>
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0xae>
 8001f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f6a:	4b93      	ldr	r3, [pc, #588]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f72:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f7a:	fa92 f2a2 	rbit	r2, r2
 8001f7e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f82:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 810c 	beq.w	80021bc <HAL_RCC_OscConfig+0x2fc>
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8106 	bne.w	80021bc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f000 be86 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x110>
 8001fc2:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7c      	ldr	r2, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e030      	b.n	8002032 <HAL_RCC_OscConfig+0x172>
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x134>
 8001fda:	4b77      	ldr	r3, [pc, #476]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a76      	ldr	r2, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a73      	ldr	r2, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01e      	b.n	8002032 <HAL_RCC_OscConfig+0x172>
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x15a>
 8002000:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a6c      	ldr	r2, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a69      	ldr	r2, [pc, #420]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x172>
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a66      	ldr	r2, [pc, #408]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f023 020f 	bic.w	r2, r3, #15
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	495d      	ldr	r1, [pc, #372]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d059      	beq.n	8002104 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fc96 	bl	8001980 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205a:	f7ff fc91 	bl	8001980 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d902      	bls.n	8002070 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	f000 be29 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002074:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002084:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1e2>
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x20e>
 80020a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020be:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020da:	fa92 f2a2 	rbit	r2, r2
 80020de:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020e2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ab      	beq.n	800205a <HAL_RCC_OscConfig+0x19a>
 8002102:	e05c      	b.n	80021be <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fc3c 	bl	8001980 <HAL_GetTick>
 8002108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210e:	f7ff fc37 	bl	8001980 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d902      	bls.n	8002124 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	f000 bdcf 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002138:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d102      	bne.n	8002156 <HAL_RCC_OscConfig+0x296>
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x2c2>
 8002156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800216a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002172:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_RCC_OscConfig+0x2f8>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002186:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800218a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002196:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0220 	orr.w	r2, r2, #32
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ab      	bne.n	800210e <HAL_RCC_OscConfig+0x24e>
 80021b6:	e002      	b.n	80021be <HAL_RCC_OscConfig+0x2fe>
 80021b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 816f 	beq.w	80024ac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021ce:	4bd0      	ldr	r3, [pc, #832]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021da:	4bcd      	ldr	r3, [pc, #820]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d16c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x400>
 80021e6:	4bca      	ldr	r3, [pc, #808]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d166      	bne.n	80022c0 <HAL_RCC_OscConfig+0x400>
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002204:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0x362>
 800221c:	4bbc      	ldr	r3, [pc, #752]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	e013      	b.n	800224a <HAL_RCC_OscConfig+0x38a>
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002234:	2302      	movs	r3, #2
 8002236:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800223a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002246:	4bb2      	ldr	r3, [pc, #712]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2202      	movs	r2, #2
 800224c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002250:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800225c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f042 0220 	orr.w	r2, r2, #32
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f002 021f 	and.w	r2, r2, #31
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f202 	lsl.w	r2, r1, r2
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_RCC_OscConfig+0x3cc>
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d002      	beq.n	800228c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 bd1b 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4ba0      	ldr	r3, [pc, #640]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	21f8      	movs	r1, #248	; 0xf8
 800229c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022a4:	fa91 f1a1 	rbit	r1, r1
 80022a8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022ac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022b0:	fab1 f181 	clz	r1, r1
 80022b4:	b2c9      	uxtb	r1, r1
 80022b6:	408b      	lsls	r3, r1
 80022b8:	4995      	ldr	r1, [pc, #596]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e0f5      	b.n	80024ac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8085 	beq.w	80023d6 <HAL_RCC_OscConfig+0x516>
 80022cc:	2301      	movs	r3, #1
 80022ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fb42 	bl	8001980 <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff fb3d 	bl	8001980 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d902      	bls.n	8002318 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	f000 bcd5 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800232a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x488>
 8002342:	4b73      	ldr	r3, [pc, #460]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e013      	b.n	8002370 <HAL_RCC_OscConfig+0x4b0>
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002360:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2202      	movs	r2, #2
 8002372:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002376:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002382:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f042 0220 	orr.w	r2, r2, #32
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f002 021f 	and.w	r2, r2, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0af      	beq.n	8002302 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	21f8      	movs	r1, #248	; 0xf8
 80023b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023ba:	fa91 f1a1 	rbit	r1, r1
 80023be:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023c2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023c6:	fab1 f181 	clz	r1, r1
 80023ca:	b2c9      	uxtb	r1, r1
 80023cc:	408b      	lsls	r3, r1
 80023ce:	4950      	ldr	r1, [pc, #320]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e06a      	b.n	80024ac <HAL_RCC_OscConfig+0x5ec>
 80023d6:	2301      	movs	r3, #1
 80023d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2300      	movs	r3, #0
 8002400:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7ff fabd 	bl	8001980 <HAL_GetTick>
 8002406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff fab8 	bl	8001980 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d902      	bls.n	8002422 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	f000 bc50 	b.w	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0x592>
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e013      	b.n	800247a <HAL_RCC_OscConfig+0x5ba>
 8002452:	2302      	movs	r3, #2
 8002454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800246a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_RCC_OscConfig+0x650>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2202      	movs	r2, #2
 800247c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002480:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002484:	fa92 f2a2 	rbit	r2, r2
 8002488:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800248c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0220 	orr.w	r2, r2, #32
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1af      	bne.n	800240c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80da 	beq.w	8002670 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d069      	beq.n	800259a <HAL_RCC_OscConfig+0x6da>
 80024c6:	2301      	movs	r3, #1
 80024c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x654>)
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	461a      	mov	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff fa46 	bl	8001980 <HAL_GetTick>
 80024f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f8:	e00e      	b.n	8002518 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fa:	f7ff fa41 	bl	8001980 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d906      	bls.n	8002518 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e3d9      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	10908120 	.word	0x10908120
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800252a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002558:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	4ba5      	ldr	r3, [pc, #660]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800255c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002562:	2102      	movs	r1, #2
 8002564:	6019      	str	r1, [r3, #0]
 8002566:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f1a3 	rbit	r1, r3
 8002570:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002574:	6019      	str	r1, [r3, #0]
  return result;
 8002576:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0b0      	beq.n	80024fa <HAL_RCC_OscConfig+0x63a>
 8002598:	e06a      	b.n	8002670 <HAL_RCC_OscConfig+0x7b0>
 800259a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025b0:	601a      	str	r2, [r3, #0]
  return result;
 80025b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	461a      	mov	r2, r3
 80025c8:	2300      	movs	r3, #0
 80025ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7ff f9d8 	bl	8001980 <HAL_GetTick>
 80025d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	e009      	b.n	80025ea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7ff f9d3 	bl	8001980 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e36b      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 80025ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025ee:	2202      	movs	r2, #2
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002606:	2202      	movs	r2, #2
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002630:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002632:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800263a:	2102      	movs	r1, #2
 800263c:	6019      	str	r1, [r3, #0]
 800263e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f1a3 	rbit	r1, r3
 8002648:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800264c:	6019      	str	r1, [r3, #0]
  return result;
 800264e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1b2      	bne.n	80025d6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8158 	beq.w	8002930 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d11a      	bne.n	80026fa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d0:	f7ff f956 	bl	8001980 <HAL_GetTick>
 80026d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7ff f951 	bl	8001980 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e2e9      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ef      	beq.n	80026da <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x852>
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e02f      	b.n	8002772 <HAL_RCC_OscConfig+0x8b2>
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x876>
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e01d      	b.n	8002772 <HAL_RCC_OscConfig+0x8b2>
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x89a>
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x8b2>
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06b      	beq.n	8002854 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7ff f900 	bl	8001980 <HAL_GetTick>
 8002780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff f8fb 	bl	8001980 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e291      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 800279e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027a2:	2202      	movs	r2, #2
 80027a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027ba:	2202      	movs	r2, #2
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fa93 f2a3 	rbit	r2, r3
 80027c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d109      	bne.n	80027fc <HAL_RCC_OscConfig+0x93c>
 80027e8:	4b01      	ldr	r3, [pc, #4]	; (80027f0 <HAL_RCC_OscConfig+0x930>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x958>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	10908120 	.word	0x10908120
 80027f8:	40007000 	.word	0x40007000
 80027fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	4bbb      	ldr	r3, [pc, #748]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800281c:	2102      	movs	r1, #2
 800281e:	6011      	str	r1, [r2, #0]
 8002820:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fa92 f1a2 	rbit	r1, r2
 800282a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800282e:	6011      	str	r1, [r2, #0]
  return result;
 8002830:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d099      	beq.n	8002786 <HAL_RCC_OscConfig+0x8c6>
 8002852:	e063      	b.n	800291c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff f894 	bl	8001980 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff f88f 	bl	8001980 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e225      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002876:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800287a:	2202      	movs	r2, #2
 800287c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028a4:	601a      	str	r2, [r3, #0]
  return result;
 80028a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d102      	bne.n	80028c6 <HAL_RCC_OscConfig+0xa06>
 80028c0:	4b90      	ldr	r3, [pc, #576]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	e00d      	b.n	80028e2 <HAL_RCC_OscConfig+0xa22>
 80028c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028ca:	2202      	movs	r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4b89      	ldr	r3, [pc, #548]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028e6:	2102      	movs	r1, #2
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	fa92 f1a2 	rbit	r1, r2
 80028f4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028f8:	6011      	str	r1, [r2, #0]
  return result;
 80028fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1a0      	bne.n	800285e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800291c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4a76      	ldr	r2, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 81c2 	beq.w	8002cc0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293c:	4b71      	ldr	r3, [pc, #452]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	f000 819c 	beq.w	8002c82 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b02      	cmp	r3, #2
 8002952:	f040 8114 	bne.w	8002b7e <HAL_RCC_OscConfig+0xcbe>
 8002956:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800295a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800295e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800296e:	601a      	str	r2, [r3, #0]
  return result;
 8002970:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fff8 	bl	8001980 <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	e009      	b.n	80029aa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fff3 	bl	8001980 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e18b      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 80029aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029c2:	601a      	str	r2, [r3, #0]
  return result;
 80029c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d102      	bne.n	80029e4 <HAL_RCC_OscConfig+0xb24>
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	e01b      	b.n	8002a1c <HAL_RCC_OscConfig+0xb5c>
 80029e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	fa92 f1a2 	rbit	r1, r2
 8002a30:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a34:	6011      	str	r1, [r2, #0]
  return result;
 8002a36:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f042 0220 	orr.w	r2, r2, #32
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f002 021f 	and.w	r2, r2, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d19e      	bne.n	8002996 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	4925      	ldr	r1, [pc, #148]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a8c:	601a      	str	r2, [r3, #0]
  return result;
 8002a8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a92:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe ff69 	bl	8001980 <HAL_GetTick>
 8002aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab2:	e009      	b.n	8002ac8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe ff64 	bl	8001980 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0fc      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002ac8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ae0:	601a      	str	r2, [r3, #0]
  return result;
 8002ae2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ae6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0xc48>
 8002afc:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <HAL_RCC_OscConfig+0xc44>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e01e      	b.n	8002b40 <HAL_RCC_OscConfig+0xc80>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0xe0c>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fa92 f1a2 	rbit	r1, r2
 8002b54:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b58:	6011      	str	r1, [r2, #0]
  return result;
 8002b5a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0220 	orr.w	r2, r2, #32
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d09b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xbf4>
 8002b7c:	e0a0      	b.n	8002cc0 <HAL_RCC_OscConfig+0xe00>
 8002b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b96:	601a      	str	r2, [r3, #0]
  return result;
 8002b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fee4 	bl	8001980 <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fedf 	bl	8001980 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e077      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
 8002bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bea:	601a      	str	r2, [r3, #0]
  return result;
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_OscConfig+0xd4c>
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_RCC_OscConfig+0xe0c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e01b      	b.n	8002c44 <HAL_RCC_OscConfig+0xd84>
 8002c0c:	f107 0320 	add.w	r3, r7, #32
 8002c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f107 0320 	add.w	r3, r7, #32
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f107 0318 	add.w	r3, r7, #24
 8002c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f2a3 	rbit	r2, r3
 8002c3a:	f107 0314 	add.w	r3, r7, #20
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_RCC_OscConfig+0xe0c>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f107 0210 	add.w	r2, r7, #16
 8002c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c4c:	6011      	str	r1, [r2, #0]
 8002c4e:	f107 0210 	add.w	r2, r7, #16
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	fa92 f1a2 	rbit	r1, r2
 8002c58:	f107 020c 	add.w	r2, r7, #12
 8002c5c:	6011      	str	r1, [r2, #0]
  return result;
 8002c5e:	f107 020c 	add.w	r2, r7, #12
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	fab2 f282 	clz	r2, r2
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f002 021f 	and.w	r2, r2, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d19e      	bne.n	8002bbe <HAL_RCC_OscConfig+0xcfe>
 8002c80:	e01e      	b.n	8002cc0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_RCC_OscConfig+0xe0c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002caa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b09e      	sub	sp, #120	; 0x78
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e162      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b90      	ldr	r3, [pc, #576]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d910      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b8d      	ldr	r3, [pc, #564]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 0207 	bic.w	r2, r3, #7
 8002cfe:	498b      	ldr	r1, [pc, #556]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e14a      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	497f      	ldr	r1, [pc, #508]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80dc 	beq.w	8002efc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d13c      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xf6>
 8002d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xa6>
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e00f      	b.n	8002d96 <HAL_RCC_ClockConfig+0xc6>
 8002d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	667b      	str	r3, [r7, #100]	; 0x64
 8002d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d88:	663b      	str	r3, [r7, #96]	; 0x60
 8002d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d9e:	fa92 f2a2 	rbit	r2, r2
 8002da2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002da6:	fab2 f282 	clz	r2, r2
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f042 0220 	orr.w	r2, r2, #32
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f002 021f 	and.w	r2, r2, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d17b      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0f3      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d13c      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x178>
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x128>
 8002df2:	4b4f      	ldr	r3, [pc, #316]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_ClockConfig+0x148>
 8002df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
 8002e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	f042 0220 	orr.w	r2, r2, #32
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	f002 021f 	and.w	r2, r2, #31
 8002e38:	2101      	movs	r1, #1
 8002e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d13a      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b2      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x1a0>
 8002e6a:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	e00d      	b.n	8002e8c <HAL_RCC_ClockConfig+0x1bc>
 8002e70:	2302      	movs	r3, #2
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	61ba      	str	r2, [r7, #24]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	fa92 f2a2 	rbit	r2, r2
 8002e96:	617a      	str	r2, [r7, #20]
  return result;
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f002 021f 	and.w	r2, r2, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e079      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	491a      	ldr	r1, [pc, #104]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fd58 	bl	8001980 <HAL_GetTick>
 8002ed0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fd54 	bl	8001980 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e061      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_ClockConfig+0x260>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d214      	bcs.n	8002f34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	4906      	ldr	r1, [pc, #24]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_RCC_ClockConfig+0x25c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e040      	b.n	8002fae <HAL_RCC_ClockConfig+0x2de>
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	491a      	ldr	r1, [pc, #104]	; (8002fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4912      	ldr	r1, [pc, #72]	; (8002fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f72:	f000 f829 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f76:	4601      	mov	r1, r0
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f80:	22f0      	movs	r2, #240	; 0xf0
 8002f82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	fa92 f2a2 	rbit	r2, r2
 8002f8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	fab2 f282 	clz	r2, r2
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	40d3      	lsrs	r3, r2
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x2ec>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_RCC_ClockConfig+0x2f0>)
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCC_ClockConfig+0x2f4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fca6 	bl	80018f8 <HAL_InitTick>
  
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3778      	adds	r7, #120	; 0x78
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	080064f0 	.word	0x080064f0
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x36>
 8002ff6:	e03c      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ffa:	623b      	str	r3, [r7, #32]
      break;
 8002ffc:	e03c      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003004:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003008:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	607a      	str	r2, [r7, #4]
  return result;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	fab2 f282 	clz	r2, r2
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	40d3      	lsrs	r3, r2
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_RCC_GetSysClockFreq+0xc8>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	220f      	movs	r2, #15
 800302c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	fa92 f2a2 	rbit	r2, r2
 8003034:	60fa      	str	r2, [r7, #12]
  return result;
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	40d3      	lsrs	r3, r2
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003050:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
 8003060:	e004      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	623b      	str	r3, [r7, #32]
      break;
 8003070:	e002      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003074:	623b      	str	r3, [r7, #32]
      break;
 8003076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003078:	6a3b      	ldr	r3, [r7, #32]
}
 800307a:	4618      	mov	r0, r3
 800307c:	372c      	adds	r7, #44	; 0x2c
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	007a1200 	.word	0x007a1200
 8003090:	08006508 	.word	0x08006508
 8003094:	08006518 	.word	0x08006518
 8003098:	003d0900 	.word	0x003d0900

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030ba:	f7ff ffef 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030be:	4601      	mov	r1, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	fa92 f2a2 	rbit	r2, r2
 80030d4:	603a      	str	r2, [r7, #0]
  return result;
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	40d3      	lsrs	r3, r2
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08006500 	.word	0x08006500

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030fe:	f7ff ffcd 	bl	800309c <HAL_RCC_GetHCLKFreq>
 8003102:	4601      	mov	r1, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800310c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003110:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	fa92 f2a2 	rbit	r2, r2
 8003118:	603a      	str	r2, [r7, #0]
  return result;
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	fab2 f282 	clz	r2, r2
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	40d3      	lsrs	r3, r2
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	08006500 	.word	0x08006500

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e049      	b.n	80031e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f964 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f836 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <TIM_Base_SetConfig+0xdc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_Base_SetConfig+0x28>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0x28>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <TIM_Base_SetConfig+0xe0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d108      	bne.n	8003226 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <TIM_Base_SetConfig+0xdc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d00f      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <TIM_Base_SetConfig+0xe0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00b      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <TIM_Base_SetConfig+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <TIM_Base_SetConfig+0xe8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <TIM_Base_SetConfig+0xec>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d108      	bne.n	8003268 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <TIM_Base_SetConfig+0xdc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0xc0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <TIM_Base_SetConfig+0xe4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0xc0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <TIM_Base_SetConfig+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0xc0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <TIM_Base_SetConfig+0xec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800

080032dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e054      	b.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a24      	ldr	r2, [pc, #144]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003324:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335c:	d009      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10c      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4313      	orrs	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40014000 	.word	0x40014000

080033b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e040      	b.n	800344c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe f8ac 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9e8 	bl	80037cc <UART_SetConfig>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e022      	b.n	800344c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fb12 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fb99 	bl	8003b7c <UART_CheckIdleState>
 800344a:	4603      	mov	r3, r0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e048      	b.n	80034f8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe f85e 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f99a 	bl	80037cc <UART_SetConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e02a      	b.n	80034f8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fac4 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80034ce:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fb43 	bl	8003b7c <UART_CheckIdleState>
 80034f6:	4603      	mov	r3, r0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003514:	2b20      	cmp	r3, #32
 8003516:	f040 8082 	bne.w	800361e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_UART_Transmit+0x26>
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07a      	b.n	8003620 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_UART_Transmit+0x38>
 8003534:	2302      	movs	r3, #2
 8003536:	e073      	b.n	8003620 <HAL_UART_Transmit+0x120>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	; 0x21
 800354c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354e:	f7fe fa17 	bl	8001980 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Transmit+0x80>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003590:	e02d      	b.n	80035ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fb36 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e039      	b.n	8003620 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035be:	b292      	uxth	r2, r2
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	3302      	adds	r3, #2
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	e008      	b.n	80035dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	b292      	uxth	r2, r2
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1cb      	bne.n	8003592 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	2140      	movs	r1, #64	; 0x40
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fb02 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e005      	b.n	8003620 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363c:	2b20      	cmp	r3, #32
 800363e:	f040 80bf 	bne.w	80037c0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Receive+0x26>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0b7      	b.n	80037c2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UART_Receive+0x38>
 800365c:	2302      	movs	r3, #2
 800365e:	e0b0      	b.n	80037c2 <HAL_UART_Receive+0x19a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2222      	movs	r2, #34	; 0x22
 8003674:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367c:	f7fe f980 	bl	8001980 <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369a:	d10e      	bne.n	80036ba <HAL_UART_Receive+0x92>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_UART_Receive+0x88>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ae:	e02d      	b.n	800370c <HAL_UART_Receive+0xe4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b8:	e028      	b.n	800370c <HAL_UART_Receive+0xe4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_UART_Receive+0xb6>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <HAL_UART_Receive+0xac>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d2:	e01b      	b.n	800370c <HAL_UART_Receive+0xe4>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	227f      	movs	r2, #127	; 0x7f
 80036d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036dc:	e016      	b.n	800370c <HAL_UART_Receive+0xe4>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e6:	d10d      	bne.n	8003704 <HAL_UART_Receive+0xdc>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_Receive+0xd2>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	227f      	movs	r2, #127	; 0x7f
 80036f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f8:	e008      	b.n	800370c <HAL_UART_Receive+0xe4>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	223f      	movs	r2, #63	; 0x3f
 80036fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003702:	e003      	b.n	800370c <HAL_UART_Receive+0xe4>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003712:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	d108      	bne.n	8003730 <HAL_UART_Receive+0x108>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e003      	b.n	8003738 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003740:	e033      	b.n	80037aa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2120      	movs	r1, #32
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fa5e 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e032      	b.n	80037c2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10c      	bne.n	800377c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003768:	b29a      	uxth	r2, r3
 800376a:	8a7b      	ldrh	r3, [r7, #18]
 800376c:	4013      	ands	r3, r2
 800376e:	b29a      	uxth	r2, r3
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3302      	adds	r3, #2
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e00d      	b.n	8003798 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003782:	b29b      	uxth	r3, r3
 8003784:	b2da      	uxtb	r2, r3
 8003786:	8a7b      	ldrh	r3, [r7, #18]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4013      	ands	r3, r2
 800378c:	b2da      	uxtb	r2, r3
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1c5      	bne.n	8003742 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b8a      	ldr	r3, [pc, #552]	; (8003a20 <UART_SetConfig+0x254>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	430b      	orrs	r3, r1
 8003802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a78      	ldr	r2, [pc, #480]	; (8003a24 <UART_SetConfig+0x258>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d120      	bne.n	800388a <UART_SetConfig+0xbe>
 8003848:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <UART_SetConfig+0x25c>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b03      	cmp	r3, #3
 8003852:	d817      	bhi.n	8003884 <UART_SetConfig+0xb8>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0x90>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	0800386d 	.word	0x0800386d
 8003860:	08003879 	.word	0x08003879
 8003864:	0800387f 	.word	0x0800387f
 8003868:	08003873 	.word	0x08003873
 800386c:	2300      	movs	r3, #0
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e01d      	b.n	80038ae <UART_SetConfig+0xe2>
 8003872:	2302      	movs	r3, #2
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e01a      	b.n	80038ae <UART_SetConfig+0xe2>
 8003878:	2304      	movs	r3, #4
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e017      	b.n	80038ae <UART_SetConfig+0xe2>
 800387e:	2308      	movs	r3, #8
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e014      	b.n	80038ae <UART_SetConfig+0xe2>
 8003884:	2310      	movs	r3, #16
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e011      	b.n	80038ae <UART_SetConfig+0xe2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a67      	ldr	r2, [pc, #412]	; (8003a2c <UART_SetConfig+0x260>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <UART_SetConfig+0xce>
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e009      	b.n	80038ae <UART_SetConfig+0xe2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <UART_SetConfig+0x264>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d102      	bne.n	80038aa <UART_SetConfig+0xde>
 80038a4:	2300      	movs	r3, #0
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e001      	b.n	80038ae <UART_SetConfig+0xe2>
 80038aa:	2310      	movs	r3, #16
 80038ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b6:	d15b      	bne.n	8003970 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80038b8:	7ffb      	ldrb	r3, [r7, #31]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d827      	bhi.n	800390e <UART_SetConfig+0x142>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0xf8>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	0800390f 	.word	0x0800390f
 80038d4:	080038ff 	.word	0x080038ff
 80038d8:	0800390f 	.word	0x0800390f
 80038dc:	0800390f 	.word	0x0800390f
 80038e0:	0800390f 	.word	0x0800390f
 80038e4:	08003907 	.word	0x08003907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7ff fbe4 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 80038ec:	61b8      	str	r0, [r7, #24]
        break;
 80038ee:	e013      	b.n	8003918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f0:	f7ff fc02 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 80038f4:	61b8      	str	r0, [r7, #24]
        break;
 80038f6:	e00f      	b.n	8003918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f8:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <UART_SetConfig+0x268>)
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e00c      	b.n	8003918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fe:	f7ff fb63 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8003902:	61b8      	str	r0, [r7, #24]
        break;
 8003904:	e008      	b.n	8003918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	61bb      	str	r3, [r7, #24]
        break;
 800390c:	e004      	b.n	8003918 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	77bb      	strb	r3, [r7, #30]
        break;
 8003916:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d074      	beq.n	8003a08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	005a      	lsls	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	441a      	add	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	b29b      	uxth	r3, r3
 8003934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d916      	bls.n	800396a <UART_SetConfig+0x19e>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d212      	bcs.n	800396a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f023 030f 	bic.w	r3, r3, #15
 800394c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	b29a      	uxth	r2, r3
 800395a:	89fb      	ldrh	r3, [r7, #14]
 800395c:	4313      	orrs	r3, r2
 800395e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	89fa      	ldrh	r2, [r7, #14]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e04e      	b.n	8003a08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	77bb      	strb	r3, [r7, #30]
 800396e:	e04b      	b.n	8003a08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003970:	7ffb      	ldrb	r3, [r7, #31]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d827      	bhi.n	80039c6 <UART_SetConfig+0x1fa>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <UART_SetConfig+0x1b0>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039a1 	.word	0x080039a1
 8003980:	080039a9 	.word	0x080039a9
 8003984:	080039b1 	.word	0x080039b1
 8003988:	080039c7 	.word	0x080039c7
 800398c:	080039b7 	.word	0x080039b7
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039c7 	.word	0x080039c7
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039bf 	.word	0x080039bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a0:	f7ff fb88 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 80039a4:	61b8      	str	r0, [r7, #24]
        break;
 80039a6:	e013      	b.n	80039d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7ff fba6 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 80039ac:	61b8      	str	r0, [r7, #24]
        break;
 80039ae:	e00f      	b.n	80039d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b0:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <UART_SetConfig+0x268>)
 80039b2:	61bb      	str	r3, [r7, #24]
        break;
 80039b4:	e00c      	b.n	80039d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b6:	f7ff fb07 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 80039ba:	61b8      	str	r0, [r7, #24]
        break;
 80039bc:	e008      	b.n	80039d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c2:	61bb      	str	r3, [r7, #24]
        break;
 80039c4:	e004      	b.n	80039d0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	77bb      	strb	r3, [r7, #30]
        break;
 80039ce:	bf00      	nop
    }

    if (pclk != 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d018      	beq.n	8003a08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	085a      	lsrs	r2, r3, #1
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	441a      	add	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	d908      	bls.n	8003a04 <UART_SetConfig+0x238>
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d204      	bcs.n	8003a04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e001      	b.n	8003a08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a14:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	efff69f3 	.word	0xefff69f3
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	40004800 	.word	0x40004800
 8003a34:	007a1200 	.word	0x007a1200

08003a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d10a      	bne.n	8003b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fd fef8 	bl	8001980 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d10e      	bne.n	8003bbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f82d 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e023      	b.n	8003c06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d10e      	bne.n	8003bea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f817 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e00d      	b.n	8003c06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b09c      	sub	sp, #112	; 0x70
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1e:	e0a5      	b.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	f000 80a1 	beq.w	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fd fea9 	bl	8001980 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d13e      	bne.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c54:	667b      	str	r3, [r7, #100]	; 0x64
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e6      	bne.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e067      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d04f      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cda:	d147      	bne.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
 8003d06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	613b      	str	r3, [r7, #16]
   return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d38:	623a      	str	r2, [r7, #32]
 8003d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	69f9      	ldr	r1, [r7, #28]
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e010      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	f43f af4a 	beq.w	8003c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3770      	adds	r7, #112	; 0x70
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <gcvt>:
 8003d98:	b530      	push	{r4, r5, lr}
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4605      	mov	r5, r0
 8003da2:	2300      	movs	r3, #0
 8003da4:	ec51 0b10 	vmov	r0, r1, d0
 8003da8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003dac:	f7fc fe8e 	bl	8000acc <__aeabi_dcmplt>
 8003db0:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003db4:	4622      	mov	r2, r4
 8003db6:	b118      	cbz	r0, 8003dc0 <gcvt+0x28>
 8003db8:	232d      	movs	r3, #45	; 0x2d
 8003dba:	f802 3b01 	strb.w	r3, [r2], #1
 8003dbe:	3d01      	subs	r5, #1
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4806      	ldr	r0, [pc, #24]	; (8003ddc <gcvt+0x44>)
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	2367      	movs	r3, #103	; 0x67
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	f000 f8c0 	bl	8003f50 <_gcvt>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	4620      	movne	r0, r4
 8003dd6:	2000      	moveq	r0, #0
 8003dd8:	b005      	add	sp, #20
 8003dda:	bd30      	pop	{r4, r5, pc}
 8003ddc:	2000000c 	.word	0x2000000c

08003de0 <__errno>:
 8003de0:	4b01      	ldr	r3, [pc, #4]	; (8003de8 <__errno+0x8>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	2000000c 	.word	0x2000000c

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4d0d      	ldr	r5, [pc, #52]	; (8003e24 <__libc_init_array+0x38>)
 8003df0:	4c0d      	ldr	r4, [pc, #52]	; (8003e28 <__libc_init_array+0x3c>)
 8003df2:	1b64      	subs	r4, r4, r5
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	2600      	movs	r6, #0
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	4d0b      	ldr	r5, [pc, #44]	; (8003e2c <__libc_init_array+0x40>)
 8003dfe:	4c0c      	ldr	r4, [pc, #48]	; (8003e30 <__libc_init_array+0x44>)
 8003e00:	f002 fb62 	bl	80064c8 <_init>
 8003e04:	1b64      	subs	r4, r4, r5
 8003e06:	10a4      	asrs	r4, r4, #2
 8003e08:	2600      	movs	r6, #0
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	080067f4 	.word	0x080067f4
 8003e28:	080067f4 	.word	0x080067f4
 8003e2c:	080067f4 	.word	0x080067f4
 8003e30:	080067f8 	.word	0x080067f8

08003e34 <memset>:
 8003e34:	4402      	add	r2, r0
 8003e36:	4603      	mov	r3, r0
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <memset+0xa>
 8003e3c:	4770      	bx	lr
 8003e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e42:	e7f9      	b.n	8003e38 <memset+0x4>

08003e44 <strcat>:
 8003e44:	b510      	push	{r4, lr}
 8003e46:	4602      	mov	r2, r0
 8003e48:	7814      	ldrb	r4, [r2, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	3201      	adds	r2, #1
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d1fa      	bne.n	8003e48 <strcat+0x4>
 8003e52:	3b01      	subs	r3, #1
 8003e54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	d1f9      	bne.n	8003e54 <strcat+0x10>
 8003e60:	bd10      	pop	{r4, pc}

08003e62 <print_e>:
 8003e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e64:	b087      	sub	sp, #28
 8003e66:	ec43 2b10 	vmov	d0, r2, r3
 8003e6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003e6c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8003e70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003e72:	ab04      	add	r3, sp, #16
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	ab03      	add	r3, sp, #12
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	1c62      	adds	r2, r4, #1
 8003e7c:	ab05      	add	r3, sp, #20
 8003e7e:	460f      	mov	r7, r1
 8003e80:	2102      	movs	r1, #2
 8003e82:	f000 fded 	bl	8004a60 <_dtoa_r>
 8003e86:	9a05      	ldr	r2, [sp, #20]
 8003e88:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d105      	bne.n	8003e9c <print_e+0x3a>
 8003e90:	4601      	mov	r1, r0
 8003e92:	4638      	mov	r0, r7
 8003e94:	f000 fd32 	bl	80048fc <strcpy>
 8003e98:	b007      	add	sp, #28
 8003e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	7801      	ldrb	r1, [r0, #0]
 8003ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	bfc8      	it	gt
 8003ea8:	2501      	movgt	r5, #1
 8003eaa:	212e      	movs	r1, #46	; 0x2e
 8003eac:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8003eb0:	b10f      	cbz	r7, 8003eb6 <print_e+0x54>
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	dc37      	bgt.n	8003f26 <print_e+0xc4>
 8003eb6:	2e67      	cmp	r6, #103	; 0x67
 8003eb8:	d046      	beq.n	8003f48 <print_e+0xe6>
 8003eba:	2e47      	cmp	r6, #71	; 0x47
 8003ebc:	d046      	beq.n	8003f4c <print_e+0xea>
 8003ebe:	212e      	movs	r1, #46	; 0x2e
 8003ec0:	2030      	movs	r0, #48	; 0x30
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	dc38      	bgt.n	8003f38 <print_e+0xd6>
 8003ec6:	1e51      	subs	r1, r2, #1
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	bfb8      	it	lt
 8003ecc:	f1c2 0201 	rsblt	r2, r2, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	9105      	str	r1, [sp, #20]
 8003ed4:	bfbc      	itt	lt
 8003ed6:	212d      	movlt	r1, #45	; 0x2d
 8003ed8:	9205      	strlt	r2, [sp, #20]
 8003eda:	f800 6b02 	strb.w	r6, [r0], #2
 8003ede:	bfb8      	it	lt
 8003ee0:	7059      	strblt	r1, [r3, #1]
 8003ee2:	9905      	ldr	r1, [sp, #20]
 8003ee4:	bfa4      	itt	ge
 8003ee6:	222b      	movge	r2, #43	; 0x2b
 8003ee8:	705a      	strbge	r2, [r3, #1]
 8003eea:	2963      	cmp	r1, #99	; 0x63
 8003eec:	dd0b      	ble.n	8003f06 <print_e+0xa4>
 8003eee:	2264      	movs	r2, #100	; 0x64
 8003ef0:	fb91 f2f2 	sdiv	r2, r1, r2
 8003ef4:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8003ef8:	1cd8      	adds	r0, r3, #3
 8003efa:	709c      	strb	r4, [r3, #2]
 8003efc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003f00:	fb03 1202 	mla	r2, r3, r2, r1
 8003f04:	9205      	str	r2, [sp, #20]
 8003f06:	9a05      	ldr	r2, [sp, #20]
 8003f08:	230a      	movs	r3, #10
 8003f0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f12:	7001      	strb	r1, [r0, #0]
 8003f14:	f06f 0109 	mvn.w	r1, #9
 8003f18:	fb01 2303 	mla	r3, r1, r3, r2
 8003f1c:	3330      	adds	r3, #48	; 0x30
 8003f1e:	7043      	strb	r3, [r0, #1]
 8003f20:	2300      	movs	r3, #0
 8003f22:	7083      	strb	r3, [r0, #2]
 8003f24:	e7b8      	b.n	8003e98 <print_e+0x36>
 8003f26:	b10d      	cbz	r5, 8003f2c <print_e+0xca>
 8003f28:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2c:	7805      	ldrb	r5, [r0, #0]
 8003f2e:	f803 5b01 	strb.w	r5, [r3], #1
 8003f32:	3c01      	subs	r4, #1
 8003f34:	2500      	movs	r5, #0
 8003f36:	e7b9      	b.n	8003eac <print_e+0x4a>
 8003f38:	b10d      	cbz	r5, 8003f3e <print_e+0xdc>
 8003f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3e:	f803 0b01 	strb.w	r0, [r3], #1
 8003f42:	3c01      	subs	r4, #1
 8003f44:	2500      	movs	r5, #0
 8003f46:	e7bc      	b.n	8003ec2 <print_e+0x60>
 8003f48:	2665      	movs	r6, #101	; 0x65
 8003f4a:	e7bc      	b.n	8003ec6 <print_e+0x64>
 8003f4c:	2645      	movs	r6, #69	; 0x45
 8003f4e:	e7ba      	b.n	8003ec6 <print_e+0x64>

08003f50 <_gcvt>:
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	ec55 4b10 	vmov	r4, r5, d0
 8003f58:	b088      	sub	sp, #32
 8003f5a:	4681      	mov	r9, r0
 8003f5c:	4688      	mov	r8, r1
 8003f5e:	4616      	mov	r6, r2
 8003f60:	469a      	mov	sl, r3
 8003f62:	ee10 0a10 	vmov	r0, s0
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003f6e:	f7fc fdad 	bl	8000acc <__aeabi_dcmplt>
 8003f72:	b110      	cbz	r0, 8003f7a <_gcvt+0x2a>
 8003f74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003f78:	461d      	mov	r5, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc fd99 	bl	8000ab8 <__aeabi_dcmpeq>
 8003f86:	b138      	cbz	r0, 8003f98 <_gcvt+0x48>
 8003f88:	2330      	movs	r3, #48	; 0x30
 8003f8a:	7033      	strb	r3, [r6, #0]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	7073      	strb	r3, [r6, #1]
 8003f90:	4630      	mov	r0, r6
 8003f92:	b008      	add	sp, #32
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	a34b      	add	r3, pc, #300	; (adr r3, 80040c8 <_gcvt+0x178>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f7fc fd9d 	bl	8000ae0 <__aeabi_dcmple>
 8003fa6:	b158      	cbz	r0, 8003fc0 <_gcvt+0x70>
 8003fa8:	f108 31ff 	add.w	r1, r8, #4294967295
 8003fac:	9100      	str	r1, [sp, #0]
 8003fae:	e9cd a701 	strd	sl, r7, [sp, #4]
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4648      	mov	r0, r9
 8003fba:	f7ff ff52 	bl	8003e62 <print_e>
 8003fbe:	e7e7      	b.n	8003f90 <_gcvt+0x40>
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	f000 fc03 	bl	80047cc <_mprec_log10>
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	ec51 0b10 	vmov	r0, r1, d0
 8003fcc:	462b      	mov	r3, r5
 8003fce:	f7fc fd87 	bl	8000ae0 <__aeabi_dcmple>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1e8      	bne.n	8003fa8 <_gcvt+0x58>
 8003fd6:	ab07      	add	r3, sp, #28
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	ab06      	add	r3, sp, #24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4642      	mov	r2, r8
 8003fe0:	ab05      	add	r3, sp, #20
 8003fe2:	ec45 4b10 	vmov	d0, r4, r5
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4648      	mov	r0, r9
 8003fea:	f000 fd39 	bl	8004a60 <_dtoa_r>
 8003fee:	9a05      	ldr	r2, [sp, #20]
 8003ff0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d00e      	beq.n	8004016 <_gcvt+0xc6>
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	44b0      	add	r8, r6
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004002:	9905      	ldr	r1, [sp, #20]
 8004004:	eba8 0203 	sub.w	r2, r8, r3
 8004008:	b10d      	cbz	r5, 800400e <_gcvt+0xbe>
 800400a:	2900      	cmp	r1, #0
 800400c:	dc08      	bgt.n	8004020 <_gcvt+0xd0>
 800400e:	2000      	movs	r0, #0
 8004010:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004014:	e00d      	b.n	8004032 <_gcvt+0xe2>
 8004016:	4601      	mov	r1, r0
 8004018:	4630      	mov	r0, r6
 800401a:	f000 fc6f 	bl	80048fc <strcpy>
 800401e:	e7b7      	b.n	8003f90 <_gcvt+0x40>
 8004020:	3901      	subs	r1, #1
 8004022:	f803 5b01 	strb.w	r5, [r3], #1
 8004026:	9105      	str	r1, [sp, #20]
 8004028:	e7e8      	b.n	8003ffc <_gcvt+0xac>
 800402a:	f803 cb01 	strb.w	ip, [r3], #1
 800402e:	3a01      	subs	r2, #1
 8004030:	2001      	movs	r0, #1
 8004032:	2900      	cmp	r1, #0
 8004034:	460d      	mov	r5, r1
 8004036:	dc2a      	bgt.n	800408e <_gcvt+0x13e>
 8004038:	b100      	cbz	r0, 800403c <_gcvt+0xec>
 800403a:	9105      	str	r1, [sp, #20]
 800403c:	b90f      	cbnz	r7, 8004042 <_gcvt+0xf2>
 800403e:	7821      	ldrb	r1, [r4, #0]
 8004040:	b311      	cbz	r1, 8004088 <_gcvt+0x138>
 8004042:	42b3      	cmp	r3, r6
 8004044:	bf04      	itt	eq
 8004046:	2130      	moveq	r1, #48	; 0x30
 8004048:	f803 1b01 	strbeq.w	r1, [r3], #1
 800404c:	212e      	movs	r1, #46	; 0x2e
 800404e:	7019      	strb	r1, [r3, #0]
 8004050:	9905      	ldr	r1, [sp, #20]
 8004052:	4618      	mov	r0, r3
 8004054:	2500      	movs	r5, #0
 8004056:	eba1 0c03 	sub.w	ip, r1, r3
 800405a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800405e:	eb1c 0f00 	cmn.w	ip, r0
 8004062:	d41c      	bmi.n	800409e <_gcvt+0x14e>
 8004064:	2900      	cmp	r1, #0
 8004066:	f1c1 0000 	rsb	r0, r1, #0
 800406a:	bfc8      	it	gt
 800406c:	2000      	movgt	r0, #0
 800406e:	f100 0c01 	add.w	ip, r0, #1
 8004072:	4463      	add	r3, ip
 8004074:	4401      	add	r1, r0
 8004076:	b105      	cbz	r5, 800407a <_gcvt+0x12a>
 8004078:	9105      	str	r1, [sp, #20]
 800407a:	1e61      	subs	r1, r4, #1
 800407c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004080:	b108      	cbz	r0, 8004086 <_gcvt+0x136>
 8004082:	2a00      	cmp	r2, #0
 8004084:	dc0f      	bgt.n	80040a6 <_gcvt+0x156>
 8004086:	b9df      	cbnz	r7, 80040c0 <_gcvt+0x170>
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e780      	b.n	8003f90 <_gcvt+0x40>
 800408e:	2a00      	cmp	r2, #0
 8004090:	f101 31ff 	add.w	r1, r1, #4294967295
 8004094:	dcc9      	bgt.n	800402a <_gcvt+0xda>
 8004096:	2800      	cmp	r0, #0
 8004098:	d0d0      	beq.n	800403c <_gcvt+0xec>
 800409a:	9505      	str	r5, [sp, #20]
 800409c:	e7ce      	b.n	800403c <_gcvt+0xec>
 800409e:	f800 ef01 	strb.w	lr, [r0, #1]!
 80040a2:	2501      	movs	r5, #1
 80040a4:	e7db      	b.n	800405e <_gcvt+0x10e>
 80040a6:	f803 0b01 	strb.w	r0, [r3], #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	e7e6      	b.n	800407c <_gcvt+0x12c>
 80040ae:	f801 5b01 	strb.w	r5, [r1], #1
 80040b2:	1a60      	subs	r0, r4, r1
 80040b4:	2800      	cmp	r0, #0
 80040b6:	dcfa      	bgt.n	80040ae <_gcvt+0x15e>
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	bfa8      	it	ge
 80040bc:	189b      	addge	r3, r3, r2
 80040be:	e7e3      	b.n	8004088 <_gcvt+0x138>
 80040c0:	4619      	mov	r1, r3
 80040c2:	189c      	adds	r4, r3, r2
 80040c4:	2530      	movs	r5, #48	; 0x30
 80040c6:	e7f4      	b.n	80040b2 <_gcvt+0x162>
 80040c8:	eb1c432d 	.word	0xeb1c432d
 80040cc:	3f1a36e2 	.word	0x3f1a36e2

080040d0 <_Balloc>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040d4:	4604      	mov	r4, r0
 80040d6:	460d      	mov	r5, r1
 80040d8:	b976      	cbnz	r6, 80040f8 <_Balloc+0x28>
 80040da:	2010      	movs	r0, #16
 80040dc:	f001 fabe 	bl	800565c <malloc>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6260      	str	r0, [r4, #36]	; 0x24
 80040e4:	b920      	cbnz	r0, 80040f0 <_Balloc+0x20>
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <_Balloc+0x78>)
 80040e8:	4818      	ldr	r0, [pc, #96]	; (800414c <_Balloc+0x7c>)
 80040ea:	2166      	movs	r1, #102	; 0x66
 80040ec:	f000 fc0e 	bl	800490c <__assert_func>
 80040f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040f4:	6006      	str	r6, [r0, #0]
 80040f6:	60c6      	str	r6, [r0, #12]
 80040f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80040fa:	68f3      	ldr	r3, [r6, #12]
 80040fc:	b183      	cbz	r3, 8004120 <_Balloc+0x50>
 80040fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004106:	b9b8      	cbnz	r0, 8004138 <_Balloc+0x68>
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f605 	lsl.w	r6, r1, r5
 800410e:	1d72      	adds	r2, r6, #5
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	4620      	mov	r0, r4
 8004114:	f000 fb78 	bl	8004808 <_calloc_r>
 8004118:	b160      	cbz	r0, 8004134 <_Balloc+0x64>
 800411a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800411e:	e00e      	b.n	800413e <_Balloc+0x6e>
 8004120:	2221      	movs	r2, #33	; 0x21
 8004122:	2104      	movs	r1, #4
 8004124:	4620      	mov	r0, r4
 8004126:	f000 fb6f 	bl	8004808 <_calloc_r>
 800412a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412c:	60f0      	str	r0, [r6, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e4      	bne.n	80040fe <_Balloc+0x2e>
 8004134:	2000      	movs	r0, #0
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	6802      	ldr	r2, [r0, #0]
 800413a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800413e:	2300      	movs	r3, #0
 8004140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004144:	e7f7      	b.n	8004136 <_Balloc+0x66>
 8004146:	bf00      	nop
 8004148:	0800652c 	.word	0x0800652c
 800414c:	08006543 	.word	0x08006543

08004150 <_Bfree>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004154:	4605      	mov	r5, r0
 8004156:	460c      	mov	r4, r1
 8004158:	b976      	cbnz	r6, 8004178 <_Bfree+0x28>
 800415a:	2010      	movs	r0, #16
 800415c:	f001 fa7e 	bl	800565c <malloc>
 8004160:	4602      	mov	r2, r0
 8004162:	6268      	str	r0, [r5, #36]	; 0x24
 8004164:	b920      	cbnz	r0, 8004170 <_Bfree+0x20>
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <_Bfree+0x3c>)
 8004168:	4809      	ldr	r0, [pc, #36]	; (8004190 <_Bfree+0x40>)
 800416a:	218a      	movs	r1, #138	; 0x8a
 800416c:	f000 fbce 	bl	800490c <__assert_func>
 8004170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004174:	6006      	str	r6, [r0, #0]
 8004176:	60c6      	str	r6, [r0, #12]
 8004178:	b13c      	cbz	r4, 800418a <_Bfree+0x3a>
 800417a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004184:	6021      	str	r1, [r4, #0]
 8004186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	0800652c 	.word	0x0800652c
 8004190:	08006543 	.word	0x08006543

08004194 <__multadd>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	690e      	ldr	r6, [r1, #16]
 800419a:	4607      	mov	r7, r0
 800419c:	4698      	mov	r8, r3
 800419e:	460c      	mov	r4, r1
 80041a0:	f101 0014 	add.w	r0, r1, #20
 80041a4:	2300      	movs	r3, #0
 80041a6:	6805      	ldr	r5, [r0, #0]
 80041a8:	b2a9      	uxth	r1, r5
 80041aa:	fb02 8101 	mla	r1, r2, r1, r8
 80041ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80041b2:	0c2d      	lsrs	r5, r5, #16
 80041b4:	fb02 c505 	mla	r5, r2, r5, ip
 80041b8:	b289      	uxth	r1, r1
 80041ba:	3301      	adds	r3, #1
 80041bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80041c0:	429e      	cmp	r6, r3
 80041c2:	f840 1b04 	str.w	r1, [r0], #4
 80041c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80041ca:	dcec      	bgt.n	80041a6 <__multadd+0x12>
 80041cc:	f1b8 0f00 	cmp.w	r8, #0
 80041d0:	d022      	beq.n	8004218 <__multadd+0x84>
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	42b3      	cmp	r3, r6
 80041d6:	dc19      	bgt.n	800420c <__multadd+0x78>
 80041d8:	6861      	ldr	r1, [r4, #4]
 80041da:	4638      	mov	r0, r7
 80041dc:	3101      	adds	r1, #1
 80041de:	f7ff ff77 	bl	80040d0 <_Balloc>
 80041e2:	4605      	mov	r5, r0
 80041e4:	b928      	cbnz	r0, 80041f2 <__multadd+0x5e>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <__multadd+0x8c>)
 80041ea:	480e      	ldr	r0, [pc, #56]	; (8004224 <__multadd+0x90>)
 80041ec:	21b5      	movs	r1, #181	; 0xb5
 80041ee:	f000 fb8d 	bl	800490c <__assert_func>
 80041f2:	6922      	ldr	r2, [r4, #16]
 80041f4:	3202      	adds	r2, #2
 80041f6:	f104 010c 	add.w	r1, r4, #12
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	300c      	adds	r0, #12
 80041fe:	f001 fa35 	bl	800566c <memcpy>
 8004202:	4621      	mov	r1, r4
 8004204:	4638      	mov	r0, r7
 8004206:	f7ff ffa3 	bl	8004150 <_Bfree>
 800420a:	462c      	mov	r4, r5
 800420c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004210:	3601      	adds	r6, #1
 8004212:	f8c3 8014 	str.w	r8, [r3, #20]
 8004216:	6126      	str	r6, [r4, #16]
 8004218:	4620      	mov	r0, r4
 800421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800421e:	bf00      	nop
 8004220:	080065a3 	.word	0x080065a3
 8004224:	08006543 	.word	0x08006543

08004228 <__hi0bits>:
 8004228:	0c03      	lsrs	r3, r0, #16
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	b9d3      	cbnz	r3, 8004264 <__hi0bits+0x3c>
 800422e:	0400      	lsls	r0, r0, #16
 8004230:	2310      	movs	r3, #16
 8004232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004236:	bf04      	itt	eq
 8004238:	0200      	lsleq	r0, r0, #8
 800423a:	3308      	addeq	r3, #8
 800423c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004240:	bf04      	itt	eq
 8004242:	0100      	lsleq	r0, r0, #4
 8004244:	3304      	addeq	r3, #4
 8004246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800424a:	bf04      	itt	eq
 800424c:	0080      	lsleq	r0, r0, #2
 800424e:	3302      	addeq	r3, #2
 8004250:	2800      	cmp	r0, #0
 8004252:	db05      	blt.n	8004260 <__hi0bits+0x38>
 8004254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004258:	f103 0301 	add.w	r3, r3, #1
 800425c:	bf08      	it	eq
 800425e:	2320      	moveq	r3, #32
 8004260:	4618      	mov	r0, r3
 8004262:	4770      	bx	lr
 8004264:	2300      	movs	r3, #0
 8004266:	e7e4      	b.n	8004232 <__hi0bits+0xa>

08004268 <__lo0bits>:
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	f013 0207 	ands.w	r2, r3, #7
 800426e:	4601      	mov	r1, r0
 8004270:	d00b      	beq.n	800428a <__lo0bits+0x22>
 8004272:	07da      	lsls	r2, r3, #31
 8004274:	d424      	bmi.n	80042c0 <__lo0bits+0x58>
 8004276:	0798      	lsls	r0, r3, #30
 8004278:	bf49      	itett	mi
 800427a:	085b      	lsrmi	r3, r3, #1
 800427c:	089b      	lsrpl	r3, r3, #2
 800427e:	2001      	movmi	r0, #1
 8004280:	600b      	strmi	r3, [r1, #0]
 8004282:	bf5c      	itt	pl
 8004284:	600b      	strpl	r3, [r1, #0]
 8004286:	2002      	movpl	r0, #2
 8004288:	4770      	bx	lr
 800428a:	b298      	uxth	r0, r3
 800428c:	b9b0      	cbnz	r0, 80042bc <__lo0bits+0x54>
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	2010      	movs	r0, #16
 8004292:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004296:	bf04      	itt	eq
 8004298:	0a1b      	lsreq	r3, r3, #8
 800429a:	3008      	addeq	r0, #8
 800429c:	071a      	lsls	r2, r3, #28
 800429e:	bf04      	itt	eq
 80042a0:	091b      	lsreq	r3, r3, #4
 80042a2:	3004      	addeq	r0, #4
 80042a4:	079a      	lsls	r2, r3, #30
 80042a6:	bf04      	itt	eq
 80042a8:	089b      	lsreq	r3, r3, #2
 80042aa:	3002      	addeq	r0, #2
 80042ac:	07da      	lsls	r2, r3, #31
 80042ae:	d403      	bmi.n	80042b8 <__lo0bits+0x50>
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	f100 0001 	add.w	r0, r0, #1
 80042b6:	d005      	beq.n	80042c4 <__lo0bits+0x5c>
 80042b8:	600b      	str	r3, [r1, #0]
 80042ba:	4770      	bx	lr
 80042bc:	4610      	mov	r0, r2
 80042be:	e7e8      	b.n	8004292 <__lo0bits+0x2a>
 80042c0:	2000      	movs	r0, #0
 80042c2:	4770      	bx	lr
 80042c4:	2020      	movs	r0, #32
 80042c6:	4770      	bx	lr

080042c8 <__i2b>:
 80042c8:	b510      	push	{r4, lr}
 80042ca:	460c      	mov	r4, r1
 80042cc:	2101      	movs	r1, #1
 80042ce:	f7ff feff 	bl	80040d0 <_Balloc>
 80042d2:	4602      	mov	r2, r0
 80042d4:	b928      	cbnz	r0, 80042e2 <__i2b+0x1a>
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <__i2b+0x24>)
 80042d8:	4805      	ldr	r0, [pc, #20]	; (80042f0 <__i2b+0x28>)
 80042da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80042de:	f000 fb15 	bl	800490c <__assert_func>
 80042e2:	2301      	movs	r3, #1
 80042e4:	6144      	str	r4, [r0, #20]
 80042e6:	6103      	str	r3, [r0, #16]
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	bf00      	nop
 80042ec:	080065a3 	.word	0x080065a3
 80042f0:	08006543 	.word	0x08006543

080042f4 <__multiply>:
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	4614      	mov	r4, r2
 80042fa:	690a      	ldr	r2, [r1, #16]
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bfb8      	it	lt
 8004302:	460b      	movlt	r3, r1
 8004304:	460d      	mov	r5, r1
 8004306:	bfbc      	itt	lt
 8004308:	4625      	movlt	r5, r4
 800430a:	461c      	movlt	r4, r3
 800430c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004310:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004314:	68ab      	ldr	r3, [r5, #8]
 8004316:	6869      	ldr	r1, [r5, #4]
 8004318:	eb0a 0709 	add.w	r7, sl, r9
 800431c:	42bb      	cmp	r3, r7
 800431e:	b085      	sub	sp, #20
 8004320:	bfb8      	it	lt
 8004322:	3101      	addlt	r1, #1
 8004324:	f7ff fed4 	bl	80040d0 <_Balloc>
 8004328:	b930      	cbnz	r0, 8004338 <__multiply+0x44>
 800432a:	4602      	mov	r2, r0
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <__multiply+0x144>)
 800432e:	4843      	ldr	r0, [pc, #268]	; (800443c <__multiply+0x148>)
 8004330:	f240 115d 	movw	r1, #349	; 0x15d
 8004334:	f000 faea 	bl	800490c <__assert_func>
 8004338:	f100 0614 	add.w	r6, r0, #20
 800433c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004340:	4633      	mov	r3, r6
 8004342:	2200      	movs	r2, #0
 8004344:	4543      	cmp	r3, r8
 8004346:	d31e      	bcc.n	8004386 <__multiply+0x92>
 8004348:	f105 0c14 	add.w	ip, r5, #20
 800434c:	f104 0314 	add.w	r3, r4, #20
 8004350:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004354:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004358:	9202      	str	r2, [sp, #8]
 800435a:	ebac 0205 	sub.w	r2, ip, r5
 800435e:	3a15      	subs	r2, #21
 8004360:	f022 0203 	bic.w	r2, r2, #3
 8004364:	3204      	adds	r2, #4
 8004366:	f105 0115 	add.w	r1, r5, #21
 800436a:	458c      	cmp	ip, r1
 800436c:	bf38      	it	cc
 800436e:	2204      	movcc	r2, #4
 8004370:	9201      	str	r2, [sp, #4]
 8004372:	9a02      	ldr	r2, [sp, #8]
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	d808      	bhi.n	800438c <__multiply+0x98>
 800437a:	2f00      	cmp	r7, #0
 800437c:	dc55      	bgt.n	800442a <__multiply+0x136>
 800437e:	6107      	str	r7, [r0, #16]
 8004380:	b005      	add	sp, #20
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	f843 2b04 	str.w	r2, [r3], #4
 800438a:	e7db      	b.n	8004344 <__multiply+0x50>
 800438c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004390:	f1ba 0f00 	cmp.w	sl, #0
 8004394:	d020      	beq.n	80043d8 <__multiply+0xe4>
 8004396:	f105 0e14 	add.w	lr, r5, #20
 800439a:	46b1      	mov	r9, r6
 800439c:	2200      	movs	r2, #0
 800439e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80043a2:	f8d9 b000 	ldr.w	fp, [r9]
 80043a6:	b2a1      	uxth	r1, r4
 80043a8:	fa1f fb8b 	uxth.w	fp, fp
 80043ac:	fb0a b101 	mla	r1, sl, r1, fp
 80043b0:	4411      	add	r1, r2
 80043b2:	f8d9 2000 	ldr.w	r2, [r9]
 80043b6:	0c24      	lsrs	r4, r4, #16
 80043b8:	0c12      	lsrs	r2, r2, #16
 80043ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80043be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80043c2:	b289      	uxth	r1, r1
 80043c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80043c8:	45f4      	cmp	ip, lr
 80043ca:	f849 1b04 	str.w	r1, [r9], #4
 80043ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80043d2:	d8e4      	bhi.n	800439e <__multiply+0xaa>
 80043d4:	9901      	ldr	r1, [sp, #4]
 80043d6:	5072      	str	r2, [r6, r1]
 80043d8:	9a03      	ldr	r2, [sp, #12]
 80043da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80043de:	3304      	adds	r3, #4
 80043e0:	f1b9 0f00 	cmp.w	r9, #0
 80043e4:	d01f      	beq.n	8004426 <__multiply+0x132>
 80043e6:	6834      	ldr	r4, [r6, #0]
 80043e8:	f105 0114 	add.w	r1, r5, #20
 80043ec:	46b6      	mov	lr, r6
 80043ee:	f04f 0a00 	mov.w	sl, #0
 80043f2:	880a      	ldrh	r2, [r1, #0]
 80043f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80043f8:	fb09 b202 	mla	r2, r9, r2, fp
 80043fc:	4492      	add	sl, r2
 80043fe:	b2a4      	uxth	r4, r4
 8004400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004404:	f84e 4b04 	str.w	r4, [lr], #4
 8004408:	f851 4b04 	ldr.w	r4, [r1], #4
 800440c:	f8be 2000 	ldrh.w	r2, [lr]
 8004410:	0c24      	lsrs	r4, r4, #16
 8004412:	fb09 2404 	mla	r4, r9, r4, r2
 8004416:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800441a:	458c      	cmp	ip, r1
 800441c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004420:	d8e7      	bhi.n	80043f2 <__multiply+0xfe>
 8004422:	9a01      	ldr	r2, [sp, #4]
 8004424:	50b4      	str	r4, [r6, r2]
 8004426:	3604      	adds	r6, #4
 8004428:	e7a3      	b.n	8004372 <__multiply+0x7e>
 800442a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1a5      	bne.n	800437e <__multiply+0x8a>
 8004432:	3f01      	subs	r7, #1
 8004434:	e7a1      	b.n	800437a <__multiply+0x86>
 8004436:	bf00      	nop
 8004438:	080065a3 	.word	0x080065a3
 800443c:	08006543 	.word	0x08006543

08004440 <__pow5mult>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	4615      	mov	r5, r2
 8004446:	f012 0203 	ands.w	r2, r2, #3
 800444a:	4606      	mov	r6, r0
 800444c:	460f      	mov	r7, r1
 800444e:	d007      	beq.n	8004460 <__pow5mult+0x20>
 8004450:	4c25      	ldr	r4, [pc, #148]	; (80044e8 <__pow5mult+0xa8>)
 8004452:	3a01      	subs	r2, #1
 8004454:	2300      	movs	r3, #0
 8004456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800445a:	f7ff fe9b 	bl	8004194 <__multadd>
 800445e:	4607      	mov	r7, r0
 8004460:	10ad      	asrs	r5, r5, #2
 8004462:	d03d      	beq.n	80044e0 <__pow5mult+0xa0>
 8004464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004466:	b97c      	cbnz	r4, 8004488 <__pow5mult+0x48>
 8004468:	2010      	movs	r0, #16
 800446a:	f001 f8f7 	bl	800565c <malloc>
 800446e:	4602      	mov	r2, r0
 8004470:	6270      	str	r0, [r6, #36]	; 0x24
 8004472:	b928      	cbnz	r0, 8004480 <__pow5mult+0x40>
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <__pow5mult+0xac>)
 8004476:	481e      	ldr	r0, [pc, #120]	; (80044f0 <__pow5mult+0xb0>)
 8004478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800447c:	f000 fa46 	bl	800490c <__assert_func>
 8004480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004484:	6004      	str	r4, [r0, #0]
 8004486:	60c4      	str	r4, [r0, #12]
 8004488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800448c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004490:	b94c      	cbnz	r4, 80044a6 <__pow5mult+0x66>
 8004492:	f240 2171 	movw	r1, #625	; 0x271
 8004496:	4630      	mov	r0, r6
 8004498:	f7ff ff16 	bl	80042c8 <__i2b>
 800449c:	2300      	movs	r3, #0
 800449e:	f8c8 0008 	str.w	r0, [r8, #8]
 80044a2:	4604      	mov	r4, r0
 80044a4:	6003      	str	r3, [r0, #0]
 80044a6:	f04f 0900 	mov.w	r9, #0
 80044aa:	07eb      	lsls	r3, r5, #31
 80044ac:	d50a      	bpl.n	80044c4 <__pow5mult+0x84>
 80044ae:	4639      	mov	r1, r7
 80044b0:	4622      	mov	r2, r4
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ff1e 	bl	80042f4 <__multiply>
 80044b8:	4639      	mov	r1, r7
 80044ba:	4680      	mov	r8, r0
 80044bc:	4630      	mov	r0, r6
 80044be:	f7ff fe47 	bl	8004150 <_Bfree>
 80044c2:	4647      	mov	r7, r8
 80044c4:	106d      	asrs	r5, r5, #1
 80044c6:	d00b      	beq.n	80044e0 <__pow5mult+0xa0>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	b938      	cbnz	r0, 80044dc <__pow5mult+0x9c>
 80044cc:	4622      	mov	r2, r4
 80044ce:	4621      	mov	r1, r4
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7ff ff0f 	bl	80042f4 <__multiply>
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	f8c0 9000 	str.w	r9, [r0]
 80044dc:	4604      	mov	r4, r0
 80044de:	e7e4      	b.n	80044aa <__pow5mult+0x6a>
 80044e0:	4638      	mov	r0, r7
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e6:	bf00      	nop
 80044e8:	080066a8 	.word	0x080066a8
 80044ec:	0800652c 	.word	0x0800652c
 80044f0:	08006543 	.word	0x08006543

080044f4 <__lshift>:
 80044f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	6849      	ldr	r1, [r1, #4]
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004502:	68a3      	ldr	r3, [r4, #8]
 8004504:	4607      	mov	r7, r0
 8004506:	4691      	mov	r9, r2
 8004508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800450c:	f108 0601 	add.w	r6, r8, #1
 8004510:	42b3      	cmp	r3, r6
 8004512:	db0b      	blt.n	800452c <__lshift+0x38>
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff fddb 	bl	80040d0 <_Balloc>
 800451a:	4605      	mov	r5, r0
 800451c:	b948      	cbnz	r0, 8004532 <__lshift+0x3e>
 800451e:	4602      	mov	r2, r0
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <__lshift+0xd0>)
 8004522:	4829      	ldr	r0, [pc, #164]	; (80045c8 <__lshift+0xd4>)
 8004524:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004528:	f000 f9f0 	bl	800490c <__assert_func>
 800452c:	3101      	adds	r1, #1
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	e7ee      	b.n	8004510 <__lshift+0x1c>
 8004532:	2300      	movs	r3, #0
 8004534:	f100 0114 	add.w	r1, r0, #20
 8004538:	f100 0210 	add.w	r2, r0, #16
 800453c:	4618      	mov	r0, r3
 800453e:	4553      	cmp	r3, sl
 8004540:	db33      	blt.n	80045aa <__lshift+0xb6>
 8004542:	6920      	ldr	r0, [r4, #16]
 8004544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004548:	f104 0314 	add.w	r3, r4, #20
 800454c:	f019 091f 	ands.w	r9, r9, #31
 8004550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004558:	d02b      	beq.n	80045b2 <__lshift+0xbe>
 800455a:	f1c9 0e20 	rsb	lr, r9, #32
 800455e:	468a      	mov	sl, r1
 8004560:	2200      	movs	r2, #0
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	fa00 f009 	lsl.w	r0, r0, r9
 8004568:	4302      	orrs	r2, r0
 800456a:	f84a 2b04 	str.w	r2, [sl], #4
 800456e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004572:	459c      	cmp	ip, r3
 8004574:	fa22 f20e 	lsr.w	r2, r2, lr
 8004578:	d8f3      	bhi.n	8004562 <__lshift+0x6e>
 800457a:	ebac 0304 	sub.w	r3, ip, r4
 800457e:	3b15      	subs	r3, #21
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	3304      	adds	r3, #4
 8004586:	f104 0015 	add.w	r0, r4, #21
 800458a:	4584      	cmp	ip, r0
 800458c:	bf38      	it	cc
 800458e:	2304      	movcc	r3, #4
 8004590:	50ca      	str	r2, [r1, r3]
 8004592:	b10a      	cbz	r2, 8004598 <__lshift+0xa4>
 8004594:	f108 0602 	add.w	r6, r8, #2
 8004598:	3e01      	subs	r6, #1
 800459a:	4638      	mov	r0, r7
 800459c:	612e      	str	r6, [r5, #16]
 800459e:	4621      	mov	r1, r4
 80045a0:	f7ff fdd6 	bl	8004150 <_Bfree>
 80045a4:	4628      	mov	r0, r5
 80045a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80045ae:	3301      	adds	r3, #1
 80045b0:	e7c5      	b.n	800453e <__lshift+0x4a>
 80045b2:	3904      	subs	r1, #4
 80045b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80045bc:	459c      	cmp	ip, r3
 80045be:	d8f9      	bhi.n	80045b4 <__lshift+0xc0>
 80045c0:	e7ea      	b.n	8004598 <__lshift+0xa4>
 80045c2:	bf00      	nop
 80045c4:	080065a3 	.word	0x080065a3
 80045c8:	08006543 	.word	0x08006543

080045cc <__mcmp>:
 80045cc:	b530      	push	{r4, r5, lr}
 80045ce:	6902      	ldr	r2, [r0, #16]
 80045d0:	690c      	ldr	r4, [r1, #16]
 80045d2:	1b12      	subs	r2, r2, r4
 80045d4:	d10e      	bne.n	80045f4 <__mcmp+0x28>
 80045d6:	f100 0314 	add.w	r3, r0, #20
 80045da:	3114      	adds	r1, #20
 80045dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80045e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80045e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80045e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80045ec:	42a5      	cmp	r5, r4
 80045ee:	d003      	beq.n	80045f8 <__mcmp+0x2c>
 80045f0:	d305      	bcc.n	80045fe <__mcmp+0x32>
 80045f2:	2201      	movs	r2, #1
 80045f4:	4610      	mov	r0, r2
 80045f6:	bd30      	pop	{r4, r5, pc}
 80045f8:	4283      	cmp	r3, r0
 80045fa:	d3f3      	bcc.n	80045e4 <__mcmp+0x18>
 80045fc:	e7fa      	b.n	80045f4 <__mcmp+0x28>
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	e7f7      	b.n	80045f4 <__mcmp+0x28>

08004604 <__mdiff>:
 8004604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	460c      	mov	r4, r1
 800460a:	4606      	mov	r6, r0
 800460c:	4611      	mov	r1, r2
 800460e:	4620      	mov	r0, r4
 8004610:	4617      	mov	r7, r2
 8004612:	f7ff ffdb 	bl	80045cc <__mcmp>
 8004616:	1e05      	subs	r5, r0, #0
 8004618:	d110      	bne.n	800463c <__mdiff+0x38>
 800461a:	4629      	mov	r1, r5
 800461c:	4630      	mov	r0, r6
 800461e:	f7ff fd57 	bl	80040d0 <_Balloc>
 8004622:	b930      	cbnz	r0, 8004632 <__mdiff+0x2e>
 8004624:	4b39      	ldr	r3, [pc, #228]	; (800470c <__mdiff+0x108>)
 8004626:	4602      	mov	r2, r0
 8004628:	f240 2132 	movw	r1, #562	; 0x232
 800462c:	4838      	ldr	r0, [pc, #224]	; (8004710 <__mdiff+0x10c>)
 800462e:	f000 f96d 	bl	800490c <__assert_func>
 8004632:	2301      	movs	r3, #1
 8004634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463c:	bfa4      	itt	ge
 800463e:	463b      	movge	r3, r7
 8004640:	4627      	movge	r7, r4
 8004642:	4630      	mov	r0, r6
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	bfa6      	itte	ge
 8004648:	461c      	movge	r4, r3
 800464a:	2500      	movge	r5, #0
 800464c:	2501      	movlt	r5, #1
 800464e:	f7ff fd3f 	bl	80040d0 <_Balloc>
 8004652:	b920      	cbnz	r0, 800465e <__mdiff+0x5a>
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <__mdiff+0x108>)
 8004656:	4602      	mov	r2, r0
 8004658:	f44f 7110 	mov.w	r1, #576	; 0x240
 800465c:	e7e6      	b.n	800462c <__mdiff+0x28>
 800465e:	693e      	ldr	r6, [r7, #16]
 8004660:	60c5      	str	r5, [r0, #12]
 8004662:	6925      	ldr	r5, [r4, #16]
 8004664:	f107 0114 	add.w	r1, r7, #20
 8004668:	f104 0914 	add.w	r9, r4, #20
 800466c:	f100 0e14 	add.w	lr, r0, #20
 8004670:	f107 0210 	add.w	r2, r7, #16
 8004674:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004678:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800467c:	46f2      	mov	sl, lr
 800467e:	2700      	movs	r7, #0
 8004680:	f859 3b04 	ldr.w	r3, [r9], #4
 8004684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004688:	fa1f f883 	uxth.w	r8, r3
 800468c:	fa17 f78b 	uxtah	r7, r7, fp
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	eba7 0808 	sub.w	r8, r7, r8
 8004696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800469a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800469e:	fa1f f888 	uxth.w	r8, r8
 80046a2:	141f      	asrs	r7, r3, #16
 80046a4:	454d      	cmp	r5, r9
 80046a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80046aa:	f84a 3b04 	str.w	r3, [sl], #4
 80046ae:	d8e7      	bhi.n	8004680 <__mdiff+0x7c>
 80046b0:	1b2b      	subs	r3, r5, r4
 80046b2:	3b15      	subs	r3, #21
 80046b4:	f023 0303 	bic.w	r3, r3, #3
 80046b8:	3304      	adds	r3, #4
 80046ba:	3415      	adds	r4, #21
 80046bc:	42a5      	cmp	r5, r4
 80046be:	bf38      	it	cc
 80046c0:	2304      	movcc	r3, #4
 80046c2:	4419      	add	r1, r3
 80046c4:	4473      	add	r3, lr
 80046c6:	469e      	mov	lr, r3
 80046c8:	460d      	mov	r5, r1
 80046ca:	4565      	cmp	r5, ip
 80046cc:	d30e      	bcc.n	80046ec <__mdiff+0xe8>
 80046ce:	f10c 0203 	add.w	r2, ip, #3
 80046d2:	1a52      	subs	r2, r2, r1
 80046d4:	f022 0203 	bic.w	r2, r2, #3
 80046d8:	3903      	subs	r1, #3
 80046da:	458c      	cmp	ip, r1
 80046dc:	bf38      	it	cc
 80046de:	2200      	movcc	r2, #0
 80046e0:	441a      	add	r2, r3
 80046e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80046e6:	b17b      	cbz	r3, 8004708 <__mdiff+0x104>
 80046e8:	6106      	str	r6, [r0, #16]
 80046ea:	e7a5      	b.n	8004638 <__mdiff+0x34>
 80046ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80046f0:	fa17 f488 	uxtah	r4, r7, r8
 80046f4:	1422      	asrs	r2, r4, #16
 80046f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80046fa:	b2a4      	uxth	r4, r4
 80046fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004700:	f84e 4b04 	str.w	r4, [lr], #4
 8004704:	1417      	asrs	r7, r2, #16
 8004706:	e7e0      	b.n	80046ca <__mdiff+0xc6>
 8004708:	3e01      	subs	r6, #1
 800470a:	e7ea      	b.n	80046e2 <__mdiff+0xde>
 800470c:	080065a3 	.word	0x080065a3
 8004710:	08006543 	.word	0x08006543

08004714 <__d2b>:
 8004714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004718:	4689      	mov	r9, r1
 800471a:	2101      	movs	r1, #1
 800471c:	ec57 6b10 	vmov	r6, r7, d0
 8004720:	4690      	mov	r8, r2
 8004722:	f7ff fcd5 	bl	80040d0 <_Balloc>
 8004726:	4604      	mov	r4, r0
 8004728:	b930      	cbnz	r0, 8004738 <__d2b+0x24>
 800472a:	4602      	mov	r2, r0
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <__d2b+0xb0>)
 800472e:	4826      	ldr	r0, [pc, #152]	; (80047c8 <__d2b+0xb4>)
 8004730:	f240 310a 	movw	r1, #778	; 0x30a
 8004734:	f000 f8ea 	bl	800490c <__assert_func>
 8004738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800473c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004740:	bb35      	cbnz	r5, 8004790 <__d2b+0x7c>
 8004742:	2e00      	cmp	r6, #0
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	d028      	beq.n	800479a <__d2b+0x86>
 8004748:	4668      	mov	r0, sp
 800474a:	9600      	str	r6, [sp, #0]
 800474c:	f7ff fd8c 	bl	8004268 <__lo0bits>
 8004750:	9900      	ldr	r1, [sp, #0]
 8004752:	b300      	cbz	r0, 8004796 <__d2b+0x82>
 8004754:	9a01      	ldr	r2, [sp, #4]
 8004756:	f1c0 0320 	rsb	r3, r0, #32
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	430b      	orrs	r3, r1
 8004760:	40c2      	lsrs	r2, r0
 8004762:	6163      	str	r3, [r4, #20]
 8004764:	9201      	str	r2, [sp, #4]
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	61a3      	str	r3, [r4, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2202      	movne	r2, #2
 8004770:	2201      	moveq	r2, #1
 8004772:	6122      	str	r2, [r4, #16]
 8004774:	b1d5      	cbz	r5, 80047ac <__d2b+0x98>
 8004776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800477a:	4405      	add	r5, r0
 800477c:	f8c9 5000 	str.w	r5, [r9]
 8004780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004784:	f8c8 0000 	str.w	r0, [r8]
 8004788:	4620      	mov	r0, r4
 800478a:	b003      	add	sp, #12
 800478c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004794:	e7d5      	b.n	8004742 <__d2b+0x2e>
 8004796:	6161      	str	r1, [r4, #20]
 8004798:	e7e5      	b.n	8004766 <__d2b+0x52>
 800479a:	a801      	add	r0, sp, #4
 800479c:	f7ff fd64 	bl	8004268 <__lo0bits>
 80047a0:	9b01      	ldr	r3, [sp, #4]
 80047a2:	6163      	str	r3, [r4, #20]
 80047a4:	2201      	movs	r2, #1
 80047a6:	6122      	str	r2, [r4, #16]
 80047a8:	3020      	adds	r0, #32
 80047aa:	e7e3      	b.n	8004774 <__d2b+0x60>
 80047ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80047b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047b4:	f8c9 0000 	str.w	r0, [r9]
 80047b8:	6918      	ldr	r0, [r3, #16]
 80047ba:	f7ff fd35 	bl	8004228 <__hi0bits>
 80047be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80047c2:	e7df      	b.n	8004784 <__d2b+0x70>
 80047c4:	080065a3 	.word	0x080065a3
 80047c8:	08006543 	.word	0x08006543

080047cc <_mprec_log10>:
 80047cc:	2817      	cmp	r0, #23
 80047ce:	b5d0      	push	{r4, r6, r7, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	dc07      	bgt.n	80047e4 <_mprec_log10+0x18>
 80047d4:	4809      	ldr	r0, [pc, #36]	; (80047fc <_mprec_log10+0x30>)
 80047d6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80047da:	e9d4 0100 	ldrd	r0, r1, [r4]
 80047de:	ec41 0b10 	vmov	d0, r0, r1
 80047e2:	bdd0      	pop	{r4, r6, r7, pc}
 80047e4:	4906      	ldr	r1, [pc, #24]	; (8004800 <_mprec_log10+0x34>)
 80047e6:	4f07      	ldr	r7, [pc, #28]	; (8004804 <_mprec_log10+0x38>)
 80047e8:	2000      	movs	r0, #0
 80047ea:	2600      	movs	r6, #0
 80047ec:	4632      	mov	r2, r6
 80047ee:	463b      	mov	r3, r7
 80047f0:	f7fb fefa 	bl	80005e8 <__aeabi_dmul>
 80047f4:	3c01      	subs	r4, #1
 80047f6:	d1f9      	bne.n	80047ec <_mprec_log10+0x20>
 80047f8:	e7f1      	b.n	80047de <_mprec_log10+0x12>
 80047fa:	bf00      	nop
 80047fc:	080065e0 	.word	0x080065e0
 8004800:	3ff00000 	.word	0x3ff00000
 8004804:	40240000 	.word	0x40240000

08004808 <_calloc_r>:
 8004808:	b513      	push	{r0, r1, r4, lr}
 800480a:	434a      	muls	r2, r1
 800480c:	4611      	mov	r1, r2
 800480e:	9201      	str	r2, [sp, #4]
 8004810:	f000 f80a 	bl	8004828 <_malloc_r>
 8004814:	4604      	mov	r4, r0
 8004816:	b118      	cbz	r0, 8004820 <_calloc_r+0x18>
 8004818:	9a01      	ldr	r2, [sp, #4]
 800481a:	2100      	movs	r1, #0
 800481c:	f7ff fb0a 	bl	8003e34 <memset>
 8004820:	4620      	mov	r0, r4
 8004822:	b002      	add	sp, #8
 8004824:	bd10      	pop	{r4, pc}
	...

08004828 <_malloc_r>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	1ccd      	adds	r5, r1, #3
 800482c:	f025 0503 	bic.w	r5, r5, #3
 8004830:	3508      	adds	r5, #8
 8004832:	2d0c      	cmp	r5, #12
 8004834:	bf38      	it	cc
 8004836:	250c      	movcc	r5, #12
 8004838:	2d00      	cmp	r5, #0
 800483a:	4606      	mov	r6, r0
 800483c:	db01      	blt.n	8004842 <_malloc_r+0x1a>
 800483e:	42a9      	cmp	r1, r5
 8004840:	d903      	bls.n	800484a <_malloc_r+0x22>
 8004842:	230c      	movs	r3, #12
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	2000      	movs	r0, #0
 8004848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484a:	f000 ff1d 	bl	8005688 <__malloc_lock>
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <_malloc_r+0xac>)
 8004850:	680a      	ldr	r2, [r1, #0]
 8004852:	4614      	mov	r4, r2
 8004854:	b99c      	cbnz	r4, 800487e <_malloc_r+0x56>
 8004856:	4f20      	ldr	r7, [pc, #128]	; (80048d8 <_malloc_r+0xb0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b923      	cbnz	r3, 8004866 <_malloc_r+0x3e>
 800485c:	4621      	mov	r1, r4
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f83c 	bl	80048dc <_sbrk_r>
 8004864:	6038      	str	r0, [r7, #0]
 8004866:	4629      	mov	r1, r5
 8004868:	4630      	mov	r0, r6
 800486a:	f000 f837 	bl	80048dc <_sbrk_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	d123      	bne.n	80048ba <_malloc_r+0x92>
 8004872:	230c      	movs	r3, #12
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	4630      	mov	r0, r6
 8004878:	f000 ff0c 	bl	8005694 <__malloc_unlock>
 800487c:	e7e3      	b.n	8004846 <_malloc_r+0x1e>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	1b5b      	subs	r3, r3, r5
 8004882:	d417      	bmi.n	80048b4 <_malloc_r+0x8c>
 8004884:	2b0b      	cmp	r3, #11
 8004886:	d903      	bls.n	8004890 <_malloc_r+0x68>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	441c      	add	r4, r3
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	e004      	b.n	800489a <_malloc_r+0x72>
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	42a2      	cmp	r2, r4
 8004894:	bf0c      	ite	eq
 8004896:	600b      	streq	r3, [r1, #0]
 8004898:	6053      	strne	r3, [r2, #4]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 fefa 	bl	8005694 <__malloc_unlock>
 80048a0:	f104 000b 	add.w	r0, r4, #11
 80048a4:	1d23      	adds	r3, r4, #4
 80048a6:	f020 0007 	bic.w	r0, r0, #7
 80048aa:	1ac2      	subs	r2, r0, r3
 80048ac:	d0cc      	beq.n	8004848 <_malloc_r+0x20>
 80048ae:	1a1b      	subs	r3, r3, r0
 80048b0:	50a3      	str	r3, [r4, r2]
 80048b2:	e7c9      	b.n	8004848 <_malloc_r+0x20>
 80048b4:	4622      	mov	r2, r4
 80048b6:	6864      	ldr	r4, [r4, #4]
 80048b8:	e7cc      	b.n	8004854 <_malloc_r+0x2c>
 80048ba:	1cc4      	adds	r4, r0, #3
 80048bc:	f024 0403 	bic.w	r4, r4, #3
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d0e3      	beq.n	800488c <_malloc_r+0x64>
 80048c4:	1a21      	subs	r1, r4, r0
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 f808 	bl	80048dc <_sbrk_r>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d1dd      	bne.n	800488c <_malloc_r+0x64>
 80048d0:	e7cf      	b.n	8004872 <_malloc_r+0x4a>
 80048d2:	bf00      	nop
 80048d4:	20000090 	.word	0x20000090
 80048d8:	20000094 	.word	0x20000094

080048dc <_sbrk_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d06      	ldr	r5, [pc, #24]	; (80048f8 <_sbrk_r+0x1c>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fc fd24 	bl	8001334 <_sbrk>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_sbrk_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_sbrk_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	200001f0 	.word	0x200001f0

080048fc <strcpy>:
 80048fc:	4603      	mov	r3, r0
 80048fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004902:	f803 2b01 	strb.w	r2, [r3], #1
 8004906:	2a00      	cmp	r2, #0
 8004908:	d1f9      	bne.n	80048fe <strcpy+0x2>
 800490a:	4770      	bx	lr

0800490c <__assert_func>:
 800490c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800490e:	4614      	mov	r4, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <__assert_func+0x2c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4605      	mov	r5, r0
 8004918:	68d8      	ldr	r0, [r3, #12]
 800491a:	b14c      	cbz	r4, 8004930 <__assert_func+0x24>
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <__assert_func+0x30>)
 800491e:	9100      	str	r1, [sp, #0]
 8004920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004924:	4906      	ldr	r1, [pc, #24]	; (8004940 <__assert_func+0x34>)
 8004926:	462b      	mov	r3, r5
 8004928:	f000 fe86 	bl	8005638 <fiprintf>
 800492c:	f001 fab6 	bl	8005e9c <abort>
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <__assert_func+0x38>)
 8004932:	461c      	mov	r4, r3
 8004934:	e7f3      	b.n	800491e <__assert_func+0x12>
 8004936:	bf00      	nop
 8004938:	2000000c 	.word	0x2000000c
 800493c:	080066b4 	.word	0x080066b4
 8004940:	080066c1 	.word	0x080066c1
 8004944:	080066ef 	.word	0x080066ef

08004948 <quorem>:
 8004948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	6903      	ldr	r3, [r0, #16]
 800494e:	690c      	ldr	r4, [r1, #16]
 8004950:	42a3      	cmp	r3, r4
 8004952:	4607      	mov	r7, r0
 8004954:	f2c0 8081 	blt.w	8004a5a <quorem+0x112>
 8004958:	3c01      	subs	r4, #1
 800495a:	f101 0814 	add.w	r8, r1, #20
 800495e:	f100 0514 	add.w	r5, r0, #20
 8004962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800496c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004970:	3301      	adds	r3, #1
 8004972:	429a      	cmp	r2, r3
 8004974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800497c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004980:	d331      	bcc.n	80049e6 <quorem+0x9e>
 8004982:	f04f 0e00 	mov.w	lr, #0
 8004986:	4640      	mov	r0, r8
 8004988:	46ac      	mov	ip, r5
 800498a:	46f2      	mov	sl, lr
 800498c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004990:	b293      	uxth	r3, r2
 8004992:	fb06 e303 	mla	r3, r6, r3, lr
 8004996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800499a:	b29b      	uxth	r3, r3
 800499c:	ebaa 0303 	sub.w	r3, sl, r3
 80049a0:	0c12      	lsrs	r2, r2, #16
 80049a2:	f8dc a000 	ldr.w	sl, [ip]
 80049a6:	fb06 e202 	mla	r2, r6, r2, lr
 80049aa:	fa13 f38a 	uxtah	r3, r3, sl
 80049ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049b2:	fa1f fa82 	uxth.w	sl, r2
 80049b6:	f8dc 2000 	ldr.w	r2, [ip]
 80049ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80049be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049c8:	4581      	cmp	r9, r0
 80049ca:	f84c 3b04 	str.w	r3, [ip], #4
 80049ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049d2:	d2db      	bcs.n	800498c <quorem+0x44>
 80049d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80049d8:	b92b      	cbnz	r3, 80049e6 <quorem+0x9e>
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	3b04      	subs	r3, #4
 80049de:	429d      	cmp	r5, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	d32e      	bcc.n	8004a42 <quorem+0xfa>
 80049e4:	613c      	str	r4, [r7, #16]
 80049e6:	4638      	mov	r0, r7
 80049e8:	f7ff fdf0 	bl	80045cc <__mcmp>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	db24      	blt.n	8004a3a <quorem+0xf2>
 80049f0:	3601      	adds	r6, #1
 80049f2:	4628      	mov	r0, r5
 80049f4:	f04f 0c00 	mov.w	ip, #0
 80049f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80049fc:	f8d0 e000 	ldr.w	lr, [r0]
 8004a00:	b293      	uxth	r3, r2
 8004a02:	ebac 0303 	sub.w	r3, ip, r3
 8004a06:	0c12      	lsrs	r2, r2, #16
 8004a08:	fa13 f38e 	uxtah	r3, r3, lr
 8004a0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a1a:	45c1      	cmp	r9, r8
 8004a1c:	f840 3b04 	str.w	r3, [r0], #4
 8004a20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a24:	d2e8      	bcs.n	80049f8 <quorem+0xb0>
 8004a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a2e:	b922      	cbnz	r2, 8004a3a <quorem+0xf2>
 8004a30:	3b04      	subs	r3, #4
 8004a32:	429d      	cmp	r5, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	d30a      	bcc.n	8004a4e <quorem+0x106>
 8004a38:	613c      	str	r4, [r7, #16]
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	b003      	add	sp, #12
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	2a00      	cmp	r2, #0
 8004a48:	d1cc      	bne.n	80049e4 <quorem+0x9c>
 8004a4a:	3c01      	subs	r4, #1
 8004a4c:	e7c7      	b.n	80049de <quorem+0x96>
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d1f0      	bne.n	8004a38 <quorem+0xf0>
 8004a56:	3c01      	subs	r4, #1
 8004a58:	e7eb      	b.n	8004a32 <quorem+0xea>
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e7ee      	b.n	8004a3c <quorem+0xf4>
	...

08004a60 <_dtoa_r>:
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	ed2d 8b02 	vpush	{d8}
 8004a68:	ec57 6b10 	vmov	r6, r7, d0
 8004a6c:	b095      	sub	sp, #84	; 0x54
 8004a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a74:	9105      	str	r1, [sp, #20]
 8004a76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a80:	b975      	cbnz	r5, 8004aa0 <_dtoa_r+0x40>
 8004a82:	2010      	movs	r0, #16
 8004a84:	f000 fdea 	bl	800565c <malloc>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8004a8c:	b920      	cbnz	r0, 8004a98 <_dtoa_r+0x38>
 8004a8e:	4bb2      	ldr	r3, [pc, #712]	; (8004d58 <_dtoa_r+0x2f8>)
 8004a90:	21ea      	movs	r1, #234	; 0xea
 8004a92:	48b2      	ldr	r0, [pc, #712]	; (8004d5c <_dtoa_r+0x2fc>)
 8004a94:	f7ff ff3a 	bl	800490c <__assert_func>
 8004a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a9c:	6005      	str	r5, [r0, #0]
 8004a9e:	60c5      	str	r5, [r0, #12]
 8004aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	b151      	cbz	r1, 8004abc <_dtoa_r+0x5c>
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	604a      	str	r2, [r1, #4]
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4093      	lsls	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7ff fb4d 	bl	8004150 <_Bfree>
 8004ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	1e3b      	subs	r3, r7, #0
 8004abe:	bfb9      	ittee	lt
 8004ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ac4:	9303      	strlt	r3, [sp, #12]
 8004ac6:	2300      	movge	r3, #0
 8004ac8:	f8c8 3000 	strge.w	r3, [r8]
 8004acc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ad0:	4ba3      	ldr	r3, [pc, #652]	; (8004d60 <_dtoa_r+0x300>)
 8004ad2:	bfbc      	itt	lt
 8004ad4:	2201      	movlt	r2, #1
 8004ad6:	f8c8 2000 	strlt.w	r2, [r8]
 8004ada:	ea33 0309 	bics.w	r3, r3, r9
 8004ade:	d11b      	bne.n	8004b18 <_dtoa_r+0xb8>
 8004ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004aec:	4333      	orrs	r3, r6
 8004aee:	f000 857a 	beq.w	80055e6 <_dtoa_r+0xb86>
 8004af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004af4:	b963      	cbnz	r3, 8004b10 <_dtoa_r+0xb0>
 8004af6:	4b9b      	ldr	r3, [pc, #620]	; (8004d64 <_dtoa_r+0x304>)
 8004af8:	e024      	b.n	8004b44 <_dtoa_r+0xe4>
 8004afa:	4b9b      	ldr	r3, [pc, #620]	; (8004d68 <_dtoa_r+0x308>)
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	9800      	ldr	r0, [sp, #0]
 8004b06:	b015      	add	sp, #84	; 0x54
 8004b08:	ecbd 8b02 	vpop	{d8}
 8004b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	4b94      	ldr	r3, [pc, #592]	; (8004d64 <_dtoa_r+0x304>)
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	3303      	adds	r3, #3
 8004b16:	e7f3      	b.n	8004b00 <_dtoa_r+0xa0>
 8004b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	ec51 0b17 	vmov	r0, r1, d7
 8004b22:	2300      	movs	r3, #0
 8004b24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b28:	f7fb ffc6 	bl	8000ab8 <__aeabi_dcmpeq>
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	b158      	cbz	r0, 8004b48 <_dtoa_r+0xe8>
 8004b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b32:	2301      	movs	r3, #1
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8551 	beq.w	80055e0 <_dtoa_r+0xb80>
 8004b3e:	488b      	ldr	r0, [pc, #556]	; (8004d6c <_dtoa_r+0x30c>)
 8004b40:	6018      	str	r0, [r3, #0]
 8004b42:	1e43      	subs	r3, r0, #1
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	e7dd      	b.n	8004b04 <_dtoa_r+0xa4>
 8004b48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004b4c:	aa12      	add	r2, sp, #72	; 0x48
 8004b4e:	a913      	add	r1, sp, #76	; 0x4c
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7ff fddf 	bl	8004714 <__d2b>
 8004b56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b5a:	4683      	mov	fp, r0
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	d07c      	beq.n	8004c5a <_dtoa_r+0x1fa>
 8004b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004b6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b7a:	4b7d      	ldr	r3, [pc, #500]	; (8004d70 <_dtoa_r+0x310>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4630      	mov	r0, r6
 8004b80:	4639      	mov	r1, r7
 8004b82:	f7fb fb79 	bl	8000278 <__aeabi_dsub>
 8004b86:	a36e      	add	r3, pc, #440	; (adr r3, 8004d40 <_dtoa_r+0x2e0>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb fd2c 	bl	80005e8 <__aeabi_dmul>
 8004b90:	a36d      	add	r3, pc, #436	; (adr r3, 8004d48 <_dtoa_r+0x2e8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fb71 	bl	800027c <__adddf3>
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	460f      	mov	r7, r1
 8004ba0:	f7fb fcb8 	bl	8000514 <__aeabi_i2d>
 8004ba4:	a36a      	add	r3, pc, #424	; (adr r3, 8004d50 <_dtoa_r+0x2f0>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fd1d 	bl	80005e8 <__aeabi_dmul>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	f7fb fb61 	bl	800027c <__adddf3>
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	f7fb ffad 	bl	8000b1c <__aeabi_d2iz>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fb ff7e 	bl	8000acc <__aeabi_dcmplt>
 8004bd0:	b148      	cbz	r0, 8004be6 <_dtoa_r+0x186>
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	f7fb fc9e 	bl	8000514 <__aeabi_i2d>
 8004bd8:	4632      	mov	r2, r6
 8004bda:	463b      	mov	r3, r7
 8004bdc:	f7fb ff6c 	bl	8000ab8 <__aeabi_dcmpeq>
 8004be0:	b908      	cbnz	r0, 8004be6 <_dtoa_r+0x186>
 8004be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004be6:	f1ba 0f16 	cmp.w	sl, #22
 8004bea:	d854      	bhi.n	8004c96 <_dtoa_r+0x236>
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <_dtoa_r+0x314>)
 8004bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bfa:	f7fb ff67 	bl	8000acc <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d04b      	beq.n	8004c9a <_dtoa_r+0x23a>
 8004c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c06:	2300      	movs	r3, #0
 8004c08:	930e      	str	r3, [sp, #56]	; 0x38
 8004c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c0c:	1b5d      	subs	r5, r3, r5
 8004c0e:	1e6b      	subs	r3, r5, #1
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	bf43      	ittte	mi
 8004c14:	2300      	movmi	r3, #0
 8004c16:	f1c5 0801 	rsbmi	r8, r5, #1
 8004c1a:	9304      	strmi	r3, [sp, #16]
 8004c1c:	f04f 0800 	movpl.w	r8, #0
 8004c20:	f1ba 0f00 	cmp.w	sl, #0
 8004c24:	db3b      	blt.n	8004c9e <_dtoa_r+0x23e>
 8004c26:	9b04      	ldr	r3, [sp, #16]
 8004c28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004c2c:	4453      	add	r3, sl
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	2300      	movs	r3, #0
 8004c32:	9306      	str	r3, [sp, #24]
 8004c34:	9b05      	ldr	r3, [sp, #20]
 8004c36:	2b09      	cmp	r3, #9
 8004c38:	d869      	bhi.n	8004d0e <_dtoa_r+0x2ae>
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	bfc4      	itt	gt
 8004c3e:	3b04      	subgt	r3, #4
 8004c40:	9305      	strgt	r3, [sp, #20]
 8004c42:	9b05      	ldr	r3, [sp, #20]
 8004c44:	f1a3 0302 	sub.w	r3, r3, #2
 8004c48:	bfcc      	ite	gt
 8004c4a:	2500      	movgt	r5, #0
 8004c4c:	2501      	movle	r5, #1
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d869      	bhi.n	8004d26 <_dtoa_r+0x2c6>
 8004c52:	e8df f003 	tbb	[pc, r3]
 8004c56:	4e2c      	.short	0x4e2c
 8004c58:	5a4c      	.short	0x5a4c
 8004c5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004c5e:	441d      	add	r5, r3
 8004c60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	bfc1      	itttt	gt
 8004c68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c70:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c78:	bfda      	itte	le
 8004c7a:	f1c3 0320 	rsble	r3, r3, #32
 8004c7e:	fa06 f003 	lslle.w	r0, r6, r3
 8004c82:	4318      	orrgt	r0, r3
 8004c84:	f7fb fc36 	bl	80004f4 <__aeabi_ui2d>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c90:	3d01      	subs	r5, #1
 8004c92:	9310      	str	r3, [sp, #64]	; 0x40
 8004c94:	e771      	b.n	8004b7a <_dtoa_r+0x11a>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e7b6      	b.n	8004c08 <_dtoa_r+0x1a8>
 8004c9a:	900e      	str	r0, [sp, #56]	; 0x38
 8004c9c:	e7b5      	b.n	8004c0a <_dtoa_r+0x1aa>
 8004c9e:	f1ca 0300 	rsb	r3, sl, #0
 8004ca2:	9306      	str	r3, [sp, #24]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	eba8 080a 	sub.w	r8, r8, sl
 8004caa:	930d      	str	r3, [sp, #52]	; 0x34
 8004cac:	e7c2      	b.n	8004c34 <_dtoa_r+0x1d4>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9308      	str	r3, [sp, #32]
 8004cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dc39      	bgt.n	8004d2c <_dtoa_r+0x2cc>
 8004cb8:	f04f 0901 	mov.w	r9, #1
 8004cbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004cc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cc8:	2200      	movs	r2, #0
 8004cca:	6042      	str	r2, [r0, #4]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	f102 0614 	add.w	r6, r2, #20
 8004cd2:	429e      	cmp	r6, r3
 8004cd4:	6841      	ldr	r1, [r0, #4]
 8004cd6:	d92f      	bls.n	8004d38 <_dtoa_r+0x2d8>
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7ff f9f9 	bl	80040d0 <_Balloc>
 8004cde:	9000      	str	r0, [sp, #0]
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d14b      	bne.n	8004d7c <_dtoa_r+0x31c>
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <_dtoa_r+0x318>)
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cec:	e6d1      	b.n	8004a92 <_dtoa_r+0x32>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7de      	b.n	8004cb0 <_dtoa_r+0x250>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9308      	str	r3, [sp, #32]
 8004cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf8:	eb0a 0903 	add.w	r9, sl, r3
 8004cfc:	f109 0301 	add.w	r3, r9, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	bfb8      	it	lt
 8004d06:	2301      	movlt	r3, #1
 8004d08:	e7dd      	b.n	8004cc6 <_dtoa_r+0x266>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e7f2      	b.n	8004cf4 <_dtoa_r+0x294>
 8004d0e:	2501      	movs	r5, #1
 8004d10:	2300      	movs	r3, #0
 8004d12:	9305      	str	r3, [sp, #20]
 8004d14:	9508      	str	r5, [sp, #32]
 8004d16:	f04f 39ff 	mov.w	r9, #4294967295
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d20:	2312      	movs	r3, #18
 8004d22:	9209      	str	r2, [sp, #36]	; 0x24
 8004d24:	e7cf      	b.n	8004cc6 <_dtoa_r+0x266>
 8004d26:	2301      	movs	r3, #1
 8004d28:	9308      	str	r3, [sp, #32]
 8004d2a:	e7f4      	b.n	8004d16 <_dtoa_r+0x2b6>
 8004d2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d30:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d34:	464b      	mov	r3, r9
 8004d36:	e7c6      	b.n	8004cc6 <_dtoa_r+0x266>
 8004d38:	3101      	adds	r1, #1
 8004d3a:	6041      	str	r1, [r0, #4]
 8004d3c:	0052      	lsls	r2, r2, #1
 8004d3e:	e7c6      	b.n	8004cce <_dtoa_r+0x26e>
 8004d40:	636f4361 	.word	0x636f4361
 8004d44:	3fd287a7 	.word	0x3fd287a7
 8004d48:	8b60c8b3 	.word	0x8b60c8b3
 8004d4c:	3fc68a28 	.word	0x3fc68a28
 8004d50:	509f79fb 	.word	0x509f79fb
 8004d54:	3fd34413 	.word	0x3fd34413
 8004d58:	0800652c 	.word	0x0800652c
 8004d5c:	080066ff 	.word	0x080066ff
 8004d60:	7ff00000 	.word	0x7ff00000
 8004d64:	080066f9 	.word	0x080066f9
 8004d68:	080066f0 	.word	0x080066f0
 8004d6c:	080066fe 	.word	0x080066fe
 8004d70:	3ff80000 	.word	0x3ff80000
 8004d74:	080065e0 	.word	0x080065e0
 8004d78:	080065a3 	.word	0x080065a3
 8004d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d7e:	9a00      	ldr	r2, [sp, #0]
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	2b0e      	cmp	r3, #14
 8004d86:	f200 80ad 	bhi.w	8004ee4 <_dtoa_r+0x484>
 8004d8a:	2d00      	cmp	r5, #0
 8004d8c:	f000 80aa 	beq.w	8004ee4 <_dtoa_r+0x484>
 8004d90:	f1ba 0f00 	cmp.w	sl, #0
 8004d94:	dd36      	ble.n	8004e04 <_dtoa_r+0x3a4>
 8004d96:	4ac3      	ldr	r2, [pc, #780]	; (80050a4 <_dtoa_r+0x644>)
 8004d98:	f00a 030f 	and.w	r3, sl, #15
 8004d9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004da0:	ed93 7b00 	vldr	d7, [r3]
 8004da4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004da8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004dac:	eeb0 8a47 	vmov.f32	s16, s14
 8004db0:	eef0 8a67 	vmov.f32	s17, s15
 8004db4:	d016      	beq.n	8004de4 <_dtoa_r+0x384>
 8004db6:	4bbc      	ldr	r3, [pc, #752]	; (80050a8 <_dtoa_r+0x648>)
 8004db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dc0:	f7fb fd3c 	bl	800083c <__aeabi_ddiv>
 8004dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc8:	f007 070f 	and.w	r7, r7, #15
 8004dcc:	2503      	movs	r5, #3
 8004dce:	4eb6      	ldr	r6, [pc, #728]	; (80050a8 <_dtoa_r+0x648>)
 8004dd0:	b957      	cbnz	r7, 8004de8 <_dtoa_r+0x388>
 8004dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dd6:	ec53 2b18 	vmov	r2, r3, d8
 8004dda:	f7fb fd2f 	bl	800083c <__aeabi_ddiv>
 8004dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004de2:	e029      	b.n	8004e38 <_dtoa_r+0x3d8>
 8004de4:	2502      	movs	r5, #2
 8004de6:	e7f2      	b.n	8004dce <_dtoa_r+0x36e>
 8004de8:	07f9      	lsls	r1, r7, #31
 8004dea:	d508      	bpl.n	8004dfe <_dtoa_r+0x39e>
 8004dec:	ec51 0b18 	vmov	r0, r1, d8
 8004df0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004df4:	f7fb fbf8 	bl	80005e8 <__aeabi_dmul>
 8004df8:	ec41 0b18 	vmov	d8, r0, r1
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	107f      	asrs	r7, r7, #1
 8004e00:	3608      	adds	r6, #8
 8004e02:	e7e5      	b.n	8004dd0 <_dtoa_r+0x370>
 8004e04:	f000 80a6 	beq.w	8004f54 <_dtoa_r+0x4f4>
 8004e08:	f1ca 0600 	rsb	r6, sl, #0
 8004e0c:	4ba5      	ldr	r3, [pc, #660]	; (80050a4 <_dtoa_r+0x644>)
 8004e0e:	4fa6      	ldr	r7, [pc, #664]	; (80050a8 <_dtoa_r+0x648>)
 8004e10:	f006 020f 	and.w	r2, r6, #15
 8004e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e20:	f7fb fbe2 	bl	80005e8 <__aeabi_dmul>
 8004e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e28:	1136      	asrs	r6, r6, #4
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2502      	movs	r5, #2
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	f040 8085 	bne.w	8004f3e <_dtoa_r+0x4de>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1d2      	bne.n	8004dde <_dtoa_r+0x37e>
 8004e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 808c 	beq.w	8004f58 <_dtoa_r+0x4f8>
 8004e40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e44:	4b99      	ldr	r3, [pc, #612]	; (80050ac <_dtoa_r+0x64c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	4630      	mov	r0, r6
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	f7fb fe3e 	bl	8000acc <__aeabi_dcmplt>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f000 8081 	beq.w	8004f58 <_dtoa_r+0x4f8>
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d07d      	beq.n	8004f58 <_dtoa_r+0x4f8>
 8004e5c:	f1b9 0f00 	cmp.w	r9, #0
 8004e60:	dd3c      	ble.n	8004edc <_dtoa_r+0x47c>
 8004e62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4b91      	ldr	r3, [pc, #580]	; (80050b0 <_dtoa_r+0x650>)
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4639      	mov	r1, r7
 8004e70:	f7fb fbba 	bl	80005e8 <__aeabi_dmul>
 8004e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e78:	3501      	adds	r5, #1
 8004e7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004e7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e82:	4628      	mov	r0, r5
 8004e84:	f7fb fb46 	bl	8000514 <__aeabi_i2d>
 8004e88:	4632      	mov	r2, r6
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	f7fb fbac 	bl	80005e8 <__aeabi_dmul>
 8004e90:	4b88      	ldr	r3, [pc, #544]	; (80050b4 <_dtoa_r+0x654>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	f7fb f9f2 	bl	800027c <__adddf3>
 8004e98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea0:	9303      	str	r3, [sp, #12]
 8004ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d15c      	bne.n	8004f62 <_dtoa_r+0x502>
 8004ea8:	4b83      	ldr	r3, [pc, #524]	; (80050b8 <_dtoa_r+0x658>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb f9e2 	bl	8000278 <__aeabi_dsub>
 8004eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eb8:	4606      	mov	r6, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	f7fb fe24 	bl	8000b08 <__aeabi_dcmpgt>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f040 8296 	bne.w	80053f2 <_dtoa_r+0x992>
 8004ec6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	f7fb fdfb 	bl	8000acc <__aeabi_dcmplt>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	f040 8288 	bne.w	80053ec <_dtoa_r+0x98c>
 8004edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f2c0 8158 	blt.w	800519c <_dtoa_r+0x73c>
 8004eec:	f1ba 0f0e 	cmp.w	sl, #14
 8004ef0:	f300 8154 	bgt.w	800519c <_dtoa_r+0x73c>
 8004ef4:	4b6b      	ldr	r3, [pc, #428]	; (80050a4 <_dtoa_r+0x644>)
 8004ef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004efa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f280 80e3 	bge.w	80050cc <_dtoa_r+0x66c>
 8004f06:	9b01      	ldr	r3, [sp, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f300 80df 	bgt.w	80050cc <_dtoa_r+0x66c>
 8004f0e:	f040 826d 	bne.w	80053ec <_dtoa_r+0x98c>
 8004f12:	4b69      	ldr	r3, [pc, #420]	; (80050b8 <_dtoa_r+0x658>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	4640      	mov	r0, r8
 8004f18:	4649      	mov	r1, r9
 8004f1a:	f7fb fb65 	bl	80005e8 <__aeabi_dmul>
 8004f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f22:	f7fb fde7 	bl	8000af4 <__aeabi_dcmpge>
 8004f26:	9e01      	ldr	r6, [sp, #4]
 8004f28:	4637      	mov	r7, r6
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f040 8243 	bne.w	80053b6 <_dtoa_r+0x956>
 8004f30:	9d00      	ldr	r5, [sp, #0]
 8004f32:	2331      	movs	r3, #49	; 0x31
 8004f34:	f805 3b01 	strb.w	r3, [r5], #1
 8004f38:	f10a 0a01 	add.w	sl, sl, #1
 8004f3c:	e23f      	b.n	80053be <_dtoa_r+0x95e>
 8004f3e:	07f2      	lsls	r2, r6, #31
 8004f40:	d505      	bpl.n	8004f4e <_dtoa_r+0x4ee>
 8004f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f46:	f7fb fb4f 	bl	80005e8 <__aeabi_dmul>
 8004f4a:	3501      	adds	r5, #1
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	1076      	asrs	r6, r6, #1
 8004f50:	3708      	adds	r7, #8
 8004f52:	e76c      	b.n	8004e2e <_dtoa_r+0x3ce>
 8004f54:	2502      	movs	r5, #2
 8004f56:	e76f      	b.n	8004e38 <_dtoa_r+0x3d8>
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f60:	e78d      	b.n	8004e7e <_dtoa_r+0x41e>
 8004f62:	9900      	ldr	r1, [sp, #0]
 8004f64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f68:	4b4e      	ldr	r3, [pc, #312]	; (80050a4 <_dtoa_r+0x644>)
 8004f6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f6e:	4401      	add	r1, r0
 8004f70:	9102      	str	r1, [sp, #8]
 8004f72:	9908      	ldr	r1, [sp, #32]
 8004f74:	eeb0 8a47 	vmov.f32	s16, s14
 8004f78:	eef0 8a67 	vmov.f32	s17, s15
 8004f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f84:	2900      	cmp	r1, #0
 8004f86:	d045      	beq.n	8005014 <_dtoa_r+0x5b4>
 8004f88:	494c      	ldr	r1, [pc, #304]	; (80050bc <_dtoa_r+0x65c>)
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f7fb fc56 	bl	800083c <__aeabi_ddiv>
 8004f90:	ec53 2b18 	vmov	r2, r3, d8
 8004f94:	f7fb f970 	bl	8000278 <__aeabi_dsub>
 8004f98:	9d00      	ldr	r5, [sp, #0]
 8004f9a:	ec41 0b18 	vmov	d8, r0, r1
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7fb fdbb 	bl	8000b1c <__aeabi_d2iz>
 8004fa6:	900c      	str	r0, [sp, #48]	; 0x30
 8004fa8:	f7fb fab4 	bl	8000514 <__aeabi_i2d>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb f960 	bl	8000278 <__aeabi_dsub>
 8004fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fba:	3330      	adds	r3, #48	; 0x30
 8004fbc:	f805 3b01 	strb.w	r3, [r5], #1
 8004fc0:	ec53 2b18 	vmov	r2, r3, d8
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	460f      	mov	r7, r1
 8004fc8:	f7fb fd80 	bl	8000acc <__aeabi_dcmplt>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d165      	bne.n	800509c <_dtoa_r+0x63c>
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	4935      	ldr	r1, [pc, #212]	; (80050ac <_dtoa_r+0x64c>)
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f7fb f94e 	bl	8000278 <__aeabi_dsub>
 8004fdc:	ec53 2b18 	vmov	r2, r3, d8
 8004fe0:	f7fb fd74 	bl	8000acc <__aeabi_dcmplt>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	f040 80b9 	bne.w	800515c <_dtoa_r+0x6fc>
 8004fea:	9b02      	ldr	r3, [sp, #8]
 8004fec:	429d      	cmp	r5, r3
 8004fee:	f43f af75 	beq.w	8004edc <_dtoa_r+0x47c>
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <_dtoa_r+0x650>)
 8004ff4:	ec51 0b18 	vmov	r0, r1, d8
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f7fb faf5 	bl	80005e8 <__aeabi_dmul>
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <_dtoa_r+0x650>)
 8005000:	ec41 0b18 	vmov	d8, r0, r1
 8005004:	2200      	movs	r2, #0
 8005006:	4630      	mov	r0, r6
 8005008:	4639      	mov	r1, r7
 800500a:	f7fb faed 	bl	80005e8 <__aeabi_dmul>
 800500e:	4606      	mov	r6, r0
 8005010:	460f      	mov	r7, r1
 8005012:	e7c4      	b.n	8004f9e <_dtoa_r+0x53e>
 8005014:	ec51 0b17 	vmov	r0, r1, d7
 8005018:	f7fb fae6 	bl	80005e8 <__aeabi_dmul>
 800501c:	9b02      	ldr	r3, [sp, #8]
 800501e:	9d00      	ldr	r5, [sp, #0]
 8005020:	930c      	str	r3, [sp, #48]	; 0x30
 8005022:	ec41 0b18 	vmov	d8, r0, r1
 8005026:	4639      	mov	r1, r7
 8005028:	4630      	mov	r0, r6
 800502a:	f7fb fd77 	bl	8000b1c <__aeabi_d2iz>
 800502e:	9011      	str	r0, [sp, #68]	; 0x44
 8005030:	f7fb fa70 	bl	8000514 <__aeabi_i2d>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4630      	mov	r0, r6
 800503a:	4639      	mov	r1, r7
 800503c:	f7fb f91c 	bl	8000278 <__aeabi_dsub>
 8005040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005042:	3330      	adds	r3, #48	; 0x30
 8005044:	f805 3b01 	strb.w	r3, [r5], #1
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	429d      	cmp	r5, r3
 800504c:	4606      	mov	r6, r0
 800504e:	460f      	mov	r7, r1
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	d134      	bne.n	80050c0 <_dtoa_r+0x660>
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <_dtoa_r+0x65c>)
 8005058:	ec51 0b18 	vmov	r0, r1, d8
 800505c:	f7fb f90e 	bl	800027c <__adddf3>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb fd4e 	bl	8000b08 <__aeabi_dcmpgt>
 800506c:	2800      	cmp	r0, #0
 800506e:	d175      	bne.n	800515c <_dtoa_r+0x6fc>
 8005070:	ec53 2b18 	vmov	r2, r3, d8
 8005074:	4911      	ldr	r1, [pc, #68]	; (80050bc <_dtoa_r+0x65c>)
 8005076:	2000      	movs	r0, #0
 8005078:	f7fb f8fe 	bl	8000278 <__aeabi_dsub>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb fd22 	bl	8000acc <__aeabi_dcmplt>
 8005088:	2800      	cmp	r0, #0
 800508a:	f43f af27 	beq.w	8004edc <_dtoa_r+0x47c>
 800508e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005090:	1e6b      	subs	r3, r5, #1
 8005092:	930c      	str	r3, [sp, #48]	; 0x30
 8005094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005098:	2b30      	cmp	r3, #48	; 0x30
 800509a:	d0f8      	beq.n	800508e <_dtoa_r+0x62e>
 800509c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80050a0:	e04a      	b.n	8005138 <_dtoa_r+0x6d8>
 80050a2:	bf00      	nop
 80050a4:	080065e0 	.word	0x080065e0
 80050a8:	080065b8 	.word	0x080065b8
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	40240000 	.word	0x40240000
 80050b4:	401c0000 	.word	0x401c0000
 80050b8:	40140000 	.word	0x40140000
 80050bc:	3fe00000 	.word	0x3fe00000
 80050c0:	4baf      	ldr	r3, [pc, #700]	; (8005380 <_dtoa_r+0x920>)
 80050c2:	f7fb fa91 	bl	80005e8 <__aeabi_dmul>
 80050c6:	4606      	mov	r6, r0
 80050c8:	460f      	mov	r7, r1
 80050ca:	e7ac      	b.n	8005026 <_dtoa_r+0x5c6>
 80050cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050d0:	9d00      	ldr	r5, [sp, #0]
 80050d2:	4642      	mov	r2, r8
 80050d4:	464b      	mov	r3, r9
 80050d6:	4630      	mov	r0, r6
 80050d8:	4639      	mov	r1, r7
 80050da:	f7fb fbaf 	bl	800083c <__aeabi_ddiv>
 80050de:	f7fb fd1d 	bl	8000b1c <__aeabi_d2iz>
 80050e2:	9002      	str	r0, [sp, #8]
 80050e4:	f7fb fa16 	bl	8000514 <__aeabi_i2d>
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	f7fb fa7c 	bl	80005e8 <__aeabi_dmul>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4630      	mov	r0, r6
 80050f6:	4639      	mov	r1, r7
 80050f8:	f7fb f8be 	bl	8000278 <__aeabi_dsub>
 80050fc:	9e02      	ldr	r6, [sp, #8]
 80050fe:	9f01      	ldr	r7, [sp, #4]
 8005100:	3630      	adds	r6, #48	; 0x30
 8005102:	f805 6b01 	strb.w	r6, [r5], #1
 8005106:	9e00      	ldr	r6, [sp, #0]
 8005108:	1bae      	subs	r6, r5, r6
 800510a:	42b7      	cmp	r7, r6
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	d137      	bne.n	8005182 <_dtoa_r+0x722>
 8005112:	f7fb f8b3 	bl	800027c <__adddf3>
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	4606      	mov	r6, r0
 800511c:	460f      	mov	r7, r1
 800511e:	f7fb fcf3 	bl	8000b08 <__aeabi_dcmpgt>
 8005122:	b9c8      	cbnz	r0, 8005158 <_dtoa_r+0x6f8>
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	f7fb fcc4 	bl	8000ab8 <__aeabi_dcmpeq>
 8005130:	b110      	cbz	r0, 8005138 <_dtoa_r+0x6d8>
 8005132:	9b02      	ldr	r3, [sp, #8]
 8005134:	07d9      	lsls	r1, r3, #31
 8005136:	d40f      	bmi.n	8005158 <_dtoa_r+0x6f8>
 8005138:	4620      	mov	r0, r4
 800513a:	4659      	mov	r1, fp
 800513c:	f7ff f808 	bl	8004150 <_Bfree>
 8005140:	2300      	movs	r3, #0
 8005142:	702b      	strb	r3, [r5, #0]
 8005144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005146:	f10a 0001 	add.w	r0, sl, #1
 800514a:	6018      	str	r0, [r3, #0]
 800514c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800514e:	2b00      	cmp	r3, #0
 8005150:	f43f acd8 	beq.w	8004b04 <_dtoa_r+0xa4>
 8005154:	601d      	str	r5, [r3, #0]
 8005156:	e4d5      	b.n	8004b04 <_dtoa_r+0xa4>
 8005158:	f8cd a01c 	str.w	sl, [sp, #28]
 800515c:	462b      	mov	r3, r5
 800515e:	461d      	mov	r5, r3
 8005160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005164:	2a39      	cmp	r2, #57	; 0x39
 8005166:	d108      	bne.n	800517a <_dtoa_r+0x71a>
 8005168:	9a00      	ldr	r2, [sp, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d1f7      	bne.n	800515e <_dtoa_r+0x6fe>
 800516e:	9a07      	ldr	r2, [sp, #28]
 8005170:	9900      	ldr	r1, [sp, #0]
 8005172:	3201      	adds	r2, #1
 8005174:	9207      	str	r2, [sp, #28]
 8005176:	2230      	movs	r2, #48	; 0x30
 8005178:	700a      	strb	r2, [r1, #0]
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	3201      	adds	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e78c      	b.n	800509c <_dtoa_r+0x63c>
 8005182:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <_dtoa_r+0x920>)
 8005184:	2200      	movs	r2, #0
 8005186:	f7fb fa2f 	bl	80005e8 <__aeabi_dmul>
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	4606      	mov	r6, r0
 8005190:	460f      	mov	r7, r1
 8005192:	f7fb fc91 	bl	8000ab8 <__aeabi_dcmpeq>
 8005196:	2800      	cmp	r0, #0
 8005198:	d09b      	beq.n	80050d2 <_dtoa_r+0x672>
 800519a:	e7cd      	b.n	8005138 <_dtoa_r+0x6d8>
 800519c:	9a08      	ldr	r2, [sp, #32]
 800519e:	2a00      	cmp	r2, #0
 80051a0:	f000 80c4 	beq.w	800532c <_dtoa_r+0x8cc>
 80051a4:	9a05      	ldr	r2, [sp, #20]
 80051a6:	2a01      	cmp	r2, #1
 80051a8:	f300 80a8 	bgt.w	80052fc <_dtoa_r+0x89c>
 80051ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	f000 80a0 	beq.w	80052f4 <_dtoa_r+0x894>
 80051b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051b8:	9e06      	ldr	r6, [sp, #24]
 80051ba:	4645      	mov	r5, r8
 80051bc:	9a04      	ldr	r2, [sp, #16]
 80051be:	2101      	movs	r1, #1
 80051c0:	441a      	add	r2, r3
 80051c2:	4620      	mov	r0, r4
 80051c4:	4498      	add	r8, r3
 80051c6:	9204      	str	r2, [sp, #16]
 80051c8:	f7ff f87e 	bl	80042c8 <__i2b>
 80051cc:	4607      	mov	r7, r0
 80051ce:	2d00      	cmp	r5, #0
 80051d0:	dd0b      	ble.n	80051ea <_dtoa_r+0x78a>
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dd08      	ble.n	80051ea <_dtoa_r+0x78a>
 80051d8:	42ab      	cmp	r3, r5
 80051da:	9a04      	ldr	r2, [sp, #16]
 80051dc:	bfa8      	it	ge
 80051de:	462b      	movge	r3, r5
 80051e0:	eba8 0803 	sub.w	r8, r8, r3
 80051e4:	1aed      	subs	r5, r5, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	9304      	str	r3, [sp, #16]
 80051ea:	9b06      	ldr	r3, [sp, #24]
 80051ec:	b1fb      	cbz	r3, 800522e <_dtoa_r+0x7ce>
 80051ee:	9b08      	ldr	r3, [sp, #32]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 809f 	beq.w	8005334 <_dtoa_r+0x8d4>
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	dd11      	ble.n	800521e <_dtoa_r+0x7be>
 80051fa:	4639      	mov	r1, r7
 80051fc:	4632      	mov	r2, r6
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff f91e 	bl	8004440 <__pow5mult>
 8005204:	465a      	mov	r2, fp
 8005206:	4601      	mov	r1, r0
 8005208:	4607      	mov	r7, r0
 800520a:	4620      	mov	r0, r4
 800520c:	f7ff f872 	bl	80042f4 <__multiply>
 8005210:	4659      	mov	r1, fp
 8005212:	9007      	str	r0, [sp, #28]
 8005214:	4620      	mov	r0, r4
 8005216:	f7fe ff9b 	bl	8004150 <_Bfree>
 800521a:	9b07      	ldr	r3, [sp, #28]
 800521c:	469b      	mov	fp, r3
 800521e:	9b06      	ldr	r3, [sp, #24]
 8005220:	1b9a      	subs	r2, r3, r6
 8005222:	d004      	beq.n	800522e <_dtoa_r+0x7ce>
 8005224:	4659      	mov	r1, fp
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff f90a 	bl	8004440 <__pow5mult>
 800522c:	4683      	mov	fp, r0
 800522e:	2101      	movs	r1, #1
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff f849 	bl	80042c8 <__i2b>
 8005236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005238:	2b00      	cmp	r3, #0
 800523a:	4606      	mov	r6, r0
 800523c:	dd7c      	ble.n	8005338 <_dtoa_r+0x8d8>
 800523e:	461a      	mov	r2, r3
 8005240:	4601      	mov	r1, r0
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff f8fc 	bl	8004440 <__pow5mult>
 8005248:	9b05      	ldr	r3, [sp, #20]
 800524a:	2b01      	cmp	r3, #1
 800524c:	4606      	mov	r6, r0
 800524e:	dd76      	ble.n	800533e <_dtoa_r+0x8de>
 8005250:	2300      	movs	r3, #0
 8005252:	9306      	str	r3, [sp, #24]
 8005254:	6933      	ldr	r3, [r6, #16]
 8005256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800525a:	6918      	ldr	r0, [r3, #16]
 800525c:	f7fe ffe4 	bl	8004228 <__hi0bits>
 8005260:	f1c0 0020 	rsb	r0, r0, #32
 8005264:	9b04      	ldr	r3, [sp, #16]
 8005266:	4418      	add	r0, r3
 8005268:	f010 001f 	ands.w	r0, r0, #31
 800526c:	f000 8086 	beq.w	800537c <_dtoa_r+0x91c>
 8005270:	f1c0 0320 	rsb	r3, r0, #32
 8005274:	2b04      	cmp	r3, #4
 8005276:	dd7f      	ble.n	8005378 <_dtoa_r+0x918>
 8005278:	f1c0 001c 	rsb	r0, r0, #28
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	4403      	add	r3, r0
 8005280:	4480      	add	r8, r0
 8005282:	4405      	add	r5, r0
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	f1b8 0f00 	cmp.w	r8, #0
 800528a:	dd05      	ble.n	8005298 <_dtoa_r+0x838>
 800528c:	4659      	mov	r1, fp
 800528e:	4642      	mov	r2, r8
 8005290:	4620      	mov	r0, r4
 8005292:	f7ff f92f 	bl	80044f4 <__lshift>
 8005296:	4683      	mov	fp, r0
 8005298:	9b04      	ldr	r3, [sp, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	dd05      	ble.n	80052aa <_dtoa_r+0x84a>
 800529e:	4631      	mov	r1, r6
 80052a0:	461a      	mov	r2, r3
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7ff f926 	bl	80044f4 <__lshift>
 80052a8:	4606      	mov	r6, r0
 80052aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d069      	beq.n	8005384 <_dtoa_r+0x924>
 80052b0:	4631      	mov	r1, r6
 80052b2:	4658      	mov	r0, fp
 80052b4:	f7ff f98a 	bl	80045cc <__mcmp>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	da63      	bge.n	8005384 <_dtoa_r+0x924>
 80052bc:	2300      	movs	r3, #0
 80052be:	4659      	mov	r1, fp
 80052c0:	220a      	movs	r2, #10
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7fe ff66 	bl	8004194 <__multadd>
 80052c8:	9b08      	ldr	r3, [sp, #32]
 80052ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ce:	4683      	mov	fp, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 818f 	beq.w	80055f4 <_dtoa_r+0xb94>
 80052d6:	4639      	mov	r1, r7
 80052d8:	2300      	movs	r3, #0
 80052da:	220a      	movs	r2, #10
 80052dc:	4620      	mov	r0, r4
 80052de:	f7fe ff59 	bl	8004194 <__multadd>
 80052e2:	f1b9 0f00 	cmp.w	r9, #0
 80052e6:	4607      	mov	r7, r0
 80052e8:	f300 808e 	bgt.w	8005408 <_dtoa_r+0x9a8>
 80052ec:	9b05      	ldr	r3, [sp, #20]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	dc50      	bgt.n	8005394 <_dtoa_r+0x934>
 80052f2:	e089      	b.n	8005408 <_dtoa_r+0x9a8>
 80052f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052fa:	e75d      	b.n	80051b8 <_dtoa_r+0x758>
 80052fc:	9b01      	ldr	r3, [sp, #4]
 80052fe:	1e5e      	subs	r6, r3, #1
 8005300:	9b06      	ldr	r3, [sp, #24]
 8005302:	42b3      	cmp	r3, r6
 8005304:	bfbf      	itttt	lt
 8005306:	9b06      	ldrlt	r3, [sp, #24]
 8005308:	9606      	strlt	r6, [sp, #24]
 800530a:	1af2      	sublt	r2, r6, r3
 800530c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800530e:	bfb6      	itet	lt
 8005310:	189b      	addlt	r3, r3, r2
 8005312:	1b9e      	subge	r6, r3, r6
 8005314:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	bfb8      	it	lt
 800531a:	2600      	movlt	r6, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	bfb5      	itete	lt
 8005320:	eba8 0503 	sublt.w	r5, r8, r3
 8005324:	9b01      	ldrge	r3, [sp, #4]
 8005326:	2300      	movlt	r3, #0
 8005328:	4645      	movge	r5, r8
 800532a:	e747      	b.n	80051bc <_dtoa_r+0x75c>
 800532c:	9e06      	ldr	r6, [sp, #24]
 800532e:	9f08      	ldr	r7, [sp, #32]
 8005330:	4645      	mov	r5, r8
 8005332:	e74c      	b.n	80051ce <_dtoa_r+0x76e>
 8005334:	9a06      	ldr	r2, [sp, #24]
 8005336:	e775      	b.n	8005224 <_dtoa_r+0x7c4>
 8005338:	9b05      	ldr	r3, [sp, #20]
 800533a:	2b01      	cmp	r3, #1
 800533c:	dc18      	bgt.n	8005370 <_dtoa_r+0x910>
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	b9b3      	cbnz	r3, 8005370 <_dtoa_r+0x910>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005348:	b9a3      	cbnz	r3, 8005374 <_dtoa_r+0x914>
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005350:	0d1b      	lsrs	r3, r3, #20
 8005352:	051b      	lsls	r3, r3, #20
 8005354:	b12b      	cbz	r3, 8005362 <_dtoa_r+0x902>
 8005356:	9b04      	ldr	r3, [sp, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	9304      	str	r3, [sp, #16]
 800535c:	f108 0801 	add.w	r8, r8, #1
 8005360:	2301      	movs	r3, #1
 8005362:	9306      	str	r3, [sp, #24]
 8005364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005366:	2b00      	cmp	r3, #0
 8005368:	f47f af74 	bne.w	8005254 <_dtoa_r+0x7f4>
 800536c:	2001      	movs	r0, #1
 800536e:	e779      	b.n	8005264 <_dtoa_r+0x804>
 8005370:	2300      	movs	r3, #0
 8005372:	e7f6      	b.n	8005362 <_dtoa_r+0x902>
 8005374:	9b02      	ldr	r3, [sp, #8]
 8005376:	e7f4      	b.n	8005362 <_dtoa_r+0x902>
 8005378:	d085      	beq.n	8005286 <_dtoa_r+0x826>
 800537a:	4618      	mov	r0, r3
 800537c:	301c      	adds	r0, #28
 800537e:	e77d      	b.n	800527c <_dtoa_r+0x81c>
 8005380:	40240000 	.word	0x40240000
 8005384:	9b01      	ldr	r3, [sp, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dc38      	bgt.n	80053fc <_dtoa_r+0x99c>
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	2b02      	cmp	r3, #2
 800538e:	dd35      	ble.n	80053fc <_dtoa_r+0x99c>
 8005390:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	d10d      	bne.n	80053b6 <_dtoa_r+0x956>
 800539a:	4631      	mov	r1, r6
 800539c:	464b      	mov	r3, r9
 800539e:	2205      	movs	r2, #5
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7fe fef7 	bl	8004194 <__multadd>
 80053a6:	4601      	mov	r1, r0
 80053a8:	4606      	mov	r6, r0
 80053aa:	4658      	mov	r0, fp
 80053ac:	f7ff f90e 	bl	80045cc <__mcmp>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f73f adbd 	bgt.w	8004f30 <_dtoa_r+0x4d0>
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	9d00      	ldr	r5, [sp, #0]
 80053ba:	ea6f 0a03 	mvn.w	sl, r3
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	4631      	mov	r1, r6
 80053c4:	4620      	mov	r0, r4
 80053c6:	f7fe fec3 	bl	8004150 <_Bfree>
 80053ca:	2f00      	cmp	r7, #0
 80053cc:	f43f aeb4 	beq.w	8005138 <_dtoa_r+0x6d8>
 80053d0:	f1b8 0f00 	cmp.w	r8, #0
 80053d4:	d005      	beq.n	80053e2 <_dtoa_r+0x982>
 80053d6:	45b8      	cmp	r8, r7
 80053d8:	d003      	beq.n	80053e2 <_dtoa_r+0x982>
 80053da:	4641      	mov	r1, r8
 80053dc:	4620      	mov	r0, r4
 80053de:	f7fe feb7 	bl	8004150 <_Bfree>
 80053e2:	4639      	mov	r1, r7
 80053e4:	4620      	mov	r0, r4
 80053e6:	f7fe feb3 	bl	8004150 <_Bfree>
 80053ea:	e6a5      	b.n	8005138 <_dtoa_r+0x6d8>
 80053ec:	2600      	movs	r6, #0
 80053ee:	4637      	mov	r7, r6
 80053f0:	e7e1      	b.n	80053b6 <_dtoa_r+0x956>
 80053f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053f8:	4637      	mov	r7, r6
 80053fa:	e599      	b.n	8004f30 <_dtoa_r+0x4d0>
 80053fc:	9b08      	ldr	r3, [sp, #32]
 80053fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80fd 	beq.w	8005602 <_dtoa_r+0xba2>
 8005408:	2d00      	cmp	r5, #0
 800540a:	dd05      	ble.n	8005418 <_dtoa_r+0x9b8>
 800540c:	4639      	mov	r1, r7
 800540e:	462a      	mov	r2, r5
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff f86f 	bl	80044f4 <__lshift>
 8005416:	4607      	mov	r7, r0
 8005418:	9b06      	ldr	r3, [sp, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d05c      	beq.n	80054d8 <_dtoa_r+0xa78>
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4620      	mov	r0, r4
 8005422:	f7fe fe55 	bl	80040d0 <_Balloc>
 8005426:	4605      	mov	r5, r0
 8005428:	b928      	cbnz	r0, 8005436 <_dtoa_r+0x9d6>
 800542a:	4b80      	ldr	r3, [pc, #512]	; (800562c <_dtoa_r+0xbcc>)
 800542c:	4602      	mov	r2, r0
 800542e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005432:	f7ff bb2e 	b.w	8004a92 <_dtoa_r+0x32>
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	3202      	adds	r2, #2
 800543a:	0092      	lsls	r2, r2, #2
 800543c:	f107 010c 	add.w	r1, r7, #12
 8005440:	300c      	adds	r0, #12
 8005442:	f000 f913 	bl	800566c <memcpy>
 8005446:	2201      	movs	r2, #1
 8005448:	4629      	mov	r1, r5
 800544a:	4620      	mov	r0, r4
 800544c:	f7ff f852 	bl	80044f4 <__lshift>
 8005450:	9b00      	ldr	r3, [sp, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	9b00      	ldr	r3, [sp, #0]
 8005458:	444b      	add	r3, r9
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	9b02      	ldr	r3, [sp, #8]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	46b8      	mov	r8, r7
 8005464:	9306      	str	r3, [sp, #24]
 8005466:	4607      	mov	r7, r0
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	4631      	mov	r1, r6
 800546c:	3b01      	subs	r3, #1
 800546e:	4658      	mov	r0, fp
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	f7ff fa69 	bl	8004948 <quorem>
 8005476:	4603      	mov	r3, r0
 8005478:	3330      	adds	r3, #48	; 0x30
 800547a:	9004      	str	r0, [sp, #16]
 800547c:	4641      	mov	r1, r8
 800547e:	4658      	mov	r0, fp
 8005480:	9308      	str	r3, [sp, #32]
 8005482:	f7ff f8a3 	bl	80045cc <__mcmp>
 8005486:	463a      	mov	r2, r7
 8005488:	4681      	mov	r9, r0
 800548a:	4631      	mov	r1, r6
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff f8b9 	bl	8004604 <__mdiff>
 8005492:	68c2      	ldr	r2, [r0, #12]
 8005494:	9b08      	ldr	r3, [sp, #32]
 8005496:	4605      	mov	r5, r0
 8005498:	bb02      	cbnz	r2, 80054dc <_dtoa_r+0xa7c>
 800549a:	4601      	mov	r1, r0
 800549c:	4658      	mov	r0, fp
 800549e:	f7ff f895 	bl	80045cc <__mcmp>
 80054a2:	9b08      	ldr	r3, [sp, #32]
 80054a4:	4602      	mov	r2, r0
 80054a6:	4629      	mov	r1, r5
 80054a8:	4620      	mov	r0, r4
 80054aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80054ae:	f7fe fe4f 	bl	8004150 <_Bfree>
 80054b2:	9b05      	ldr	r3, [sp, #20]
 80054b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054b6:	9d01      	ldr	r5, [sp, #4]
 80054b8:	ea43 0102 	orr.w	r1, r3, r2
 80054bc:	9b06      	ldr	r3, [sp, #24]
 80054be:	430b      	orrs	r3, r1
 80054c0:	9b08      	ldr	r3, [sp, #32]
 80054c2:	d10d      	bne.n	80054e0 <_dtoa_r+0xa80>
 80054c4:	2b39      	cmp	r3, #57	; 0x39
 80054c6:	d029      	beq.n	800551c <_dtoa_r+0xabc>
 80054c8:	f1b9 0f00 	cmp.w	r9, #0
 80054cc:	dd01      	ble.n	80054d2 <_dtoa_r+0xa72>
 80054ce:	9b04      	ldr	r3, [sp, #16]
 80054d0:	3331      	adds	r3, #49	; 0x31
 80054d2:	9a02      	ldr	r2, [sp, #8]
 80054d4:	7013      	strb	r3, [r2, #0]
 80054d6:	e774      	b.n	80053c2 <_dtoa_r+0x962>
 80054d8:	4638      	mov	r0, r7
 80054da:	e7b9      	b.n	8005450 <_dtoa_r+0x9f0>
 80054dc:	2201      	movs	r2, #1
 80054de:	e7e2      	b.n	80054a6 <_dtoa_r+0xa46>
 80054e0:	f1b9 0f00 	cmp.w	r9, #0
 80054e4:	db06      	blt.n	80054f4 <_dtoa_r+0xa94>
 80054e6:	9905      	ldr	r1, [sp, #20]
 80054e8:	ea41 0909 	orr.w	r9, r1, r9
 80054ec:	9906      	ldr	r1, [sp, #24]
 80054ee:	ea59 0101 	orrs.w	r1, r9, r1
 80054f2:	d120      	bne.n	8005536 <_dtoa_r+0xad6>
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	ddec      	ble.n	80054d2 <_dtoa_r+0xa72>
 80054f8:	4659      	mov	r1, fp
 80054fa:	2201      	movs	r2, #1
 80054fc:	4620      	mov	r0, r4
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	f7fe fff8 	bl	80044f4 <__lshift>
 8005504:	4631      	mov	r1, r6
 8005506:	4683      	mov	fp, r0
 8005508:	f7ff f860 	bl	80045cc <__mcmp>
 800550c:	2800      	cmp	r0, #0
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	dc02      	bgt.n	8005518 <_dtoa_r+0xab8>
 8005512:	d1de      	bne.n	80054d2 <_dtoa_r+0xa72>
 8005514:	07da      	lsls	r2, r3, #31
 8005516:	d5dc      	bpl.n	80054d2 <_dtoa_r+0xa72>
 8005518:	2b39      	cmp	r3, #57	; 0x39
 800551a:	d1d8      	bne.n	80054ce <_dtoa_r+0xa6e>
 800551c:	9a02      	ldr	r2, [sp, #8]
 800551e:	2339      	movs	r3, #57	; 0x39
 8005520:	7013      	strb	r3, [r2, #0]
 8005522:	462b      	mov	r3, r5
 8005524:	461d      	mov	r5, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800552c:	2a39      	cmp	r2, #57	; 0x39
 800552e:	d050      	beq.n	80055d2 <_dtoa_r+0xb72>
 8005530:	3201      	adds	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	e745      	b.n	80053c2 <_dtoa_r+0x962>
 8005536:	2a00      	cmp	r2, #0
 8005538:	dd03      	ble.n	8005542 <_dtoa_r+0xae2>
 800553a:	2b39      	cmp	r3, #57	; 0x39
 800553c:	d0ee      	beq.n	800551c <_dtoa_r+0xabc>
 800553e:	3301      	adds	r3, #1
 8005540:	e7c7      	b.n	80054d2 <_dtoa_r+0xa72>
 8005542:	9a01      	ldr	r2, [sp, #4]
 8005544:	9907      	ldr	r1, [sp, #28]
 8005546:	f802 3c01 	strb.w	r3, [r2, #-1]
 800554a:	428a      	cmp	r2, r1
 800554c:	d02a      	beq.n	80055a4 <_dtoa_r+0xb44>
 800554e:	4659      	mov	r1, fp
 8005550:	2300      	movs	r3, #0
 8005552:	220a      	movs	r2, #10
 8005554:	4620      	mov	r0, r4
 8005556:	f7fe fe1d 	bl	8004194 <__multadd>
 800555a:	45b8      	cmp	r8, r7
 800555c:	4683      	mov	fp, r0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	f04f 020a 	mov.w	r2, #10
 8005566:	4641      	mov	r1, r8
 8005568:	4620      	mov	r0, r4
 800556a:	d107      	bne.n	800557c <_dtoa_r+0xb1c>
 800556c:	f7fe fe12 	bl	8004194 <__multadd>
 8005570:	4680      	mov	r8, r0
 8005572:	4607      	mov	r7, r0
 8005574:	9b01      	ldr	r3, [sp, #4]
 8005576:	3301      	adds	r3, #1
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	e775      	b.n	8005468 <_dtoa_r+0xa08>
 800557c:	f7fe fe0a 	bl	8004194 <__multadd>
 8005580:	4639      	mov	r1, r7
 8005582:	4680      	mov	r8, r0
 8005584:	2300      	movs	r3, #0
 8005586:	220a      	movs	r2, #10
 8005588:	4620      	mov	r0, r4
 800558a:	f7fe fe03 	bl	8004194 <__multadd>
 800558e:	4607      	mov	r7, r0
 8005590:	e7f0      	b.n	8005574 <_dtoa_r+0xb14>
 8005592:	f1b9 0f00 	cmp.w	r9, #0
 8005596:	9a00      	ldr	r2, [sp, #0]
 8005598:	bfcc      	ite	gt
 800559a:	464d      	movgt	r5, r9
 800559c:	2501      	movle	r5, #1
 800559e:	4415      	add	r5, r2
 80055a0:	f04f 0800 	mov.w	r8, #0
 80055a4:	4659      	mov	r1, fp
 80055a6:	2201      	movs	r2, #1
 80055a8:	4620      	mov	r0, r4
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	f7fe ffa2 	bl	80044f4 <__lshift>
 80055b0:	4631      	mov	r1, r6
 80055b2:	4683      	mov	fp, r0
 80055b4:	f7ff f80a 	bl	80045cc <__mcmp>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	dcb2      	bgt.n	8005522 <_dtoa_r+0xac2>
 80055bc:	d102      	bne.n	80055c4 <_dtoa_r+0xb64>
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	07db      	lsls	r3, r3, #31
 80055c2:	d4ae      	bmi.n	8005522 <_dtoa_r+0xac2>
 80055c4:	462b      	mov	r3, r5
 80055c6:	461d      	mov	r5, r3
 80055c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055cc:	2a30      	cmp	r2, #48	; 0x30
 80055ce:	d0fa      	beq.n	80055c6 <_dtoa_r+0xb66>
 80055d0:	e6f7      	b.n	80053c2 <_dtoa_r+0x962>
 80055d2:	9a00      	ldr	r2, [sp, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1a5      	bne.n	8005524 <_dtoa_r+0xac4>
 80055d8:	f10a 0a01 	add.w	sl, sl, #1
 80055dc:	2331      	movs	r3, #49	; 0x31
 80055de:	e779      	b.n	80054d4 <_dtoa_r+0xa74>
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <_dtoa_r+0xbd0>)
 80055e2:	f7ff baaf 	b.w	8004b44 <_dtoa_r+0xe4>
 80055e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f47f aa86 	bne.w	8004afa <_dtoa_r+0x9a>
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <_dtoa_r+0xbd4>)
 80055f0:	f7ff baa8 	b.w	8004b44 <_dtoa_r+0xe4>
 80055f4:	f1b9 0f00 	cmp.w	r9, #0
 80055f8:	dc03      	bgt.n	8005602 <_dtoa_r+0xba2>
 80055fa:	9b05      	ldr	r3, [sp, #20]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	f73f aec9 	bgt.w	8005394 <_dtoa_r+0x934>
 8005602:	9d00      	ldr	r5, [sp, #0]
 8005604:	4631      	mov	r1, r6
 8005606:	4658      	mov	r0, fp
 8005608:	f7ff f99e 	bl	8004948 <quorem>
 800560c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005610:	f805 3b01 	strb.w	r3, [r5], #1
 8005614:	9a00      	ldr	r2, [sp, #0]
 8005616:	1aaa      	subs	r2, r5, r2
 8005618:	4591      	cmp	r9, r2
 800561a:	ddba      	ble.n	8005592 <_dtoa_r+0xb32>
 800561c:	4659      	mov	r1, fp
 800561e:	2300      	movs	r3, #0
 8005620:	220a      	movs	r2, #10
 8005622:	4620      	mov	r0, r4
 8005624:	f7fe fdb6 	bl	8004194 <__multadd>
 8005628:	4683      	mov	fp, r0
 800562a:	e7eb      	b.n	8005604 <_dtoa_r+0xba4>
 800562c:	080065a3 	.word	0x080065a3
 8005630:	080066fd 	.word	0x080066fd
 8005634:	080066f0 	.word	0x080066f0

08005638 <fiprintf>:
 8005638:	b40e      	push	{r1, r2, r3}
 800563a:	b503      	push	{r0, r1, lr}
 800563c:	4601      	mov	r1, r0
 800563e:	ab03      	add	r3, sp, #12
 8005640:	4805      	ldr	r0, [pc, #20]	; (8005658 <fiprintf+0x20>)
 8005642:	f853 2b04 	ldr.w	r2, [r3], #4
 8005646:	6800      	ldr	r0, [r0, #0]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	f000 f8a3 	bl	8005794 <_vfiprintf_r>
 800564e:	b002      	add	sp, #8
 8005650:	f85d eb04 	ldr.w	lr, [sp], #4
 8005654:	b003      	add	sp, #12
 8005656:	4770      	bx	lr
 8005658:	2000000c 	.word	0x2000000c

0800565c <malloc>:
 800565c:	4b02      	ldr	r3, [pc, #8]	; (8005668 <malloc+0xc>)
 800565e:	4601      	mov	r1, r0
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	f7ff b8e1 	b.w	8004828 <_malloc_r>
 8005666:	bf00      	nop
 8005668:	2000000c 	.word	0x2000000c

0800566c <memcpy>:
 800566c:	440a      	add	r2, r1
 800566e:	4291      	cmp	r1, r2
 8005670:	f100 33ff 	add.w	r3, r0, #4294967295
 8005674:	d100      	bne.n	8005678 <memcpy+0xc>
 8005676:	4770      	bx	lr
 8005678:	b510      	push	{r4, lr}
 800567a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800567e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005682:	4291      	cmp	r1, r2
 8005684:	d1f9      	bne.n	800567a <memcpy+0xe>
 8005686:	bd10      	pop	{r4, pc}

08005688 <__malloc_lock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_lock+0x8>)
 800568a:	f000 bdc7 	b.w	800621c <__retarget_lock_acquire_recursive>
 800568e:	bf00      	nop
 8005690:	200001f8 	.word	0x200001f8

08005694 <__malloc_unlock>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__malloc_unlock+0x8>)
 8005696:	f000 bdc2 	b.w	800621e <__retarget_lock_release_recursive>
 800569a:	bf00      	nop
 800569c:	200001f8 	.word	0x200001f8

080056a0 <_free_r>:
 80056a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d048      	beq.n	8005738 <_free_r+0x98>
 80056a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056aa:	9001      	str	r0, [sp, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f1a1 0404 	sub.w	r4, r1, #4
 80056b2:	bfb8      	it	lt
 80056b4:	18e4      	addlt	r4, r4, r3
 80056b6:	f7ff ffe7 	bl	8005688 <__malloc_lock>
 80056ba:	4a20      	ldr	r2, [pc, #128]	; (800573c <_free_r+0x9c>)
 80056bc:	9801      	ldr	r0, [sp, #4]
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	4615      	mov	r5, r2
 80056c2:	b933      	cbnz	r3, 80056d2 <_free_r+0x32>
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6014      	str	r4, [r2, #0]
 80056c8:	b003      	add	sp, #12
 80056ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ce:	f7ff bfe1 	b.w	8005694 <__malloc_unlock>
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	d90b      	bls.n	80056ee <_free_r+0x4e>
 80056d6:	6821      	ldr	r1, [r4, #0]
 80056d8:	1862      	adds	r2, r4, r1
 80056da:	4293      	cmp	r3, r2
 80056dc:	bf04      	itt	eq
 80056de:	681a      	ldreq	r2, [r3, #0]
 80056e0:	685b      	ldreq	r3, [r3, #4]
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	bf04      	itt	eq
 80056e6:	1852      	addeq	r2, r2, r1
 80056e8:	6022      	streq	r2, [r4, #0]
 80056ea:	602c      	str	r4, [r5, #0]
 80056ec:	e7ec      	b.n	80056c8 <_free_r+0x28>
 80056ee:	461a      	mov	r2, r3
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b10b      	cbz	r3, 80056f8 <_free_r+0x58>
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d9fa      	bls.n	80056ee <_free_r+0x4e>
 80056f8:	6811      	ldr	r1, [r2, #0]
 80056fa:	1855      	adds	r5, r2, r1
 80056fc:	42a5      	cmp	r5, r4
 80056fe:	d10b      	bne.n	8005718 <_free_r+0x78>
 8005700:	6824      	ldr	r4, [r4, #0]
 8005702:	4421      	add	r1, r4
 8005704:	1854      	adds	r4, r2, r1
 8005706:	42a3      	cmp	r3, r4
 8005708:	6011      	str	r1, [r2, #0]
 800570a:	d1dd      	bne.n	80056c8 <_free_r+0x28>
 800570c:	681c      	ldr	r4, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	6053      	str	r3, [r2, #4]
 8005712:	4421      	add	r1, r4
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	e7d7      	b.n	80056c8 <_free_r+0x28>
 8005718:	d902      	bls.n	8005720 <_free_r+0x80>
 800571a:	230c      	movs	r3, #12
 800571c:	6003      	str	r3, [r0, #0]
 800571e:	e7d3      	b.n	80056c8 <_free_r+0x28>
 8005720:	6825      	ldr	r5, [r4, #0]
 8005722:	1961      	adds	r1, r4, r5
 8005724:	428b      	cmp	r3, r1
 8005726:	bf04      	itt	eq
 8005728:	6819      	ldreq	r1, [r3, #0]
 800572a:	685b      	ldreq	r3, [r3, #4]
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	bf04      	itt	eq
 8005730:	1949      	addeq	r1, r1, r5
 8005732:	6021      	streq	r1, [r4, #0]
 8005734:	6054      	str	r4, [r2, #4]
 8005736:	e7c7      	b.n	80056c8 <_free_r+0x28>
 8005738:	b003      	add	sp, #12
 800573a:	bd30      	pop	{r4, r5, pc}
 800573c:	20000090 	.word	0x20000090

08005740 <__sfputc_r>:
 8005740:	6893      	ldr	r3, [r2, #8]
 8005742:	3b01      	subs	r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	b410      	push	{r4}
 8005748:	6093      	str	r3, [r2, #8]
 800574a:	da08      	bge.n	800575e <__sfputc_r+0x1e>
 800574c:	6994      	ldr	r4, [r2, #24]
 800574e:	42a3      	cmp	r3, r4
 8005750:	db01      	blt.n	8005756 <__sfputc_r+0x16>
 8005752:	290a      	cmp	r1, #10
 8005754:	d103      	bne.n	800575e <__sfputc_r+0x1e>
 8005756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575a:	f000 badf 	b.w	8005d1c <__swbuf_r>
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	1c58      	adds	r0, r3, #1
 8005762:	6010      	str	r0, [r2, #0]
 8005764:	7019      	strb	r1, [r3, #0]
 8005766:	4608      	mov	r0, r1
 8005768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576c:	4770      	bx	lr

0800576e <__sfputs_r>:
 800576e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005770:	4606      	mov	r6, r0
 8005772:	460f      	mov	r7, r1
 8005774:	4614      	mov	r4, r2
 8005776:	18d5      	adds	r5, r2, r3
 8005778:	42ac      	cmp	r4, r5
 800577a:	d101      	bne.n	8005780 <__sfputs_r+0x12>
 800577c:	2000      	movs	r0, #0
 800577e:	e007      	b.n	8005790 <__sfputs_r+0x22>
 8005780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005784:	463a      	mov	r2, r7
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ffda 	bl	8005740 <__sfputc_r>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d1f3      	bne.n	8005778 <__sfputs_r+0xa>
 8005790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005794 <_vfiprintf_r>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	460d      	mov	r5, r1
 800579a:	b09d      	sub	sp, #116	; 0x74
 800579c:	4614      	mov	r4, r2
 800579e:	4698      	mov	r8, r3
 80057a0:	4606      	mov	r6, r0
 80057a2:	b118      	cbz	r0, 80057ac <_vfiprintf_r+0x18>
 80057a4:	6983      	ldr	r3, [r0, #24]
 80057a6:	b90b      	cbnz	r3, 80057ac <_vfiprintf_r+0x18>
 80057a8:	f000 fc9a 	bl	80060e0 <__sinit>
 80057ac:	4b89      	ldr	r3, [pc, #548]	; (80059d4 <_vfiprintf_r+0x240>)
 80057ae:	429d      	cmp	r5, r3
 80057b0:	d11b      	bne.n	80057ea <_vfiprintf_r+0x56>
 80057b2:	6875      	ldr	r5, [r6, #4]
 80057b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b6:	07d9      	lsls	r1, r3, #31
 80057b8:	d405      	bmi.n	80057c6 <_vfiprintf_r+0x32>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	059a      	lsls	r2, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_vfiprintf_r+0x32>
 80057c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c2:	f000 fd2b 	bl	800621c <__retarget_lock_acquire_recursive>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	071b      	lsls	r3, r3, #28
 80057ca:	d501      	bpl.n	80057d0 <_vfiprintf_r+0x3c>
 80057cc:	692b      	ldr	r3, [r5, #16]
 80057ce:	b9eb      	cbnz	r3, 800580c <_vfiprintf_r+0x78>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4630      	mov	r0, r6
 80057d4:	f000 faf4 	bl	8005dc0 <__swsetup_r>
 80057d8:	b1c0      	cbz	r0, 800580c <_vfiprintf_r+0x78>
 80057da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057dc:	07dc      	lsls	r4, r3, #31
 80057de:	d50e      	bpl.n	80057fe <_vfiprintf_r+0x6a>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	b01d      	add	sp, #116	; 0x74
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	4b7b      	ldr	r3, [pc, #492]	; (80059d8 <_vfiprintf_r+0x244>)
 80057ec:	429d      	cmp	r5, r3
 80057ee:	d101      	bne.n	80057f4 <_vfiprintf_r+0x60>
 80057f0:	68b5      	ldr	r5, [r6, #8]
 80057f2:	e7df      	b.n	80057b4 <_vfiprintf_r+0x20>
 80057f4:	4b79      	ldr	r3, [pc, #484]	; (80059dc <_vfiprintf_r+0x248>)
 80057f6:	429d      	cmp	r5, r3
 80057f8:	bf08      	it	eq
 80057fa:	68f5      	ldreq	r5, [r6, #12]
 80057fc:	e7da      	b.n	80057b4 <_vfiprintf_r+0x20>
 80057fe:	89ab      	ldrh	r3, [r5, #12]
 8005800:	0598      	lsls	r0, r3, #22
 8005802:	d4ed      	bmi.n	80057e0 <_vfiprintf_r+0x4c>
 8005804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005806:	f000 fd0a 	bl	800621e <__retarget_lock_release_recursive>
 800580a:	e7e9      	b.n	80057e0 <_vfiprintf_r+0x4c>
 800580c:	2300      	movs	r3, #0
 800580e:	9309      	str	r3, [sp, #36]	; 0x24
 8005810:	2320      	movs	r3, #32
 8005812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005816:	f8cd 800c 	str.w	r8, [sp, #12]
 800581a:	2330      	movs	r3, #48	; 0x30
 800581c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059e0 <_vfiprintf_r+0x24c>
 8005820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005824:	f04f 0901 	mov.w	r9, #1
 8005828:	4623      	mov	r3, r4
 800582a:	469a      	mov	sl, r3
 800582c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005830:	b10a      	cbz	r2, 8005836 <_vfiprintf_r+0xa2>
 8005832:	2a25      	cmp	r2, #37	; 0x25
 8005834:	d1f9      	bne.n	800582a <_vfiprintf_r+0x96>
 8005836:	ebba 0b04 	subs.w	fp, sl, r4
 800583a:	d00b      	beq.n	8005854 <_vfiprintf_r+0xc0>
 800583c:	465b      	mov	r3, fp
 800583e:	4622      	mov	r2, r4
 8005840:	4629      	mov	r1, r5
 8005842:	4630      	mov	r0, r6
 8005844:	f7ff ff93 	bl	800576e <__sfputs_r>
 8005848:	3001      	adds	r0, #1
 800584a:	f000 80aa 	beq.w	80059a2 <_vfiprintf_r+0x20e>
 800584e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005850:	445a      	add	r2, fp
 8005852:	9209      	str	r2, [sp, #36]	; 0x24
 8005854:	f89a 3000 	ldrb.w	r3, [sl]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a2 	beq.w	80059a2 <_vfiprintf_r+0x20e>
 800585e:	2300      	movs	r3, #0
 8005860:	f04f 32ff 	mov.w	r2, #4294967295
 8005864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005868:	f10a 0a01 	add.w	sl, sl, #1
 800586c:	9304      	str	r3, [sp, #16]
 800586e:	9307      	str	r3, [sp, #28]
 8005870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005874:	931a      	str	r3, [sp, #104]	; 0x68
 8005876:	4654      	mov	r4, sl
 8005878:	2205      	movs	r2, #5
 800587a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587e:	4858      	ldr	r0, [pc, #352]	; (80059e0 <_vfiprintf_r+0x24c>)
 8005880:	f7fa fca6 	bl	80001d0 <memchr>
 8005884:	9a04      	ldr	r2, [sp, #16]
 8005886:	b9d8      	cbnz	r0, 80058c0 <_vfiprintf_r+0x12c>
 8005888:	06d1      	lsls	r1, r2, #27
 800588a:	bf44      	itt	mi
 800588c:	2320      	movmi	r3, #32
 800588e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005892:	0713      	lsls	r3, r2, #28
 8005894:	bf44      	itt	mi
 8005896:	232b      	movmi	r3, #43	; 0x2b
 8005898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800589c:	f89a 3000 	ldrb.w	r3, [sl]
 80058a0:	2b2a      	cmp	r3, #42	; 0x2a
 80058a2:	d015      	beq.n	80058d0 <_vfiprintf_r+0x13c>
 80058a4:	9a07      	ldr	r2, [sp, #28]
 80058a6:	4654      	mov	r4, sl
 80058a8:	2000      	movs	r0, #0
 80058aa:	f04f 0c0a 	mov.w	ip, #10
 80058ae:	4621      	mov	r1, r4
 80058b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b4:	3b30      	subs	r3, #48	; 0x30
 80058b6:	2b09      	cmp	r3, #9
 80058b8:	d94e      	bls.n	8005958 <_vfiprintf_r+0x1c4>
 80058ba:	b1b0      	cbz	r0, 80058ea <_vfiprintf_r+0x156>
 80058bc:	9207      	str	r2, [sp, #28]
 80058be:	e014      	b.n	80058ea <_vfiprintf_r+0x156>
 80058c0:	eba0 0308 	sub.w	r3, r0, r8
 80058c4:	fa09 f303 	lsl.w	r3, r9, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	46a2      	mov	sl, r4
 80058ce:	e7d2      	b.n	8005876 <_vfiprintf_r+0xe2>
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	1d19      	adds	r1, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	9103      	str	r1, [sp, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfbb      	ittet	lt
 80058dc:	425b      	neglt	r3, r3
 80058de:	f042 0202 	orrlt.w	r2, r2, #2
 80058e2:	9307      	strge	r3, [sp, #28]
 80058e4:	9307      	strlt	r3, [sp, #28]
 80058e6:	bfb8      	it	lt
 80058e8:	9204      	strlt	r2, [sp, #16]
 80058ea:	7823      	ldrb	r3, [r4, #0]
 80058ec:	2b2e      	cmp	r3, #46	; 0x2e
 80058ee:	d10c      	bne.n	800590a <_vfiprintf_r+0x176>
 80058f0:	7863      	ldrb	r3, [r4, #1]
 80058f2:	2b2a      	cmp	r3, #42	; 0x2a
 80058f4:	d135      	bne.n	8005962 <_vfiprintf_r+0x1ce>
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	1d1a      	adds	r2, r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	9203      	str	r2, [sp, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfb8      	it	lt
 8005902:	f04f 33ff 	movlt.w	r3, #4294967295
 8005906:	3402      	adds	r4, #2
 8005908:	9305      	str	r3, [sp, #20]
 800590a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059f0 <_vfiprintf_r+0x25c>
 800590e:	7821      	ldrb	r1, [r4, #0]
 8005910:	2203      	movs	r2, #3
 8005912:	4650      	mov	r0, sl
 8005914:	f7fa fc5c 	bl	80001d0 <memchr>
 8005918:	b140      	cbz	r0, 800592c <_vfiprintf_r+0x198>
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	eba0 000a 	sub.w	r0, r0, sl
 8005920:	fa03 f000 	lsl.w	r0, r3, r0
 8005924:	9b04      	ldr	r3, [sp, #16]
 8005926:	4303      	orrs	r3, r0
 8005928:	3401      	adds	r4, #1
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	482c      	ldr	r0, [pc, #176]	; (80059e4 <_vfiprintf_r+0x250>)
 8005932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005936:	2206      	movs	r2, #6
 8005938:	f7fa fc4a 	bl	80001d0 <memchr>
 800593c:	2800      	cmp	r0, #0
 800593e:	d03f      	beq.n	80059c0 <_vfiprintf_r+0x22c>
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <_vfiprintf_r+0x254>)
 8005942:	bb1b      	cbnz	r3, 800598c <_vfiprintf_r+0x1f8>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	3307      	adds	r3, #7
 8005948:	f023 0307 	bic.w	r3, r3, #7
 800594c:	3308      	adds	r3, #8
 800594e:	9303      	str	r3, [sp, #12]
 8005950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005952:	443b      	add	r3, r7
 8005954:	9309      	str	r3, [sp, #36]	; 0x24
 8005956:	e767      	b.n	8005828 <_vfiprintf_r+0x94>
 8005958:	fb0c 3202 	mla	r2, ip, r2, r3
 800595c:	460c      	mov	r4, r1
 800595e:	2001      	movs	r0, #1
 8005960:	e7a5      	b.n	80058ae <_vfiprintf_r+0x11a>
 8005962:	2300      	movs	r3, #0
 8005964:	3401      	adds	r4, #1
 8005966:	9305      	str	r3, [sp, #20]
 8005968:	4619      	mov	r1, r3
 800596a:	f04f 0c0a 	mov.w	ip, #10
 800596e:	4620      	mov	r0, r4
 8005970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005974:	3a30      	subs	r2, #48	; 0x30
 8005976:	2a09      	cmp	r2, #9
 8005978:	d903      	bls.n	8005982 <_vfiprintf_r+0x1ee>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0c5      	beq.n	800590a <_vfiprintf_r+0x176>
 800597e:	9105      	str	r1, [sp, #20]
 8005980:	e7c3      	b.n	800590a <_vfiprintf_r+0x176>
 8005982:	fb0c 2101 	mla	r1, ip, r1, r2
 8005986:	4604      	mov	r4, r0
 8005988:	2301      	movs	r3, #1
 800598a:	e7f0      	b.n	800596e <_vfiprintf_r+0x1da>
 800598c:	ab03      	add	r3, sp, #12
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	462a      	mov	r2, r5
 8005992:	4b16      	ldr	r3, [pc, #88]	; (80059ec <_vfiprintf_r+0x258>)
 8005994:	a904      	add	r1, sp, #16
 8005996:	4630      	mov	r0, r6
 8005998:	f3af 8000 	nop.w
 800599c:	4607      	mov	r7, r0
 800599e:	1c78      	adds	r0, r7, #1
 80059a0:	d1d6      	bne.n	8005950 <_vfiprintf_r+0x1bc>
 80059a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a4:	07d9      	lsls	r1, r3, #31
 80059a6:	d405      	bmi.n	80059b4 <_vfiprintf_r+0x220>
 80059a8:	89ab      	ldrh	r3, [r5, #12]
 80059aa:	059a      	lsls	r2, r3, #22
 80059ac:	d402      	bmi.n	80059b4 <_vfiprintf_r+0x220>
 80059ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059b0:	f000 fc35 	bl	800621e <__retarget_lock_release_recursive>
 80059b4:	89ab      	ldrh	r3, [r5, #12]
 80059b6:	065b      	lsls	r3, r3, #25
 80059b8:	f53f af12 	bmi.w	80057e0 <_vfiprintf_r+0x4c>
 80059bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059be:	e711      	b.n	80057e4 <_vfiprintf_r+0x50>
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	462a      	mov	r2, r5
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <_vfiprintf_r+0x258>)
 80059c8:	a904      	add	r1, sp, #16
 80059ca:	4630      	mov	r0, r6
 80059cc:	f000 f880 	bl	8005ad0 <_printf_i>
 80059d0:	e7e4      	b.n	800599c <_vfiprintf_r+0x208>
 80059d2:	bf00      	nop
 80059d4:	080067b4 	.word	0x080067b4
 80059d8:	080067d4 	.word	0x080067d4
 80059dc:	08006794 	.word	0x08006794
 80059e0:	0800675e 	.word	0x0800675e
 80059e4:	08006768 	.word	0x08006768
 80059e8:	00000000 	.word	0x00000000
 80059ec:	0800576f 	.word	0x0800576f
 80059f0:	08006764 	.word	0x08006764

080059f4 <_printf_common>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	4616      	mov	r6, r2
 80059fa:	4699      	mov	r9, r3
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bfb8      	it	lt
 8005a08:	4613      	movlt	r3, r2
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a10:	4607      	mov	r7, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b10a      	cbz	r2, 8005a1a <_printf_common+0x26>
 8005a16:	3301      	adds	r3, #1
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	0699      	lsls	r1, r3, #26
 8005a1e:	bf42      	ittt	mi
 8005a20:	6833      	ldrmi	r3, [r6, #0]
 8005a22:	3302      	addmi	r3, #2
 8005a24:	6033      	strmi	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f015 0506 	ands.w	r5, r5, #6
 8005a2c:	d106      	bne.n	8005a3c <_printf_common+0x48>
 8005a2e:	f104 0a19 	add.w	sl, r4, #25
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	6832      	ldr	r2, [r6, #0]
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dc26      	bgt.n	8005a8a <_printf_common+0x96>
 8005a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a40:	1e13      	subs	r3, r2, #0
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	bf18      	it	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	0692      	lsls	r2, r2, #26
 8005a4a:	d42b      	bmi.n	8005aa4 <_printf_common+0xb0>
 8005a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d01e      	beq.n	8005a98 <_printf_common+0xa4>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	68e5      	ldr	r5, [r4, #12]
 8005a5e:	6832      	ldr	r2, [r6, #0]
 8005a60:	f003 0306 	and.w	r3, r3, #6
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	bf08      	it	eq
 8005a68:	1aad      	subeq	r5, r5, r2
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	bf0c      	ite	eq
 8005a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a74:	2500      	movne	r5, #0
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bfc4      	itt	gt
 8005a7a:	1a9b      	subgt	r3, r3, r2
 8005a7c:	18ed      	addgt	r5, r5, r3
 8005a7e:	2600      	movs	r6, #0
 8005a80:	341a      	adds	r4, #26
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	d11a      	bne.n	8005abc <_printf_common+0xc8>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e008      	b.n	8005a9c <_printf_common+0xa8>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d103      	bne.n	8005aa0 <_printf_common+0xac>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7c6      	b.n	8005a32 <_printf_common+0x3e>
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	2030      	movs	r0, #48	; 0x30
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aae:	4422      	add	r2, r4
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7c7      	b.n	8005a4c <_printf_common+0x58>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0e6      	beq.n	8005a98 <_printf_common+0xa4>
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7d9      	b.n	8005a82 <_printf_common+0x8e>
	...

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4691      	mov	r9, r2
 8005ad8:	7e27      	ldrb	r7, [r4, #24]
 8005ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005adc:	2f78      	cmp	r7, #120	; 0x78
 8005ade:	4680      	mov	r8, r0
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	; 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d8 	beq.w	8005ca2 <_printf_i+0x1d2>
 8005af2:	2f58      	cmp	r7, #88	; 0x58
 8005af4:	f000 80a3 	beq.w	8005c3e <_printf_i+0x16e>
 8005af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a001      	add	r0, pc, #4	; (adr r0, 8005b10 <_printf_i+0x40>)
 8005b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005c6b 	.word	0x08005c6b
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005cab 	.word	0x08005cab
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c73 	.word	0x08005c73
 8005b68:	680b      	ldr	r3, [r1, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	600a      	str	r2, [r1, #0]
 8005b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0a3      	b.n	8005cc4 <_printf_i+0x1f4>
 8005b7c:	6825      	ldr	r5, [r4, #0]
 8005b7e:	6808      	ldr	r0, [r1, #0]
 8005b80:	062e      	lsls	r6, r5, #24
 8005b82:	f100 0304 	add.w	r3, r0, #4
 8005b86:	d50a      	bpl.n	8005b9e <_printf_i+0xce>
 8005b88:	6805      	ldr	r5, [r0, #0]
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	da03      	bge.n	8005b98 <_printf_i+0xc8>
 8005b90:	232d      	movs	r3, #45	; 0x2d
 8005b92:	426d      	negs	r5, r5
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b98:	485e      	ldr	r0, [pc, #376]	; (8005d14 <_printf_i+0x244>)
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e019      	b.n	8005bd2 <_printf_i+0x102>
 8005b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ba2:	6805      	ldr	r5, [r0, #0]
 8005ba4:	600b      	str	r3, [r1, #0]
 8005ba6:	bf18      	it	ne
 8005ba8:	b22d      	sxthne	r5, r5
 8005baa:	e7ef      	b.n	8005b8c <_printf_i+0xbc>
 8005bac:	680b      	ldr	r3, [r1, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	1d18      	adds	r0, r3, #4
 8005bb2:	6008      	str	r0, [r1, #0]
 8005bb4:	0628      	lsls	r0, r5, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0xec>
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0xf2>
 8005bbc:	0669      	lsls	r1, r5, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0xe8>
 8005bc0:	881d      	ldrh	r5, [r3, #0]
 8005bc2:	4854      	ldr	r0, [pc, #336]	; (8005d14 <_printf_i+0x244>)
 8005bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2308      	moveq	r3, #8
 8005bca:	230a      	movne	r3, #10
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bd2:	6866      	ldr	r6, [r4, #4]
 8005bd4:	60a6      	str	r6, [r4, #8]
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	bfa2      	ittt	ge
 8005bda:	6821      	ldrge	r1, [r4, #0]
 8005bdc:	f021 0104 	bicge.w	r1, r1, #4
 8005be0:	6021      	strge	r1, [r4, #0]
 8005be2:	b90d      	cbnz	r5, 8005be8 <_printf_i+0x118>
 8005be4:	2e00      	cmp	r6, #0
 8005be6:	d04d      	beq.n	8005c84 <_printf_i+0x1b4>
 8005be8:	4616      	mov	r6, r2
 8005bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bee:	fb03 5711 	mls	r7, r3, r1, r5
 8005bf2:	5dc7      	ldrb	r7, [r0, r7]
 8005bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf8:	462f      	mov	r7, r5
 8005bfa:	42bb      	cmp	r3, r7
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	d9f4      	bls.n	8005bea <_printf_i+0x11a>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d10b      	bne.n	8005c1c <_printf_i+0x14c>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07df      	lsls	r7, r3, #31
 8005c08:	d508      	bpl.n	8005c1c <_printf_i+0x14c>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	bfde      	ittt	le
 8005c12:	2330      	movle	r3, #48	; 0x30
 8005c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c1c:	1b92      	subs	r2, r2, r6
 8005c1e:	6122      	str	r2, [r4, #16]
 8005c20:	f8cd a000 	str.w	sl, [sp]
 8005c24:	464b      	mov	r3, r9
 8005c26:	aa03      	add	r2, sp, #12
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7ff fee2 	bl	80059f4 <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d14c      	bne.n	8005cce <_printf_i+0x1fe>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	b004      	add	sp, #16
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	4835      	ldr	r0, [pc, #212]	; (8005d14 <_printf_i+0x244>)
 8005c40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	680e      	ldr	r6, [r1, #0]
 8005c48:	061f      	lsls	r7, r3, #24
 8005c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c4e:	600e      	str	r6, [r1, #0]
 8005c50:	d514      	bpl.n	8005c7c <_printf_i+0x1ac>
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f043 0320 	orrmi.w	r3, r3, #32
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b91d      	cbnz	r5, 8005c66 <_printf_i+0x196>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f023 0320 	bic.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2310      	movs	r3, #16
 8005c68:	e7b0      	b.n	8005bcc <_printf_i+0xfc>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2378      	movs	r3, #120	; 0x78
 8005c74:	4828      	ldr	r0, [pc, #160]	; (8005d18 <_printf_i+0x248>)
 8005c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c7a:	e7e3      	b.n	8005c44 <_printf_i+0x174>
 8005c7c:	065e      	lsls	r6, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2ad      	uxthmi	r5, r5
 8005c82:	e7e6      	b.n	8005c52 <_printf_i+0x182>
 8005c84:	4616      	mov	r6, r2
 8005c86:	e7bb      	b.n	8005c00 <_printf_i+0x130>
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	6826      	ldr	r6, [r4, #0]
 8005c8c:	6960      	ldr	r0, [r4, #20]
 8005c8e:	1d1d      	adds	r5, r3, #4
 8005c90:	600d      	str	r5, [r1, #0]
 8005c92:	0635      	lsls	r5, r6, #24
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	d501      	bpl.n	8005c9c <_printf_i+0x1cc>
 8005c98:	6018      	str	r0, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <_printf_i+0x1d2>
 8005c9c:	0671      	lsls	r1, r6, #25
 8005c9e:	d5fb      	bpl.n	8005c98 <_printf_i+0x1c8>
 8005ca0:	8018      	strh	r0, [r3, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	4616      	mov	r6, r2
 8005ca8:	e7ba      	b.n	8005c20 <_printf_i+0x150>
 8005caa:	680b      	ldr	r3, [r1, #0]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	600a      	str	r2, [r1, #0]
 8005cb0:	681e      	ldr	r6, [r3, #0]
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7fa fa8a 	bl	80001d0 <memchr>
 8005cbc:	b108      	cbz	r0, 8005cc2 <_printf_i+0x1f2>
 8005cbe:	1b80      	subs	r0, r0, r6
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	e7a8      	b.n	8005c20 <_printf_i+0x150>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d0ab      	beq.n	8005c34 <_printf_i+0x164>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	d413      	bmi.n	8005d0a <_printf_i+0x23a>
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	bfb8      	it	lt
 8005cea:	4618      	movlt	r0, r3
 8005cec:	e7a4      	b.n	8005c38 <_printf_i+0x168>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d09b      	beq.n	8005c34 <_printf_i+0x164>
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dcf2      	bgt.n	8005cee <_printf_i+0x21e>
 8005d08:	e7eb      	b.n	8005ce2 <_printf_i+0x212>
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	f104 0619 	add.w	r6, r4, #25
 8005d10:	e7f5      	b.n	8005cfe <_printf_i+0x22e>
 8005d12:	bf00      	nop
 8005d14:	0800676f 	.word	0x0800676f
 8005d18:	08006780 	.word	0x08006780

08005d1c <__swbuf_r>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	460e      	mov	r6, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	4605      	mov	r5, r0
 8005d24:	b118      	cbz	r0, 8005d2e <__swbuf_r+0x12>
 8005d26:	6983      	ldr	r3, [r0, #24]
 8005d28:	b90b      	cbnz	r3, 8005d2e <__swbuf_r+0x12>
 8005d2a:	f000 f9d9 	bl	80060e0 <__sinit>
 8005d2e:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <__swbuf_r+0x98>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d12b      	bne.n	8005d8c <__swbuf_r+0x70>
 8005d34:	686c      	ldr	r4, [r5, #4]
 8005d36:	69a3      	ldr	r3, [r4, #24]
 8005d38:	60a3      	str	r3, [r4, #8]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	071a      	lsls	r2, r3, #28
 8005d3e:	d52f      	bpl.n	8005da0 <__swbuf_r+0x84>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	b36b      	cbz	r3, 8005da0 <__swbuf_r+0x84>
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	6820      	ldr	r0, [r4, #0]
 8005d48:	1ac0      	subs	r0, r0, r3
 8005d4a:	6963      	ldr	r3, [r4, #20]
 8005d4c:	b2f6      	uxtb	r6, r6
 8005d4e:	4283      	cmp	r3, r0
 8005d50:	4637      	mov	r7, r6
 8005d52:	dc04      	bgt.n	8005d5e <__swbuf_r+0x42>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f92e 	bl	8005fb8 <_fflush_r>
 8005d5c:	bb30      	cbnz	r0, 8005dac <__swbuf_r+0x90>
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	60a3      	str	r3, [r4, #8]
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	701e      	strb	r6, [r3, #0]
 8005d6c:	6963      	ldr	r3, [r4, #20]
 8005d6e:	3001      	adds	r0, #1
 8005d70:	4283      	cmp	r3, r0
 8005d72:	d004      	beq.n	8005d7e <__swbuf_r+0x62>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	07db      	lsls	r3, r3, #31
 8005d78:	d506      	bpl.n	8005d88 <__swbuf_r+0x6c>
 8005d7a:	2e0a      	cmp	r6, #10
 8005d7c:	d104      	bne.n	8005d88 <__swbuf_r+0x6c>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f919 	bl	8005fb8 <_fflush_r>
 8005d86:	b988      	cbnz	r0, 8005dac <__swbuf_r+0x90>
 8005d88:	4638      	mov	r0, r7
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <__swbuf_r+0x9c>)
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	d101      	bne.n	8005d96 <__swbuf_r+0x7a>
 8005d92:	68ac      	ldr	r4, [r5, #8]
 8005d94:	e7cf      	b.n	8005d36 <__swbuf_r+0x1a>
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <__swbuf_r+0xa0>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	bf08      	it	eq
 8005d9c:	68ec      	ldreq	r4, [r5, #12]
 8005d9e:	e7ca      	b.n	8005d36 <__swbuf_r+0x1a>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 f80c 	bl	8005dc0 <__swsetup_r>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d0cb      	beq.n	8005d44 <__swbuf_r+0x28>
 8005dac:	f04f 37ff 	mov.w	r7, #4294967295
 8005db0:	e7ea      	b.n	8005d88 <__swbuf_r+0x6c>
 8005db2:	bf00      	nop
 8005db4:	080067b4 	.word	0x080067b4
 8005db8:	080067d4 	.word	0x080067d4
 8005dbc:	08006794 	.word	0x08006794

08005dc0 <__swsetup_r>:
 8005dc0:	4b32      	ldr	r3, [pc, #200]	; (8005e8c <__swsetup_r+0xcc>)
 8005dc2:	b570      	push	{r4, r5, r6, lr}
 8005dc4:	681d      	ldr	r5, [r3, #0]
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	b125      	cbz	r5, 8005dd6 <__swsetup_r+0x16>
 8005dcc:	69ab      	ldr	r3, [r5, #24]
 8005dce:	b913      	cbnz	r3, 8005dd6 <__swsetup_r+0x16>
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 f985 	bl	80060e0 <__sinit>
 8005dd6:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <__swsetup_r+0xd0>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	d10f      	bne.n	8005dfc <__swsetup_r+0x3c>
 8005ddc:	686c      	ldr	r4, [r5, #4]
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de4:	0719      	lsls	r1, r3, #28
 8005de6:	d42c      	bmi.n	8005e42 <__swsetup_r+0x82>
 8005de8:	06dd      	lsls	r5, r3, #27
 8005dea:	d411      	bmi.n	8005e10 <__swsetup_r+0x50>
 8005dec:	2309      	movs	r3, #9
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfa:	e03e      	b.n	8005e7a <__swsetup_r+0xba>
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <__swsetup_r+0xd4>)
 8005dfe:	429c      	cmp	r4, r3
 8005e00:	d101      	bne.n	8005e06 <__swsetup_r+0x46>
 8005e02:	68ac      	ldr	r4, [r5, #8]
 8005e04:	e7eb      	b.n	8005dde <__swsetup_r+0x1e>
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <__swsetup_r+0xd8>)
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	bf08      	it	eq
 8005e0c:	68ec      	ldreq	r4, [r5, #12]
 8005e0e:	e7e6      	b.n	8005dde <__swsetup_r+0x1e>
 8005e10:	0758      	lsls	r0, r3, #29
 8005e12:	d512      	bpl.n	8005e3a <__swsetup_r+0x7a>
 8005e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e16:	b141      	cbz	r1, 8005e2a <__swsetup_r+0x6a>
 8005e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d002      	beq.n	8005e26 <__swsetup_r+0x66>
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff fc3d 	bl	80056a0 <_free_r>
 8005e26:	2300      	movs	r3, #0
 8005e28:	6363      	str	r3, [r4, #52]	; 0x34
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	2300      	movs	r3, #0
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f043 0308 	orr.w	r3, r3, #8
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	b94b      	cbnz	r3, 8005e5a <__swsetup_r+0x9a>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e50:	d003      	beq.n	8005e5a <__swsetup_r+0x9a>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4630      	mov	r0, r6
 8005e56:	f000 fa07 	bl	8006268 <__smakebuf_r>
 8005e5a:	89a0      	ldrh	r0, [r4, #12]
 8005e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e60:	f010 0301 	ands.w	r3, r0, #1
 8005e64:	d00a      	beq.n	8005e7c <__swsetup_r+0xbc>
 8005e66:	2300      	movs	r3, #0
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	6963      	ldr	r3, [r4, #20]
 8005e6c:	425b      	negs	r3, r3
 8005e6e:	61a3      	str	r3, [r4, #24]
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	b943      	cbnz	r3, 8005e86 <__swsetup_r+0xc6>
 8005e74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e78:	d1ba      	bne.n	8005df0 <__swsetup_r+0x30>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	0781      	lsls	r1, r0, #30
 8005e7e:	bf58      	it	pl
 8005e80:	6963      	ldrpl	r3, [r4, #20]
 8005e82:	60a3      	str	r3, [r4, #8]
 8005e84:	e7f4      	b.n	8005e70 <__swsetup_r+0xb0>
 8005e86:	2000      	movs	r0, #0
 8005e88:	e7f7      	b.n	8005e7a <__swsetup_r+0xba>
 8005e8a:	bf00      	nop
 8005e8c:	2000000c 	.word	0x2000000c
 8005e90:	080067b4 	.word	0x080067b4
 8005e94:	080067d4 	.word	0x080067d4
 8005e98:	08006794 	.word	0x08006794

08005e9c <abort>:
 8005e9c:	b508      	push	{r3, lr}
 8005e9e:	2006      	movs	r0, #6
 8005ea0:	f000 fa4a 	bl	8006338 <raise>
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	f7fb f9cd 	bl	8001244 <_exit>
	...

08005eac <__sflush_r>:
 8005eac:	898a      	ldrh	r2, [r1, #12]
 8005eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	0710      	lsls	r0, r2, #28
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	d458      	bmi.n	8005f6c <__sflush_r+0xc0>
 8005eba:	684b      	ldr	r3, [r1, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc05      	bgt.n	8005ecc <__sflush_r+0x20>
 8005ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dc02      	bgt.n	8005ecc <__sflush_r+0x20>
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d0f9      	beq.n	8005ec6 <__sflush_r+0x1a>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ed8:	682f      	ldr	r7, [r5, #0]
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	d032      	beq.n	8005f44 <__sflush_r+0x98>
 8005ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	075a      	lsls	r2, r3, #29
 8005ee4:	d505      	bpl.n	8005ef2 <__sflush_r+0x46>
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	1ac0      	subs	r0, r0, r3
 8005eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eec:	b10b      	cbz	r3, 8005ef2 <__sflush_r+0x46>
 8005eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ef0:	1ac0      	subs	r0, r0, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef8:	6a21      	ldr	r1, [r4, #32]
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b0      	blx	r6
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	d106      	bne.n	8005f12 <__sflush_r+0x66>
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	291d      	cmp	r1, #29
 8005f08:	d82c      	bhi.n	8005f64 <__sflush_r+0xb8>
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <__sflush_r+0x108>)
 8005f0c:	40ca      	lsrs	r2, r1
 8005f0e:	07d6      	lsls	r6, r2, #31
 8005f10:	d528      	bpl.n	8005f64 <__sflush_r+0xb8>
 8005f12:	2200      	movs	r2, #0
 8005f14:	6062      	str	r2, [r4, #4]
 8005f16:	04d9      	lsls	r1, r3, #19
 8005f18:	6922      	ldr	r2, [r4, #16]
 8005f1a:	6022      	str	r2, [r4, #0]
 8005f1c:	d504      	bpl.n	8005f28 <__sflush_r+0x7c>
 8005f1e:	1c42      	adds	r2, r0, #1
 8005f20:	d101      	bne.n	8005f26 <__sflush_r+0x7a>
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	b903      	cbnz	r3, 8005f28 <__sflush_r+0x7c>
 8005f26:	6560      	str	r0, [r4, #84]	; 0x54
 8005f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f2a:	602f      	str	r7, [r5, #0]
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	d0ca      	beq.n	8005ec6 <__sflush_r+0x1a>
 8005f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f34:	4299      	cmp	r1, r3
 8005f36:	d002      	beq.n	8005f3e <__sflush_r+0x92>
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff fbb1 	bl	80056a0 <_free_r>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	6360      	str	r0, [r4, #52]	; 0x34
 8005f42:	e7c1      	b.n	8005ec8 <__sflush_r+0x1c>
 8005f44:	6a21      	ldr	r1, [r4, #32]
 8005f46:	2301      	movs	r3, #1
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b0      	blx	r6
 8005f4c:	1c41      	adds	r1, r0, #1
 8005f4e:	d1c7      	bne.n	8005ee0 <__sflush_r+0x34>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0c4      	beq.n	8005ee0 <__sflush_r+0x34>
 8005f56:	2b1d      	cmp	r3, #29
 8005f58:	d001      	beq.n	8005f5e <__sflush_r+0xb2>
 8005f5a:	2b16      	cmp	r3, #22
 8005f5c:	d101      	bne.n	8005f62 <__sflush_r+0xb6>
 8005f5e:	602f      	str	r7, [r5, #0]
 8005f60:	e7b1      	b.n	8005ec6 <__sflush_r+0x1a>
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	e7ad      	b.n	8005ec8 <__sflush_r+0x1c>
 8005f6c:	690f      	ldr	r7, [r1, #16]
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	d0a9      	beq.n	8005ec6 <__sflush_r+0x1a>
 8005f72:	0793      	lsls	r3, r2, #30
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	bf08      	it	eq
 8005f78:	694b      	ldreq	r3, [r1, #20]
 8005f7a:	600f      	str	r7, [r1, #0]
 8005f7c:	bf18      	it	ne
 8005f7e:	2300      	movne	r3, #0
 8005f80:	eba6 0807 	sub.w	r8, r6, r7
 8005f84:	608b      	str	r3, [r1, #8]
 8005f86:	f1b8 0f00 	cmp.w	r8, #0
 8005f8a:	dd9c      	ble.n	8005ec6 <__sflush_r+0x1a>
 8005f8c:	6a21      	ldr	r1, [r4, #32]
 8005f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f90:	4643      	mov	r3, r8
 8005f92:	463a      	mov	r2, r7
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b0      	blx	r6
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	dc06      	bgt.n	8005faa <__sflush_r+0xfe>
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	e78e      	b.n	8005ec8 <__sflush_r+0x1c>
 8005faa:	4407      	add	r7, r0
 8005fac:	eba8 0800 	sub.w	r8, r8, r0
 8005fb0:	e7e9      	b.n	8005f86 <__sflush_r+0xda>
 8005fb2:	bf00      	nop
 8005fb4:	20400001 	.word	0x20400001

08005fb8 <_fflush_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	690b      	ldr	r3, [r1, #16]
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	b913      	cbnz	r3, 8005fc8 <_fflush_r+0x10>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	b118      	cbz	r0, 8005fd2 <_fflush_r+0x1a>
 8005fca:	6983      	ldr	r3, [r0, #24]
 8005fcc:	b90b      	cbnz	r3, 8005fd2 <_fflush_r+0x1a>
 8005fce:	f000 f887 	bl	80060e0 <__sinit>
 8005fd2:	4b14      	ldr	r3, [pc, #80]	; (8006024 <_fflush_r+0x6c>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	d11b      	bne.n	8006010 <_fflush_r+0x58>
 8005fd8:	686c      	ldr	r4, [r5, #4]
 8005fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0ef      	beq.n	8005fc2 <_fflush_r+0xa>
 8005fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fe4:	07d0      	lsls	r0, r2, #31
 8005fe6:	d404      	bmi.n	8005ff2 <_fflush_r+0x3a>
 8005fe8:	0599      	lsls	r1, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_fflush_r+0x3a>
 8005fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fee:	f000 f915 	bl	800621c <__retarget_lock_acquire_recursive>
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	f7ff ff59 	bl	8005eac <__sflush_r>
 8005ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ffc:	07da      	lsls	r2, r3, #31
 8005ffe:	4605      	mov	r5, r0
 8006000:	d4e0      	bmi.n	8005fc4 <_fflush_r+0xc>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	d4dd      	bmi.n	8005fc4 <_fflush_r+0xc>
 8006008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800600a:	f000 f908 	bl	800621e <__retarget_lock_release_recursive>
 800600e:	e7d9      	b.n	8005fc4 <_fflush_r+0xc>
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <_fflush_r+0x70>)
 8006012:	429c      	cmp	r4, r3
 8006014:	d101      	bne.n	800601a <_fflush_r+0x62>
 8006016:	68ac      	ldr	r4, [r5, #8]
 8006018:	e7df      	b.n	8005fda <_fflush_r+0x22>
 800601a:	4b04      	ldr	r3, [pc, #16]	; (800602c <_fflush_r+0x74>)
 800601c:	429c      	cmp	r4, r3
 800601e:	bf08      	it	eq
 8006020:	68ec      	ldreq	r4, [r5, #12]
 8006022:	e7da      	b.n	8005fda <_fflush_r+0x22>
 8006024:	080067b4 	.word	0x080067b4
 8006028:	080067d4 	.word	0x080067d4
 800602c:	08006794 	.word	0x08006794

08006030 <std>:
 8006030:	2300      	movs	r3, #0
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
 8006036:	e9c0 3300 	strd	r3, r3, [r0]
 800603a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800603e:	6083      	str	r3, [r0, #8]
 8006040:	8181      	strh	r1, [r0, #12]
 8006042:	6643      	str	r3, [r0, #100]	; 0x64
 8006044:	81c2      	strh	r2, [r0, #14]
 8006046:	6183      	str	r3, [r0, #24]
 8006048:	4619      	mov	r1, r3
 800604a:	2208      	movs	r2, #8
 800604c:	305c      	adds	r0, #92	; 0x5c
 800604e:	f7fd fef1 	bl	8003e34 <memset>
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <std+0x38>)
 8006054:	6263      	str	r3, [r4, #36]	; 0x24
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <std+0x3c>)
 8006058:	62a3      	str	r3, [r4, #40]	; 0x28
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <std+0x40>)
 800605c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <std+0x44>)
 8006060:	6224      	str	r4, [r4, #32]
 8006062:	6323      	str	r3, [r4, #48]	; 0x30
 8006064:	bd10      	pop	{r4, pc}
 8006066:	bf00      	nop
 8006068:	08006371 	.word	0x08006371
 800606c:	08006393 	.word	0x08006393
 8006070:	080063cb 	.word	0x080063cb
 8006074:	080063ef 	.word	0x080063ef

08006078 <_cleanup_r>:
 8006078:	4901      	ldr	r1, [pc, #4]	; (8006080 <_cleanup_r+0x8>)
 800607a:	f000 b8af 	b.w	80061dc <_fwalk_reent>
 800607e:	bf00      	nop
 8006080:	08005fb9 	.word	0x08005fb9

08006084 <__sfmoreglue>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	1e4a      	subs	r2, r1, #1
 8006088:	2568      	movs	r5, #104	; 0x68
 800608a:	4355      	muls	r5, r2
 800608c:	460e      	mov	r6, r1
 800608e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006092:	f7fe fbc9 	bl	8004828 <_malloc_r>
 8006096:	4604      	mov	r4, r0
 8006098:	b140      	cbz	r0, 80060ac <__sfmoreglue+0x28>
 800609a:	2100      	movs	r1, #0
 800609c:	e9c0 1600 	strd	r1, r6, [r0]
 80060a0:	300c      	adds	r0, #12
 80060a2:	60a0      	str	r0, [r4, #8]
 80060a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060a8:	f7fd fec4 	bl	8003e34 <memset>
 80060ac:	4620      	mov	r0, r4
 80060ae:	bd70      	pop	{r4, r5, r6, pc}

080060b0 <__sfp_lock_acquire>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__sfp_lock_acquire+0x8>)
 80060b2:	f000 b8b3 	b.w	800621c <__retarget_lock_acquire_recursive>
 80060b6:	bf00      	nop
 80060b8:	200001fc 	.word	0x200001fc

080060bc <__sfp_lock_release>:
 80060bc:	4801      	ldr	r0, [pc, #4]	; (80060c4 <__sfp_lock_release+0x8>)
 80060be:	f000 b8ae 	b.w	800621e <__retarget_lock_release_recursive>
 80060c2:	bf00      	nop
 80060c4:	200001fc 	.word	0x200001fc

080060c8 <__sinit_lock_acquire>:
 80060c8:	4801      	ldr	r0, [pc, #4]	; (80060d0 <__sinit_lock_acquire+0x8>)
 80060ca:	f000 b8a7 	b.w	800621c <__retarget_lock_acquire_recursive>
 80060ce:	bf00      	nop
 80060d0:	200001f7 	.word	0x200001f7

080060d4 <__sinit_lock_release>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__sinit_lock_release+0x8>)
 80060d6:	f000 b8a2 	b.w	800621e <__retarget_lock_release_recursive>
 80060da:	bf00      	nop
 80060dc:	200001f7 	.word	0x200001f7

080060e0 <__sinit>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4604      	mov	r4, r0
 80060e4:	f7ff fff0 	bl	80060c8 <__sinit_lock_acquire>
 80060e8:	69a3      	ldr	r3, [r4, #24]
 80060ea:	b11b      	cbz	r3, 80060f4 <__sinit+0x14>
 80060ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f0:	f7ff bff0 	b.w	80060d4 <__sinit_lock_release>
 80060f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060f8:	6523      	str	r3, [r4, #80]	; 0x50
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <__sinit+0x68>)
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <__sinit+0x6c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	62a2      	str	r2, [r4, #40]	; 0x28
 8006102:	42a3      	cmp	r3, r4
 8006104:	bf04      	itt	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	61a3      	streq	r3, [r4, #24]
 800610a:	4620      	mov	r0, r4
 800610c:	f000 f820 	bl	8006150 <__sfp>
 8006110:	6060      	str	r0, [r4, #4]
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f81c 	bl	8006150 <__sfp>
 8006118:	60a0      	str	r0, [r4, #8]
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f818 	bl	8006150 <__sfp>
 8006120:	2200      	movs	r2, #0
 8006122:	60e0      	str	r0, [r4, #12]
 8006124:	2104      	movs	r1, #4
 8006126:	6860      	ldr	r0, [r4, #4]
 8006128:	f7ff ff82 	bl	8006030 <std>
 800612c:	68a0      	ldr	r0, [r4, #8]
 800612e:	2201      	movs	r2, #1
 8006130:	2109      	movs	r1, #9
 8006132:	f7ff ff7d 	bl	8006030 <std>
 8006136:	68e0      	ldr	r0, [r4, #12]
 8006138:	2202      	movs	r2, #2
 800613a:	2112      	movs	r1, #18
 800613c:	f7ff ff78 	bl	8006030 <std>
 8006140:	2301      	movs	r3, #1
 8006142:	61a3      	str	r3, [r4, #24]
 8006144:	e7d2      	b.n	80060ec <__sinit+0xc>
 8006146:	bf00      	nop
 8006148:	08006528 	.word	0x08006528
 800614c:	08006079 	.word	0x08006079

08006150 <__sfp>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	4607      	mov	r7, r0
 8006154:	f7ff ffac 	bl	80060b0 <__sfp_lock_acquire>
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <__sfp+0x84>)
 800615a:	681e      	ldr	r6, [r3, #0]
 800615c:	69b3      	ldr	r3, [r6, #24]
 800615e:	b913      	cbnz	r3, 8006166 <__sfp+0x16>
 8006160:	4630      	mov	r0, r6
 8006162:	f7ff ffbd 	bl	80060e0 <__sinit>
 8006166:	3648      	adds	r6, #72	; 0x48
 8006168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800616c:	3b01      	subs	r3, #1
 800616e:	d503      	bpl.n	8006178 <__sfp+0x28>
 8006170:	6833      	ldr	r3, [r6, #0]
 8006172:	b30b      	cbz	r3, 80061b8 <__sfp+0x68>
 8006174:	6836      	ldr	r6, [r6, #0]
 8006176:	e7f7      	b.n	8006168 <__sfp+0x18>
 8006178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800617c:	b9d5      	cbnz	r5, 80061b4 <__sfp+0x64>
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <__sfp+0x88>)
 8006180:	60e3      	str	r3, [r4, #12]
 8006182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006186:	6665      	str	r5, [r4, #100]	; 0x64
 8006188:	f000 f847 	bl	800621a <__retarget_lock_init_recursive>
 800618c:	f7ff ff96 	bl	80060bc <__sfp_lock_release>
 8006190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006198:	6025      	str	r5, [r4, #0]
 800619a:	61a5      	str	r5, [r4, #24]
 800619c:	2208      	movs	r2, #8
 800619e:	4629      	mov	r1, r5
 80061a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061a4:	f7fd fe46 	bl	8003e34 <memset>
 80061a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061b0:	4620      	mov	r0, r4
 80061b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b4:	3468      	adds	r4, #104	; 0x68
 80061b6:	e7d9      	b.n	800616c <__sfp+0x1c>
 80061b8:	2104      	movs	r1, #4
 80061ba:	4638      	mov	r0, r7
 80061bc:	f7ff ff62 	bl	8006084 <__sfmoreglue>
 80061c0:	4604      	mov	r4, r0
 80061c2:	6030      	str	r0, [r6, #0]
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d1d5      	bne.n	8006174 <__sfp+0x24>
 80061c8:	f7ff ff78 	bl	80060bc <__sfp_lock_release>
 80061cc:	230c      	movs	r3, #12
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	e7ee      	b.n	80061b0 <__sfp+0x60>
 80061d2:	bf00      	nop
 80061d4:	08006528 	.word	0x08006528
 80061d8:	ffff0001 	.word	0xffff0001

080061dc <_fwalk_reent>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4606      	mov	r6, r0
 80061e2:	4688      	mov	r8, r1
 80061e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061e8:	2700      	movs	r7, #0
 80061ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ee:	f1b9 0901 	subs.w	r9, r9, #1
 80061f2:	d505      	bpl.n	8006200 <_fwalk_reent+0x24>
 80061f4:	6824      	ldr	r4, [r4, #0]
 80061f6:	2c00      	cmp	r4, #0
 80061f8:	d1f7      	bne.n	80061ea <_fwalk_reent+0xe>
 80061fa:	4638      	mov	r0, r7
 80061fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006200:	89ab      	ldrh	r3, [r5, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d907      	bls.n	8006216 <_fwalk_reent+0x3a>
 8006206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800620a:	3301      	adds	r3, #1
 800620c:	d003      	beq.n	8006216 <_fwalk_reent+0x3a>
 800620e:	4629      	mov	r1, r5
 8006210:	4630      	mov	r0, r6
 8006212:	47c0      	blx	r8
 8006214:	4307      	orrs	r7, r0
 8006216:	3568      	adds	r5, #104	; 0x68
 8006218:	e7e9      	b.n	80061ee <_fwalk_reent+0x12>

0800621a <__retarget_lock_init_recursive>:
 800621a:	4770      	bx	lr

0800621c <__retarget_lock_acquire_recursive>:
 800621c:	4770      	bx	lr

0800621e <__retarget_lock_release_recursive>:
 800621e:	4770      	bx	lr

08006220 <__swhatbuf_r>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	460e      	mov	r6, r1
 8006224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006228:	2900      	cmp	r1, #0
 800622a:	b096      	sub	sp, #88	; 0x58
 800622c:	4614      	mov	r4, r2
 800622e:	461d      	mov	r5, r3
 8006230:	da07      	bge.n	8006242 <__swhatbuf_r+0x22>
 8006232:	2300      	movs	r3, #0
 8006234:	602b      	str	r3, [r5, #0]
 8006236:	89b3      	ldrh	r3, [r6, #12]
 8006238:	061a      	lsls	r2, r3, #24
 800623a:	d410      	bmi.n	800625e <__swhatbuf_r+0x3e>
 800623c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006240:	e00e      	b.n	8006260 <__swhatbuf_r+0x40>
 8006242:	466a      	mov	r2, sp
 8006244:	f000 f8fa 	bl	800643c <_fstat_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	dbf2      	blt.n	8006232 <__swhatbuf_r+0x12>
 800624c:	9a01      	ldr	r2, [sp, #4]
 800624e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006256:	425a      	negs	r2, r3
 8006258:	415a      	adcs	r2, r3
 800625a:	602a      	str	r2, [r5, #0]
 800625c:	e7ee      	b.n	800623c <__swhatbuf_r+0x1c>
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	2000      	movs	r0, #0
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	b016      	add	sp, #88	; 0x58
 8006266:	bd70      	pop	{r4, r5, r6, pc}

08006268 <__smakebuf_r>:
 8006268:	898b      	ldrh	r3, [r1, #12]
 800626a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800626c:	079d      	lsls	r5, r3, #30
 800626e:	4606      	mov	r6, r0
 8006270:	460c      	mov	r4, r1
 8006272:	d507      	bpl.n	8006284 <__smakebuf_r+0x1c>
 8006274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	2301      	movs	r3, #1
 800627e:	6163      	str	r3, [r4, #20]
 8006280:	b002      	add	sp, #8
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	ab01      	add	r3, sp, #4
 8006286:	466a      	mov	r2, sp
 8006288:	f7ff ffca 	bl	8006220 <__swhatbuf_r>
 800628c:	9900      	ldr	r1, [sp, #0]
 800628e:	4605      	mov	r5, r0
 8006290:	4630      	mov	r0, r6
 8006292:	f7fe fac9 	bl	8004828 <_malloc_r>
 8006296:	b948      	cbnz	r0, 80062ac <__smakebuf_r+0x44>
 8006298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629c:	059a      	lsls	r2, r3, #22
 800629e:	d4ef      	bmi.n	8006280 <__smakebuf_r+0x18>
 80062a0:	f023 0303 	bic.w	r3, r3, #3
 80062a4:	f043 0302 	orr.w	r3, r3, #2
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	e7e3      	b.n	8006274 <__smakebuf_r+0xc>
 80062ac:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <__smakebuf_r+0x7c>)
 80062ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	6020      	str	r0, [r4, #0]
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	9b00      	ldr	r3, [sp, #0]
 80062bc:	6163      	str	r3, [r4, #20]
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	6120      	str	r0, [r4, #16]
 80062c2:	b15b      	cbz	r3, 80062dc <__smakebuf_r+0x74>
 80062c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 f8c9 	bl	8006460 <_isatty_r>
 80062ce:	b128      	cbz	r0, 80062dc <__smakebuf_r+0x74>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	89a0      	ldrh	r0, [r4, #12]
 80062de:	4305      	orrs	r5, r0
 80062e0:	81a5      	strh	r5, [r4, #12]
 80062e2:	e7cd      	b.n	8006280 <__smakebuf_r+0x18>
 80062e4:	08006079 	.word	0x08006079

080062e8 <_raise_r>:
 80062e8:	291f      	cmp	r1, #31
 80062ea:	b538      	push	{r3, r4, r5, lr}
 80062ec:	4604      	mov	r4, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	d904      	bls.n	80062fc <_raise_r+0x14>
 80062f2:	2316      	movs	r3, #22
 80062f4:	6003      	str	r3, [r0, #0]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062fe:	b112      	cbz	r2, 8006306 <_raise_r+0x1e>
 8006300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006304:	b94b      	cbnz	r3, 800631a <_raise_r+0x32>
 8006306:	4620      	mov	r0, r4
 8006308:	f000 f830 	bl	800636c <_getpid_r>
 800630c:	462a      	mov	r2, r5
 800630e:	4601      	mov	r1, r0
 8006310:	4620      	mov	r0, r4
 8006312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006316:	f000 b817 	b.w	8006348 <_kill_r>
 800631a:	2b01      	cmp	r3, #1
 800631c:	d00a      	beq.n	8006334 <_raise_r+0x4c>
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	d103      	bne.n	800632a <_raise_r+0x42>
 8006322:	2316      	movs	r3, #22
 8006324:	6003      	str	r3, [r0, #0]
 8006326:	2001      	movs	r0, #1
 8006328:	e7e7      	b.n	80062fa <_raise_r+0x12>
 800632a:	2400      	movs	r4, #0
 800632c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006330:	4628      	mov	r0, r5
 8006332:	4798      	blx	r3
 8006334:	2000      	movs	r0, #0
 8006336:	e7e0      	b.n	80062fa <_raise_r+0x12>

08006338 <raise>:
 8006338:	4b02      	ldr	r3, [pc, #8]	; (8006344 <raise+0xc>)
 800633a:	4601      	mov	r1, r0
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	f7ff bfd3 	b.w	80062e8 <_raise_r>
 8006342:	bf00      	nop
 8006344:	2000000c 	.word	0x2000000c

08006348 <_kill_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d07      	ldr	r5, [pc, #28]	; (8006368 <_kill_r+0x20>)
 800634c:	2300      	movs	r3, #0
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	f7fa ff65 	bl	8001224 <_kill>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d102      	bne.n	8006364 <_kill_r+0x1c>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	b103      	cbz	r3, 8006364 <_kill_r+0x1c>
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	bd38      	pop	{r3, r4, r5, pc}
 8006366:	bf00      	nop
 8006368:	200001f0 	.word	0x200001f0

0800636c <_getpid_r>:
 800636c:	f7fa bf52 	b.w	8001214 <_getpid>

08006370 <__sread>:
 8006370:	b510      	push	{r4, lr}
 8006372:	460c      	mov	r4, r1
 8006374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006378:	f000 f894 	bl	80064a4 <_read_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	bfab      	itete	ge
 8006380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006382:	89a3      	ldrhlt	r3, [r4, #12]
 8006384:	181b      	addge	r3, r3, r0
 8006386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800638a:	bfac      	ite	ge
 800638c:	6563      	strge	r3, [r4, #84]	; 0x54
 800638e:	81a3      	strhlt	r3, [r4, #12]
 8006390:	bd10      	pop	{r4, pc}

08006392 <__swrite>:
 8006392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006396:	461f      	mov	r7, r3
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	05db      	lsls	r3, r3, #23
 800639c:	4605      	mov	r5, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	4616      	mov	r6, r2
 80063a2:	d505      	bpl.n	80063b0 <__swrite+0x1e>
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	2302      	movs	r3, #2
 80063aa:	2200      	movs	r2, #0
 80063ac:	f000 f868 	bl	8006480 <_lseek_r>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	4632      	mov	r2, r6
 80063be:	463b      	mov	r3, r7
 80063c0:	4628      	mov	r0, r5
 80063c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	f000 b817 	b.w	80063f8 <_write_r>

080063ca <__sseek>:
 80063ca:	b510      	push	{r4, lr}
 80063cc:	460c      	mov	r4, r1
 80063ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d2:	f000 f855 	bl	8006480 <_lseek_r>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	bf15      	itete	ne
 80063dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063e6:	81a3      	strheq	r3, [r4, #12]
 80063e8:	bf18      	it	ne
 80063ea:	81a3      	strhne	r3, [r4, #12]
 80063ec:	bd10      	pop	{r4, pc}

080063ee <__sclose>:
 80063ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f2:	f000 b813 	b.w	800641c <_close_r>
	...

080063f8 <_write_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	; (8006418 <_write_r+0x20>)
 80063fc:	4604      	mov	r4, r0
 80063fe:	4608      	mov	r0, r1
 8006400:	4611      	mov	r1, r2
 8006402:	2200      	movs	r2, #0
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f7fa ff43 	bl	8001292 <_write>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_write_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_write_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	200001f0 	.word	0x200001f0

0800641c <_close_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d06      	ldr	r5, [pc, #24]	; (8006438 <_close_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f7fa ff4f 	bl	80012ca <_close>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_close_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_close_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	200001f0 	.word	0x200001f0

0800643c <_fstat_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	; (800645c <_fstat_r+0x20>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	f7fa ff4a 	bl	80012e2 <_fstat>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d102      	bne.n	8006458 <_fstat_r+0x1c>
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	b103      	cbz	r3, 8006458 <_fstat_r+0x1c>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	200001f0 	.word	0x200001f0

08006460 <_isatty_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	; (800647c <_isatty_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fa ff49 	bl	8001302 <_isatty>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_isatty_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_isatty_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	200001f0 	.word	0x200001f0

08006480 <_lseek_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d07      	ldr	r5, [pc, #28]	; (80064a0 <_lseek_r+0x20>)
 8006484:	4604      	mov	r4, r0
 8006486:	4608      	mov	r0, r1
 8006488:	4611      	mov	r1, r2
 800648a:	2200      	movs	r2, #0
 800648c:	602a      	str	r2, [r5, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f7fa ff42 	bl	8001318 <_lseek>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_lseek_r+0x1e>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_lseek_r+0x1e>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	200001f0 	.word	0x200001f0

080064a4 <_read_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d07      	ldr	r5, [pc, #28]	; (80064c4 <_read_r+0x20>)
 80064a8:	4604      	mov	r4, r0
 80064aa:	4608      	mov	r0, r1
 80064ac:	4611      	mov	r1, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	602a      	str	r2, [r5, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7fa fed0 	bl	8001258 <_read>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_read_r+0x1e>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_read_r+0x1e>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	200001f0 	.word	0x200001f0

080064c8 <_init>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr

080064d4 <_fini>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr
