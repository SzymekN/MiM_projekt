
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080064d0  080064d0  000164d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ec  080067ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080067ec  080067ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067ec  080067ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000190  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f28  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000264d  00000000  00000000  00031fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021efa  00000000  00000000  00036018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116b9  00000000  00000000  00057f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e7d  00000000  00000000  000695cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012e448  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004724  00000000  00000000  0012e49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064b8 	.word	0x080064b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080064b8 	.word	0x080064b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <ds18b20_read_address>:
#define DS18B20_CONVERT_T          0x44 // inicjalizacja konwersji temperatury
#define DS18B20_READ_SCRATCHPAD    0xBE // odczyt danych z czujnika


HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8000b74:	f000 fd84 	bl	8001680 <wire_reset>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e021      	b.n	8000bc6 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8000b82:	2033      	movs	r0, #51	; 0x33
 8000b84:	f000 fe06 	bl	8001794 <wire_write>

  // odczytywanie adresu
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e009      	b.n	8000ba2 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	18d4      	adds	r4, r2, r3
 8000b94:	f000 fdbc 	bl	8001710 <wire_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	ddf2      	ble.n	8000b8e <ds18b20_read_address+0x22>

  // sprawdzanie sumy kontrolnej
  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000ba8:	2107      	movs	r1, #7
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fe3a 	bl	8001824 <wire_crc>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3307      	adds	r3, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d101      	bne.n	8000bc4 <ds18b20_read_address+0x58>
    return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e000      	b.n	8000bc6 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <send_cmd>:

static HAL_StatusTypeDef send_cmd(uint8_t cmd)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if (wire_reset() != HAL_OK)
 8000bd8:	f000 fd52 	bl	8001680 <wire_reset>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <send_cmd+0x18>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e007      	b.n	8000bf6 <send_cmd+0x28>

  // komunikacja z jedynym czujnikiem
  wire_write(DS18B20_SKIP_ROM);
 8000be6:	20cc      	movs	r0, #204	; 0xcc
 8000be8:	f000 fdd4 	bl	8001794 <wire_write>

  wire_write(cmd);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fdd0 	bl	8001794 <wire_write>
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure()
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  return send_cmd(DS18B20_CONVERT_T);
 8000c02:	2044      	movs	r0, #68	; 0x44
 8000c04:	f7ff ffe3 	bl	8000bce <send_cmd>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(uint8_t* scratchpad)
{
 8000c0e:	b590      	push	{r4, r7, lr}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (send_cmd(DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000c16:	20be      	movs	r0, #190	; 0xbe
 8000c18:	f7ff ffd9 	bl	8000bce <send_cmd>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <ds18b20_read_scratchpad+0x18>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e01e      	b.n	8000c64 <ds18b20_read_scratchpad+0x56>

  // odczyt danych z czujnika
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e009      	b.n	8000c40 <ds18b20_read_scratchpad+0x32>
    scratchpad[i] = wire_read();
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	18d4      	adds	r4, r2, r3
 8000c32:	f000 fd6d 	bl	8001710 <wire_read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	ddf2      	ble.n	8000c2c <ds18b20_read_scratchpad+0x1e>

  // sprawdzanie sumy kontrolnej
  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000c46:	2108      	movs	r1, #8
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 fdeb 	bl	8001824 <wire_crc>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3308      	adds	r3, #8
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	7afa      	ldrb	r2, [r7, #11]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d101      	bne.n	8000c62 <ds18b20_read_scratchpad+0x54>
    return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <ds18b20_read_scratchpad+0x56>
  else
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd90      	pop	{r4, r7, pc}

08000c6c <ds18b20_get_temp>:

float ds18b20_get_temp()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  // jeśli wystąpił błąd zwróć wartość domyślną
  if (ds18b20_read_scratchpad(scratchpad) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ffca 	bl	8000c0e <ds18b20_read_scratchpad>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <ds18b20_get_temp+0x1a>
    return 85.0f;
 8000c80:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000cac <ds18b20_get_temp+0x40>
 8000c84:	e00b      	b.n	8000c9e <ds18b20_get_temp+0x32>
 8000c86:	88bb      	ldrh	r3, [r7, #4]

  // kopiowanie pierwszych dwóch bajtów
  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000c88:	807b      	strh	r3, [r7, #2]

  return temp / 16.0f;
 8000c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c96:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000c9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c9e:	eef0 7a47 	vmov.f32	s15, s14
}
 8000ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	42aa0000 	.word	0x42aa0000

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a34      	ldr	r2, [pc, #208]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6153      	str	r3, [r2, #20]
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_GPIO_Init+0xec>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f001 f8a7 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000d32:	2200      	movs	r2, #0
 8000d34:	21f7      	movs	r1, #247	; 0xf7
 8000d36:	481a      	ldr	r0, [pc, #104]	; (8000da0 <MX_GPIO_Init+0xf0>)
 8000d38:	f001 f8a2 	bl	8001e80 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_GPIO_Init+0xf4>)
 8000d54:	f000 ff22 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 ff13 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8000d76:	23f7      	movs	r3, #247	; 0xf7
 8000d78:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_GPIO_Init+0xf0>)
 8000d8e:	f000 ff05 	bl	8001b9c <HAL_GPIO_Init>

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800

08000da8 <delay_us>:
//	delay*=32;
//	while(delay--);
//}

void delay_us (uint16_t us)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);  // set the counter value a 0
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <delay_us+0x30>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);  // wait for the counter to reach the us input in the parameter
 8000dba:	bf00      	nop
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <delay_us+0x30>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3f9      	bcc.n	8000dbc <delay_us+0x14>
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000009c 	.word	0x2000009c

08000ddc <lcd_send_4bit>:

static void lcd_send_4bit(uint8_t data){	
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]

	//sprawdzanie kolejno wartości bitów 5, 6, 7 i 8
	if(data & 0x10) d4(1); else d4(0);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d005      	beq.n	8000dfc <lcd_send_4bit+0x20>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <lcd_send_4bit+0x90>)
 8000df6:	f001 f843 	bl	8001e80 <HAL_GPIO_WritePin>
 8000dfa:	e004      	b.n	8000e06 <lcd_send_4bit+0x2a>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	481a      	ldr	r0, [pc, #104]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e02:	f001 f83d 	bl	8001e80 <HAL_GPIO_WritePin>
	if(data & 0x20) d5(1); else d5(0);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <lcd_send_4bit+0x40>
 8000e10:	2201      	movs	r2, #1
 8000e12:	2120      	movs	r1, #32
 8000e14:	4815      	ldr	r0, [pc, #84]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e16:	f001 f833 	bl	8001e80 <HAL_GPIO_WritePin>
 8000e1a:	e004      	b.n	8000e26 <lcd_send_4bit+0x4a>
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e22:	f001 f82d 	bl	8001e80 <HAL_GPIO_WritePin>
	if(data & 0x40) d6(1); else d6(0);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <lcd_send_4bit+0x60>
 8000e30:	2201      	movs	r2, #1
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e36:	f001 f823 	bl	8001e80 <HAL_GPIO_WritePin>
 8000e3a:	e004      	b.n	8000e46 <lcd_send_4bit+0x6a>
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e42:	f001 f81d 	bl	8001e80 <HAL_GPIO_WritePin>
	if(data & 0x80) d7(1); else d7(0);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da05      	bge.n	8000e5a <lcd_send_4bit+0x7e>
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e54:	f001 f814 	bl	8001e80 <HAL_GPIO_WritePin>
	
}
 8000e58:	e004      	b.n	8000e64 <lcd_send_4bit+0x88>
	if(data & 0x80) d7(1); else d7(0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <lcd_send_4bit+0x90>)
 8000e60:	f001 f80e 	bl	8001e80 <HAL_GPIO_WritePin>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	48000400 	.word	0x48000400

08000e70 <lcd_send>:

static void lcd_send(int8_t rs,uint8_t data){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]
	// wysyłanie pierwszych 4 bitów
	rs(rs);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <lcd_send+0x24>
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	481a      	ldr	r0, [pc, #104]	; (8000ef8 <lcd_send+0x88>)
 8000e8e:	f000 fff7 	bl	8001e80 <HAL_GPIO_WritePin>
 8000e92:	e004      	b.n	8000e9e <lcd_send+0x2e>
 8000e94:	2200      	movs	r2, #0
 8000e96:	2101      	movs	r1, #1
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <lcd_send+0x88>)
 8000e9a:	f000 fff1 	bl	8001e80 <HAL_GPIO_WritePin>
	rw(0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <lcd_send+0x88>)
 8000ea4:	f000 ffec 	bl	8001e80 <HAL_GPIO_WritePin>
	lcd_send_4bit(data);
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff96 	bl	8000ddc <lcd_send_4bit>
	en(1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <lcd_send+0x88>)
 8000eb6:	f000 ffe3 	bl	8001e80 <HAL_GPIO_WritePin>
	delay_us(100);
 8000eba:	2064      	movs	r0, #100	; 0x64
 8000ebc:	f7ff ff74 	bl	8000da8 <delay_us>
	en(0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <lcd_send+0x88>)
 8000ec6:	f000 ffdb 	bl	8001e80 <HAL_GPIO_WritePin>
	// przesunięcie bitowe i przesłanie kolejnych 4 bitów
	lcd_send_4bit(data<<4);
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff83 	bl	8000ddc <lcd_send_4bit>
	en(1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <lcd_send+0x88>)
 8000edc:	f000 ffd0 	bl	8001e80 <HAL_GPIO_WritePin>
	delay_us(100);
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f7ff ff61 	bl	8000da8 <delay_us>
	en(0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <lcd_send+0x88>)
 8000eec:	f000 ffc8 	bl	8001e80 <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	48000400 	.word	0x48000400

08000efc <lcd_init>:

//void lcd_data(char c){
//	lcd_send(1,(uint8_t)c);
//}

void lcd_init(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

	lcd_send(0,0x28); // ustaw tryb 4 bitowy i dwie linie
 8000f00:	2128      	movs	r1, #40	; 0x28
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ffb4 	bl	8000e70 <lcd_send>
//	lcd_send(0,0x33);	//instrukcje o nieznanym przeznaczeniu
//	lcd_send(0,0x32);
	lcd_send(0,0x0C); //włącz wyświetlacz
 8000f08:	210c      	movs	r1, #12
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff ffb0 	bl	8000e70 <lcd_send>
//  lcd_send(0,0x06);	// ustaw kursor żeby poruszał się w prawo
	lcd_send(0,0x01); //czyszczenie wyświetlacza
 8000f10:	2101      	movs	r1, #1
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ffac 	bl	8000e70 <lcd_send>
	HAL_Delay(2);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f000 fd35 	bl	8001988 <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <lcd_clear>:

void lcd_clear(void){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
    lcd_send(0,0x01);
 8000f26:	2101      	movs	r1, #1
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ffa1 	bl	8000e70 <lcd_send>
    HAL_Delay(2);
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f000 fd2a 	bl	8001988 <HAL_Delay>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <lcd_move_cursor>:


void lcd_move_cursor(char x, char y){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	
    lcd_send(0,0x80+x+(y*0x40));
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	019b      	lsls	r3, r3, #6
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3b80      	subs	r3, #128	; 0x80
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ff88 	bl	8000e70 <lcd_send>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lcd_print>:

void lcd_print(char *text){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	// dopóki dane w tablicy istnieją przesyłaj do wyświetlacza
    while(*text){
 8000f70:	e008      	b.n	8000f84 <lcd_print+0x1c>
//        lcd_data(*text);
        lcd_send(1,(uint8_t)*text);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff ff79 	bl	8000e70 <lcd_send>
        text++;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
    while(*text){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f2      	bne.n	8000f72 <lcd_print+0xa>
    }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <send_temp>:


// formatowanie danych i przesyłanie do wyświelacza
// temp - temperatura pobrana z czujnika
// txt - tekst dopisywany przed wyświetleniem temperatury
void send_temp(float temp, char* txt){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fa2:	6038      	str	r0, [r7, #0]
      static char celsius[3] = {(char)223, 'C', '\0'};

	  char temp_ch[8] = "";
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
	  char result[16];

	  // rzutowanie float na char*
      gcvt(temp,4,temp_ch);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fac3 	bl	8000538 <__aeabi_f2d>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	460d      	mov	r5, r1
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	ec45 4b10 	vmov	d0, r4, r5
 8000fc2:	f002 fee1 	bl	8003d88 <gcvt>

      // łączenie zmiennych w jedną tablicę
	  strcat(temp_ch,celsius);
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <send_temp+0x68>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 ff31 	bl	8003e34 <strcat>
	  strcpy(result, txt);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 ff3a 	bl	8003e52 <strcpy>
	  strcat(result, temp_ch);
 8000fde:	f107 0218 	add.w	r2, r7, #24
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 ff23 	bl	8003e34 <strcat>

	  // wyświetlanie tekstu na hd44780
	  lcd_print(result);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffb8 	bl	8000f68 <lcd_print>
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	20000000 	.word	0x20000000

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fc57 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f865 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f7ff fe4d 	bl	8000cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001016:	f000 fa23 	bl	8001460 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800101a:	f000 fa51 	bl	80014c0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800101e:	f000 f9c9 	bl	80013b4 <MX_TIM6_Init>
//  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  // sprawdzanie komunikacji z czujnikiem
  if (ds18b20_read_address(ds1) != HAL_OK) {
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fda1 	bl	8000b6c <ds18b20_read_address>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <main+0x30>
    Error_Handler();
 8001030:	f000 f895 	bl	800115e <Error_Handler>
  }

  lcd_init();	// inicjalizacja lcd
 8001034:	f7ff ff62 	bl	8000efc <lcd_init>

  unsigned int i = 1;	// iterator do zliczania średniej
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  float sum = 0;		// suma wszystkich temperatur
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds18b20_start_measure(); // start pomiaru
 8001042:	f7ff fddc 	bl	8000bfe <ds18b20_start_measure>

	  HAL_Delay(750);	// czekanie na wykonanie pomiaru
 8001046:	f240 20ee 	movw	r0, #750	; 0x2ee
 800104a:	f000 fc9d 	bl	8001988 <HAL_Delay>
	  lcd_move_cursor(0,0);
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff71 	bl	8000f38 <lcd_move_cursor>

	  float temp = ds18b20_get_temp();
 8001056:	f7ff fe09 	bl	8000c6c <ds18b20_get_temp>
 800105a:	ed87 0a03 	vstr	s0, [r7, #12]

	    if (temp >= 80.0f)	// w przypadku zwrócenia wartości domyślnej wświetl błąd
 800105e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001062:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80010cc <main+0xc8>
 8001066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	db03      	blt.n	8001078 <main+0x74>
	      lcd_print("Error");
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <main+0xcc>)
 8001072:	f7ff ff79 	bl	8000f68 <lcd_print>
 8001076:	e023      	b.n	80010c0 <main+0xbc>

	    else{

		  lcd_clear();
 8001078:	f7ff ff53 	bl	8000f22 <lcd_clear>
	      send_temp(temp, "Temp: "); //formatowanie i wysyłanie temperatry do wyświetlacza
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <main+0xd0>)
 800107e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001082:	f7ff ff89 	bl	8000f98 <send_temp>

		  sum += temp;
 8001086:	ed97 7a04 	vldr	s14, [r7, #16]
 800108a:	edd7 7a03 	vldr	s15, [r7, #12]
 800108e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001092:	edc7 7a04 	vstr	s15, [r7, #16]
		  lcd_move_cursor(0,1);
 8001096:	2101      	movs	r1, #1
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff4d 	bl	8000f38 <lcd_move_cursor>
		  send_temp(sum/i, "Avg:  "); // wysyłanie policzonej średniej
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <main+0xd4>)
 80010b2:	eeb0 0a66 	vmov.f32	s0, s13
 80010b6:	f7ff ff6f 	bl	8000f98 <send_temp>
		  i++;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]

	    }

	    HAL_Delay(1250); //dokonywanie pomiaru co sekundę (750ms czas pomiaru, 250 czekanie)
 80010c0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80010c4:	f000 fc60 	bl	8001988 <HAL_Delay>
  {
 80010c8:	e7bb      	b.n	8001042 <main+0x3e>
 80010ca:	bf00      	nop
 80010cc:	42a00000 	.word	0x42a00000
 80010d0:	080064d0 	.word	0x080064d0
 80010d4:	080064d8 	.word	0x080064d8
 80010d8:	080064e0 	.word	0x080064e0

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	; 0x40
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fe9a 	bl	8003e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001112:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fec7 	bl	8001eb0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001128:	f000 f819 	bl	800115e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fdba 	bl	8002cc0 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001152:	f000 f804 	bl	800115e <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3740      	adds	r7, #64	; 0x40
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	e7fe      	b.n	8001166 <Error_Handler+0x8>

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x44>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119e:	2007      	movs	r0, #7
 80011a0:	f000 fcc8 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 fba4 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_kill>:

int _kill(int pid, int sig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800121e:	f002 fdd7 	bl	8003dd0 <__errno>
 8001222:	4603      	mov	r3, r0
 8001224:	2216      	movs	r2, #22
 8001226:	601a      	str	r2, [r3, #0]
	return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_exit>:

void _exit (int status)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffe7 	bl	8001214 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001246:	e7fe      	b.n	8001246 <_exit+0x12>

08001248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
	}

return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
	}
	return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f002 fd3c 	bl	8003dd0 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20003000 	.word	0x20003000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000090 	.word	0x20000090
 800138c:	20000208 	.word	0x20000208

08001390 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_TIM6_Init+0x64>)
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <MX_TIM6_Init+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_TIM6_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_TIM6_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_TIM6_Init+0x64>)
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_TIM6_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_TIM6_Init+0x64>)
 80013e6:	f001 fea1 	bl	800312c <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013f0:	f7ff feb5 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM6_Init+0x64>)
 8001402:	f001 ff63 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800140c:	f7ff fea7 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000009c 	.word	0x2000009c
 800141c:	40001000 	.word	0x40001000

08001420 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_TIM_Base_MspInit+0x38>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40001000 	.word	0x40001000
 800145c:	40021000 	.word	0x40021000

08001460 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <MX_USART2_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 800146c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART2_UART_Init+0x58>)
 80014a4:	f001 ff80 	bl	80033a8 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f7ff fe56 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000016c 	.word	0x2000016c
 80014bc:	40004400 	.word	0x40004400

080014c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <MX_USART3_UART_Init+0x64>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART3_UART_Init+0x60>)
 80014fe:	2210      	movs	r2, #16
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_USART3_UART_Init+0x60>)
 8001504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001508:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART3_UART_Init+0x60>)
 800150c:	f001 ff9a 	bl	8003444 <HAL_HalfDuplex_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001516:	f7ff fe22 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000e8 	.word	0x200000e8
 8001524:	40004800 	.word	0x40004800

08001528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_UART_MspInit+0xdc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d129      	bne.n	800159e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_UART_MspInit+0xe0>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_UART_MspInit+0xe0>)
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <HAL_UART_MspInit+0xe0>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_UART_MspInit+0xe0>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a28      	ldr	r2, [pc, #160]	; (8001608 <HAL_UART_MspInit+0xe0>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	6153      	str	r3, [r2, #20]
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_UART_MspInit+0xe0>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800157a:	230c      	movs	r3, #12
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158a:	2307      	movs	r3, #7
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f000 fb00 	bl	8001b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800159c:	e02d      	b.n	80015fa <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_UART_MspInit+0xe4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d128      	bne.n	80015fa <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b2:	61d3      	str	r3, [r2, #28]
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ca:	6153      	str	r3, [r2, #20]
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_UART_MspInit+0xe0>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015de:	2312      	movs	r3, #18
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ea:	2307      	movs	r3, #7
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <HAL_UART_MspInit+0xe8>)
 80015f6:	f000 fad1 	bl	8001b9c <HAL_GPIO_Init>
}
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	; 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40004400 	.word	0x40004400
 8001608:	40021000 	.word	0x40021000
 800160c:	40004800 	.word	0x40004800
 8001610:	48000400 	.word	0x48000400

08001614 <set_baudrate>:
#include "wire.h"
#include "gpio.h"
//#include "tim.h"

static void set_baudrate(uint32_t baudrate)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <set_baudrate+0x64>)
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <set_baudrate+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <set_baudrate+0x64>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <set_baudrate+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <set_baudrate+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <set_baudrate+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <set_baudrate+0x64>)
 800163c:	220c      	movs	r2, #12
 800163e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <set_baudrate+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <set_baudrate+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <set_baudrate+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <set_baudrate+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <set_baudrate+0x64>)
 800165a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800165e:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <set_baudrate+0x64>)
 8001662:	f001 feef 	bl	8003444 <HAL_HalfDuplex_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <set_baudrate+0x5c>
  {
    Error_Handler();
 800166c:	f7ff fd77 	bl	800115e <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000e8 	.word	0x200000e8
 800167c:	40004800 	.word	0x40004800

08001680 <wire_reset>:
//  return HAL_TIM_Base_Start(&htim6);
//}


HAL_StatusTypeDef wire_reset(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 8001686:	23f0      	movs	r3, #240	; 0xf0
 8001688:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 800168e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001692:	f7ff ffbf 	bl	8001614 <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001696:	1df9      	adds	r1, r7, #7
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2201      	movs	r2, #1
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <wire_reset+0x50>)
 80016a0:	f001 ff26 	bl	80034f0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 80016a4:	1db9      	adds	r1, r7, #6
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	2201      	movs	r2, #1
 80016ac:	4808      	ldr	r0, [pc, #32]	; (80016d0 <wire_reset+0x50>)
 80016ae:	f001 ffb3 	bl	8003618 <HAL_UART_Receive>
  set_baudrate(115200);
 80016b2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80016b6:	f7ff ffad 	bl	8001614 <set_baudrate>

  if (data_in != 0xF0)
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2bf0      	cmp	r3, #240	; 0xf0
 80016be:	d001      	beq.n	80016c4 <wire_reset+0x44>
    return HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e000      	b.n	80016c6 <wire_reset+0x46>
  else
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200000e8 	.word	0x200000e8

080016d4 <read_bit>:

static int read_bit(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 80016da:	23ff      	movs	r3, #255	; 0xff
 80016dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 80016e2:	1df9      	adds	r1, r7, #7
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	2201      	movs	r2, #1
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <read_bit+0x38>)
 80016ec:	f001 ff00 	bl	80034f0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 80016f0:	1db9      	adds	r1, r7, #6
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	2201      	movs	r2, #1
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <read_bit+0x38>)
 80016fa:	f001 ff8d 	bl	8003618 <HAL_UART_Receive>

  return data_in & 0x01;
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	f003 0301 	and.w	r3, r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200000e8 	.word	0x200000e8

08001710 <wire_read>:

uint8_t wire_read(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e00e      	b.n	800173e <wire_read+0x2e>
    value >>= 1;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8001726:	f7ff ffd5 	bl	80016d4 <read_bit>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <wire_read+0x28>
      value |= 0x80;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001736:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b07      	cmp	r3, #7
 8001742:	dded      	ble.n	8001720 <wire_read+0x10>
  }
  return value;
 8001744:	79fb      	ldrb	r3, [r7, #7]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <write_bit>:

static void write_bit(int value)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if (value) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <write_bit+0x24>
      uint8_t data_out = 0xff;
 800175e:	23ff      	movs	r3, #255	; 0xff
 8001760:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001762:	f107 010f 	add.w	r1, r7, #15
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	2201      	movs	r2, #1
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <write_bit+0x40>)
 800176e:	f001 febf 	bl	80034f0 <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 8001772:	e009      	b.n	8001788 <write_bit+0x38>
      uint8_t data_out = 0x0;
 8001774:	2300      	movs	r3, #0
 8001776:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001778:	f107 010e 	add.w	r1, r7, #14
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	2201      	movs	r2, #1
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <write_bit+0x40>)
 8001784:	f001 feb4 	bl	80034f0 <HAL_UART_Transmit>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200000e8 	.word	0x200000e8

08001794 <wire_write>:

void wire_write(uint8_t byte)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e00b      	b.n	80017bc <wire_write+0x28>
    write_bit(byte & 0x01);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffd0 	bl	8001750 <write_bit>
    byte >>= 1;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	ddf0      	ble.n	80017a4 <wire_write+0x10>
  }
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	460a      	mov	r2, r1
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	4613      	mov	r3, r2
 80017da:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e016      	b.n	8001810 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	4053      	eors	r3, r2
 80017e8:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <byte_crc+0x38>
      crc ^= 0x8c;
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001800:	43db      	mvns	r3, r3
 8001802:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b07      	cmp	r3, #7
 8001814:	dde5      	ble.n	80017e2 <byte_crc+0x16>
  }
  return crc;
 8001816:	79fb      	ldrb	r3, [r7, #7]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e00d      	b.n	8001854 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ffc1 	bl	80017cc <byte_crc>
 800184a:	4603      	mov	r3, r0
 800184c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbed      	blt.n	8001838 <wire_crc+0x14>

    return crc;
 800185c:	7afb      	ldrb	r3, [r7, #11]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800186e:	490e      	ldr	r1, [pc, #56]	; (80018a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <LoopForever+0xe>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001884:	4c0b      	ldr	r4, [pc, #44]	; (80018b4 <LoopForever+0x16>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001892:	f7ff fd7d 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f002 faa1 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7ff fbb3 	bl	8001004 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018ac:	080067f4 	.word	0x080067f4
  ldr r2, =_sbss
 80018b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018b4:	20000204 	.word	0x20000204

080018b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_2_IRQHandler>
	...

080018bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x28>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f931 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fc46 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40022000 	.word	0x40022000

080018e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f93b 	bl	8001b82 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f911 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000004 	.word	0x20000004
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	200001f0 	.word	0x200001f0

08001970 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;  
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200001f0 	.word	0x200001f0

08001988 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff47 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff5c 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff8e 	bl	8001a88 <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5d 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffb0 	bl	8001af0 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e14e      	b.n	8001e4a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8140 	beq.w	8001e44 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x40>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d017      	beq.n	8001c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0203 	and.w	r2, r3, #3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 809a 	beq.w	8001e44 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d10:	4b55      	ldr	r3, [pc, #340]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a54      	ldr	r2, [pc, #336]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b52      	ldr	r3, [pc, #328]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d28:	4a50      	ldr	r2, [pc, #320]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d52:	d013      	beq.n	8001d7c <HAL_GPIO_Init+0x1e0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a46      	ldr	r2, [pc, #280]	; (8001e70 <HAL_GPIO_Init+0x2d4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00d      	beq.n	8001d78 <HAL_GPIO_Init+0x1dc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_GPIO_Init+0x2d8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x1d8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_GPIO_Init+0x1d4>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e006      	b.n	8001d7e <HAL_GPIO_Init+0x1e2>
 8001d70:	2305      	movs	r3, #5
 8001d72:	e004      	b.n	8001d7e <HAL_GPIO_Init+0x1e2>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x1e2>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_GPIO_Init+0x1e2>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	f002 0203 	and.w	r2, r2, #3
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	4093      	lsls	r3, r2
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d8e:	4937      	ldr	r1, [pc, #220]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc0:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f47f aea9 	bne.w	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	48000400 	.word	0x48000400
 8001e74:	48000800 	.word	0x48000800
 8001e78:	48000c00 	.word	0x48000c00
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f000 bef4 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 816a 	beq.w	80021ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eda:	4bb3      	ldr	r3, [pc, #716]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d00c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee6:	4bb0      	ldr	r3, [pc, #704]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d159      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
 8001ef2:	4bad      	ldr	r3, [pc, #692]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efe:	d152      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
 8001f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f04:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_OscConfig+0x82>
 8001f2c:	4b9e      	ldr	r3, [pc, #632]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	e015      	b.n	8001f5e <HAL_RCC_OscConfig+0xae>
 8001f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f36:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f4e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f5a:	4b93      	ldr	r3, [pc, #588]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f62:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f66:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f6a:	fa92 f2a2 	rbit	r2, r2
 8001f6e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f72:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 810c 	beq.w	80021ac <HAL_RCC_OscConfig+0x2fc>
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 8106 	bne.w	80021ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f000 be86 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x110>
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7c      	ldr	r2, [pc, #496]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e030      	b.n	8002022 <HAL_RCC_OscConfig+0x172>
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x134>
 8001fca:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a76      	ldr	r2, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a73      	ldr	r2, [pc, #460]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01e      	b.n	8002022 <HAL_RCC_OscConfig+0x172>
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x15a>
 8001ff0:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6c      	ldr	r2, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0x172>
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a63      	ldr	r2, [pc, #396]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800201c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002022:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f023 020f 	bic.w	r2, r3, #15
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	495d      	ldr	r1, [pc, #372]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002032:	4313      	orrs	r3, r2
 8002034:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d059      	beq.n	80020f4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fc96 	bl	8001970 <HAL_GetTick>
 8002044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff fc91 	bl	8001970 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d902      	bls.n	8002060 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	f000 be29 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002074:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0x1e2>
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x20e>
 8002092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002096:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020d2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ab      	beq.n	800204a <HAL_RCC_OscConfig+0x19a>
 80020f2:	e05c      	b.n	80021ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc3c 	bl	8001970 <HAL_GetTick>
 80020f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fe:	f7ff fc37 	bl	8001970 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d902      	bls.n	8002114 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	f000 bdcf 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002118:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002128:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_RCC_OscConfig+0x296>
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x2c2>
 8002146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002162:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002176:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800217a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800217e:	fa92 f2a2 	rbit	r2, r2
 8002182:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002186:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ab      	bne.n	80020fe <HAL_RCC_OscConfig+0x24e>
 80021a6:	e002      	b.n	80021ae <HAL_RCC_OscConfig+0x2fe>
 80021a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 816f 	beq.w	800249c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021be:	4bd0      	ldr	r3, [pc, #832]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021ca:	4bcd      	ldr	r3, [pc, #820]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d16c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x400>
 80021d6:	4bca      	ldr	r3, [pc, #808]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d166      	bne.n	80022b0 <HAL_RCC_OscConfig+0x400>
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <HAL_RCC_OscConfig+0x362>
 800220c:	4bbc      	ldr	r3, [pc, #752]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e013      	b.n	800223a <HAL_RCC_OscConfig+0x38a>
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002224:	2302      	movs	r3, #2
 8002226:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800222a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002236:	4bb2      	ldr	r3, [pc, #712]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2202      	movs	r2, #2
 800223c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002240:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800224c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f042 0220 	orr.w	r2, r2, #32
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f002 021f 	and.w	r2, r2, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_RCC_OscConfig+0x3cc>
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	f000 bd1b 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	21f8      	movs	r1, #248	; 0xf8
 800228c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002294:	fa91 f1a1 	rbit	r1, r1
 8002298:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800229c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022a0:	fab1 f181 	clz	r1, r1
 80022a4:	b2c9      	uxtb	r1, r1
 80022a6:	408b      	lsls	r3, r1
 80022a8:	4995      	ldr	r1, [pc, #596]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	e0f5      	b.n	800249c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8085 	beq.w	80023c6 <HAL_RCC_OscConfig+0x516>
 80022bc:	2301      	movs	r3, #1
 80022be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	461a      	mov	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fb42 	bl	8001970 <HAL_GetTick>
 80022ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f2:	f7ff fb3d 	bl	8001970 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d902      	bls.n	8002308 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	f000 bcd5 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800231a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x488>
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x4b0>
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002350:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800235c:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2202      	movs	r2, #2
 8002362:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002366:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800236a:	fa92 f2a2 	rbit	r2, r2
 800236e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002372:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0220 	orr.w	r2, r2, #32
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0af      	beq.n	80022f2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	21f8      	movs	r1, #248	; 0xf8
 80023a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023aa:	fa91 f1a1 	rbit	r1, r1
 80023ae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023b6:	fab1 f181 	clz	r1, r1
 80023ba:	b2c9      	uxtb	r1, r1
 80023bc:	408b      	lsls	r3, r1
 80023be:	4950      	ldr	r1, [pc, #320]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e06a      	b.n	800249c <HAL_RCC_OscConfig+0x5ec>
 80023c6:	2301      	movs	r3, #1
 80023c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	461a      	mov	r2, r3
 80023ee:	2300      	movs	r3, #0
 80023f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fabd 	bl	8001970 <HAL_GetTick>
 80023f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fc:	f7ff fab8 	bl	8001970 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d902      	bls.n	8002412 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	f000 bc50 	b.w	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002412:	2302      	movs	r3, #2
 8002414:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d102      	bne.n	8002442 <HAL_RCC_OscConfig+0x592>
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	e013      	b.n	800246a <HAL_RCC_OscConfig+0x5ba>
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002454:	2302      	movs	r3, #2
 8002456:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800245a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x650>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2202      	movs	r2, #2
 800246c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002470:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800247c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1af      	bne.n	80023fc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80da 	beq.w	8002660 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d069      	beq.n	800258a <HAL_RCC_OscConfig+0x6da>
 80024b6:	2301      	movs	r3, #1
 80024b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x654>)
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7ff fa46 	bl	8001970 <HAL_GetTick>
 80024e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e8:	e00e      	b.n	8002508 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff fa41 	bl	8001970 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d906      	bls.n	8002508 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e3d9      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	10908120 	.word	0x10908120
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800251a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002548:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4ba5      	ldr	r3, [pc, #660]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800254c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002552:	2102      	movs	r1, #2
 8002554:	6019      	str	r1, [r3, #0]
 8002556:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f1a3 	rbit	r1, r3
 8002560:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002564:	6019      	str	r1, [r3, #0]
  return result;
 8002566:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0b0      	beq.n	80024ea <HAL_RCC_OscConfig+0x63a>
 8002588:	e06a      	b.n	8002660 <HAL_RCC_OscConfig+0x7b0>
 800258a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025a0:	601a      	str	r2, [r3, #0]
  return result;
 80025a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <HAL_RCC_OscConfig+0x934>)
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	461a      	mov	r2, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7ff f9d8 	bl	8001970 <HAL_GetTick>
 80025c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	e009      	b.n	80025da <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c6:	f7ff f9d3 	bl	8001970 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e36b      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 80025da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025de:	2202      	movs	r2, #2
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025f6:	2202      	movs	r2, #2
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800260e:	2202      	movs	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002620:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002626:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800262a:	2102      	movs	r1, #2
 800262c:	6019      	str	r1, [r3, #0]
 800262e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f1a3 	rbit	r1, r3
 8002638:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800263c:	6019      	str	r1, [r3, #0]
  return result;
 800263e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1b2      	bne.n	80025c6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8158 	beq.w	8002920 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d112      	bne.n	80026a8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_OscConfig+0x938>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11a      	bne.n	80026ea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCC_OscConfig+0x938>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_RCC_OscConfig+0x938>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c0:	f7ff f956 	bl	8001970 <HAL_GetTick>
 80026c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e009      	b.n	80026de <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7ff f951 	bl	8001970 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e2e9      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCC_OscConfig+0x938>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ef      	beq.n	80026ca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x852>
 80026f4:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a39      	ldr	r2, [pc, #228]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e02f      	b.n	8002762 <HAL_RCC_OscConfig+0x8b2>
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x876>
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e01d      	b.n	8002762 <HAL_RCC_OscConfig+0x8b2>
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x89a>
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x8b2>
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d06b      	beq.n	8002844 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7ff f900 	bl	8001970 <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e00b      	b.n	800278e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7ff f8fb 	bl	8001970 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e291      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 800278e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002792:	2202      	movs	r2, #2
 8002794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027aa:	2202      	movs	r2, #2
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027bc:	601a      	str	r2, [r3, #0]
  return result;
 80027be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d109      	bne.n	80027ec <HAL_RCC_OscConfig+0x93c>
 80027d8:	4b01      	ldr	r3, [pc, #4]	; (80027e0 <HAL_RCC_OscConfig+0x930>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x958>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	10908120 	.word	0x10908120
 80027e8:	40007000 	.word	0x40007000
 80027ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4bbb      	ldr	r3, [pc, #748]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800280c:	2102      	movs	r1, #2
 800280e:	6011      	str	r1, [r2, #0]
 8002810:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	fa92 f1a2 	rbit	r1, r2
 800281a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800281e:	6011      	str	r1, [r2, #0]
  return result;
 8002820:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d099      	beq.n	8002776 <HAL_RCC_OscConfig+0x8c6>
 8002842:	e063      	b.n	800290c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7ff f894 	bl	8001970 <HAL_GetTick>
 8002848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	e00b      	b.n	8002866 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7ff f88f 	bl	8001970 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e225      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002866:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002882:	2202      	movs	r2, #2
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002894:	601a      	str	r2, [r3, #0]
  return result;
 8002896:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800289a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_OscConfig+0xa06>
 80028b0:	4b90      	ldr	r3, [pc, #576]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	e00d      	b.n	80028d2 <HAL_RCC_OscConfig+0xa22>
 80028b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028ba:	2202      	movs	r2, #2
 80028bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	4b89      	ldr	r3, [pc, #548]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028d6:	2102      	movs	r1, #2
 80028d8:	6011      	str	r1, [r2, #0]
 80028da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fa92 f1a2 	rbit	r1, r2
 80028e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028e8:	6011      	str	r1, [r2, #0]
  return result;
 80028ea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1a0      	bne.n	800284e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800290c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b77      	ldr	r3, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4a76      	ldr	r2, [pc, #472]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 81c2 	beq.w	8002cb0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292c:	4b71      	ldr	r3, [pc, #452]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	f000 819c 	beq.w	8002c72 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 8114 	bne.w	8002b6e <HAL_RCC_OscConfig+0xcbe>
 8002946:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800294a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800295e:	601a      	str	r2, [r3, #0]
  return result;
 8002960:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002964:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	461a      	mov	r2, r3
 8002978:	2300      	movs	r3, #0
 800297a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fff8 	bl	8001970 <HAL_GetTick>
 8002980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	e009      	b.n	800299a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fff3 	bl	8001970 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e18b      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 800299a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800299e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029b2:	601a      	str	r2, [r3, #0]
  return result;
 80029b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_RCC_OscConfig+0xb24>
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	e01b      	b.n	8002a0c <HAL_RCC_OscConfig+0xb5c>
 80029d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fa93 f2a3 	rbit	r2, r3
 80029e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a14:	6011      	str	r1, [r2, #0]
 8002a16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fa92 f1a2 	rbit	r1, r2
 8002a20:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a24:	6011      	str	r1, [r2, #0]
  return result;
 8002a26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d19e      	bne.n	8002986 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	4925      	ldr	r1, [pc, #148]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
 8002a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a7c:	601a      	str	r2, [r3, #0]
  return result;
 8002a7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a82:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	2301      	movs	r3, #1
 8002a98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe ff69 	bl	8001970 <HAL_GetTick>
 8002a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa2:	e009      	b.n	8002ab8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe ff64 	bl	8001970 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0fc      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad0:	601a      	str	r2, [r3, #0]
  return result;
 8002ad2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0xc48>
 8002aec:	4b01      	ldr	r3, [pc, #4]	; (8002af4 <HAL_RCC_OscConfig+0xc44>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e01e      	b.n	8002b30 <HAL_RCC_OscConfig+0xc80>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fa93 f2a3 	rbit	r2, r3
 8002b0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f2a3 	rbit	r2, r3
 8002b26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_RCC_OscConfig+0xe0c>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b38:	6011      	str	r1, [r2, #0]
 8002b3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	fa92 f1a2 	rbit	r1, r2
 8002b44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b48:	6011      	str	r1, [r2, #0]
  return result;
 8002b4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d09b      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xbf4>
 8002b6c:	e0a0      	b.n	8002cb0 <HAL_RCC_OscConfig+0xe00>
 8002b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fee4 	bl	8001970 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe fedf 	bl	8001970 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e077      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
 8002bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bda:	601a      	str	r2, [r3, #0]
  return result;
 8002bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0xd4c>
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_OscConfig+0xe0c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e01b      	b.n	8002c34 <HAL_RCC_OscConfig+0xd84>
 8002bfc:	f107 0320 	add.w	r3, r7, #32
 8002c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f107 0320 	add.w	r3, r7, #32
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f107 0318 	add.w	r3, r7, #24
 8002c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f107 0318 	add.w	r3, r7, #24
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f2a3 	rbit	r2, r3
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_OscConfig+0xe0c>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f107 0210 	add.w	r2, r7, #16
 8002c38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c3c:	6011      	str	r1, [r2, #0]
 8002c3e:	f107 0210 	add.w	r2, r7, #16
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	fa92 f1a2 	rbit	r1, r2
 8002c48:	f107 020c 	add.w	r2, r7, #12
 8002c4c:	6011      	str	r1, [r2, #0]
  return result;
 8002c4e:	f107 020c 	add.w	r2, r7, #12
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f042 0220 	orr.w	r2, r2, #32
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f002 021f 	and.w	r2, r2, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d19e      	bne.n	8002bae <HAL_RCC_OscConfig+0xcfe>
 8002c70:	e01e      	b.n	8002cb0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_RCC_OscConfig+0xe0c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d108      	bne.n	8002cac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b09e      	sub	sp, #120	; 0x78
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e162      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b90      	ldr	r3, [pc, #576]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	498b      	ldr	r1, [pc, #556]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e14a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	497f      	ldr	r1, [pc, #508]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80dc 	beq.w	8002eec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d13c      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xf6>
 8002d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xa6>
 8002d60:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e00f      	b.n	8002d86 <HAL_RCC_ClockConfig+0xc6>
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	667b      	str	r3, [r7, #100]	; 0x64
 8002d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d78:	663b      	str	r3, [r7, #96]	; 0x60
 8002d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d17b      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0f3      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d13c      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x178>
 8002dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x128>
 8002de2:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e00f      	b.n	8002e08 <HAL_RCC_ClockConfig+0x148>
 8002de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
 8002df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e10:	fa92 f2a2 	rbit	r2, r2
 8002e14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d13a      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0b2      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x1a0>
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	e00d      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1bc>
 8002e60:	2302      	movs	r3, #2
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	61ba      	str	r2, [r7, #24]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	617a      	str	r2, [r7, #20]
  return result;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f042 0220 	orr.w	r2, r2, #32
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	f002 021f 	and.w	r2, r2, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e079      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	491a      	ldr	r1, [pc, #104]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fd58 	bl	8001970 <HAL_GetTick>
 8002ec0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fe fd54 	bl	8001970 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e061      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d214      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4906      	ldr	r1, [pc, #24]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e040      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2de>
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	491a      	ldr	r1, [pc, #104]	; (8002fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4912      	ldr	r1, [pc, #72]	; (8002fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f62:	f000 f829 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f70:	22f0      	movs	r2, #240	; 0xf0
 8002f72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	fa92 f2a2 	rbit	r2, r2
 8002f7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	40d3      	lsrs	r3, r2
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x2ec>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_RCC_ClockConfig+0x2f0>)
 8002f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCC_ClockConfig+0x2f4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fca6 	bl	80018e8 <HAL_InitTick>
  
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3778      	adds	r7, #120	; 0x78
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	080064e8 	.word	0x080064e8
 8002fb0:	20000004 	.word	0x20000004
 8002fb4:	20000008 	.word	0x20000008

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b08b      	sub	sp, #44	; 0x2c
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x36>
 8002fe6:	e03c      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fea:	623b      	str	r3, [r7, #32]
      break;
 8002fec:	e03c      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ff4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ff8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	fa92 f2a2 	rbit	r2, r2
 8003000:	607a      	str	r2, [r7, #4]
  return result;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	fab2 f282 	clz	r2, r2
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	40d3      	lsrs	r3, r2
 800300c:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_RCC_GetSysClockFreq+0xc8>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	220f      	movs	r2, #15
 800301c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	fa92 f2a2 	rbit	r2, r2
 8003024:	60fa      	str	r2, [r7, #12]
  return result;
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	fab2 f282 	clz	r2, r2
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	40d3      	lsrs	r3, r2
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003040:	4a0e      	ldr	r2, [pc, #56]	; (800307c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	e004      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	623b      	str	r3, [r7, #32]
      break;
 8003060:	e002      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003064:	623b      	str	r3, [r7, #32]
      break;
 8003066:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003068:	6a3b      	ldr	r3, [r7, #32]
}
 800306a:	4618      	mov	r0, r3
 800306c:	372c      	adds	r7, #44	; 0x2c
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	007a1200 	.word	0x007a1200
 8003080:	08006500 	.word	0x08006500
 8003084:	08006510 	.word	0x08006510
 8003088:	003d0900 	.word	0x003d0900

0800308c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000004 	.word	0x20000004

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030aa:	f7ff ffef 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ae:	4601      	mov	r1, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	603a      	str	r2, [r7, #0]
  return result;
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080064f8 	.word	0x080064f8

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030ee:	f7ff ffcd 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030f2:	4601      	mov	r1, r0
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003100:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	fa92 f2a2 	rbit	r2, r2
 8003108:	603a      	str	r2, [r7, #0]
  return result;
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	fab2 f282 	clz	r2, r2
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	40d3      	lsrs	r3, r2
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	080064f8 	.word	0x080064f8

0800312c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e049      	b.n	80031d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f964 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 f836 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a32      	ldr	r2, [pc, #200]	; (80032b8 <TIM_Base_SetConfig+0xdc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x28>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x28>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a2f      	ldr	r2, [pc, #188]	; (80032bc <TIM_Base_SetConfig+0xe0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <TIM_Base_SetConfig+0xdc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_Base_SetConfig+0x6a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0x6a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <TIM_Base_SetConfig+0xe0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0x6a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <TIM_Base_SetConfig+0xe4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0x6a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <TIM_Base_SetConfig+0xe8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0x6a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <TIM_Base_SetConfig+0xec>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <TIM_Base_SetConfig+0xdc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_Base_SetConfig+0xc0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <TIM_Base_SetConfig+0xe4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_Base_SetConfig+0xc0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <TIM_Base_SetConfig+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0xc0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <TIM_Base_SetConfig+0xec>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	615a      	str	r2, [r3, #20]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e054      	b.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a24      	ldr	r2, [pc, #144]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a17      	ldr	r2, [pc, #92]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d009      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10c      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40014000 	.word	0x40014000

080033a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e040      	b.n	800343c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe f8ac 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f9e8 	bl	80037bc <UART_SetConfig>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e022      	b.n	800343c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fb12 	bl	8003a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fb99 	bl	8003b6c <UART_CheckIdleState>
 800343a:	4603      	mov	r3, r0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e048      	b.n	80034e8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe f85e 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f99a 	bl	80037bc <UART_SetConfig>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e02a      	b.n	80034e8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fac4 	bl	8003a28 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80034be:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0208 	orr.w	r2, r2, #8
 80034ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb43 	bl	8003b6c <UART_CheckIdleState>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003504:	2b20      	cmp	r3, #32
 8003506:	f040 8082 	bne.w	800360e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_UART_Transmit+0x26>
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07a      	b.n	8003610 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x38>
 8003524:	2302      	movs	r3, #2
 8003526:	e073      	b.n	8003610 <HAL_UART_Transmit+0x120>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2221      	movs	r2, #33	; 0x21
 800353c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353e:	f7fe fa17 	bl	8001970 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	88fa      	ldrh	r2, [r7, #6]
 8003548:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d108      	bne.n	8003570 <HAL_UART_Transmit+0x80>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e003      	b.n	8003578 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003580:	e02d      	b.n	80035de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fb36 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e039      	b.n	8003610 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10b      	bne.n	80035ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ae:	b292      	uxth	r2, r2
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	3302      	adds	r3, #2
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	e008      	b.n	80035cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	b292      	uxth	r2, r2
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3301      	adds	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1cb      	bne.n	8003582 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2140      	movs	r1, #64	; 0x40
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fb02 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e005      	b.n	8003610 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362c:	2b20      	cmp	r3, #32
 800362e:	f040 80bf 	bne.w	80037b0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_UART_Receive+0x26>
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0b7      	b.n	80037b2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_UART_Receive+0x38>
 800364c:	2302      	movs	r3, #2
 800364e:	e0b0      	b.n	80037b2 <HAL_UART_Receive+0x19a>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2222      	movs	r2, #34	; 0x22
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366c:	f7fe f980 	bl	8001970 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	88fa      	ldrh	r2, [r7, #6]
 8003676:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	d10e      	bne.n	80036aa <HAL_UART_Receive+0x92>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <HAL_UART_Receive+0x88>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f240 12ff 	movw	r2, #511	; 0x1ff
 800369a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800369e:	e02d      	b.n	80036fc <HAL_UART_Receive+0xe4>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036a8:	e028      	b.n	80036fc <HAL_UART_Receive+0xe4>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10d      	bne.n	80036ce <HAL_UART_Receive+0xb6>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_UART_Receive+0xac>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036c2:	e01b      	b.n	80036fc <HAL_UART_Receive+0xe4>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	227f      	movs	r2, #127	; 0x7f
 80036c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036cc:	e016      	b.n	80036fc <HAL_UART_Receive+0xe4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d6:	d10d      	bne.n	80036f4 <HAL_UART_Receive+0xdc>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_UART_Receive+0xd2>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	227f      	movs	r2, #127	; 0x7f
 80036e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036e8:	e008      	b.n	80036fc <HAL_UART_Receive+0xe4>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	223f      	movs	r2, #63	; 0x3f
 80036ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f2:	e003      	b.n	80036fc <HAL_UART_Receive+0xe4>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003702:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370c:	d108      	bne.n	8003720 <HAL_UART_Receive+0x108>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e003      	b.n	8003728 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003730:	e033      	b.n	800379a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2120      	movs	r1, #32
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa5e 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e032      	b.n	80037b2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003758:	b29a      	uxth	r2, r3
 800375a:	8a7b      	ldrh	r3, [r7, #18]
 800375c:	4013      	ands	r3, r2
 800375e:	b29a      	uxth	r2, r3
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	3302      	adds	r3, #2
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e00d      	b.n	8003788 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003772:	b29b      	uxth	r3, r3
 8003774:	b2da      	uxtb	r2, r3
 8003776:	8a7b      	ldrh	r3, [r7, #18]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4013      	ands	r3, r2
 800377c:	b2da      	uxtb	r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3301      	adds	r3, #1
 8003786:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1c5      	bne.n	8003732 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <UART_SetConfig+0x254>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	6979      	ldr	r1, [r7, #20]
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a78      	ldr	r2, [pc, #480]	; (8003a14 <UART_SetConfig+0x258>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d120      	bne.n	800387a <UART_SetConfig+0xbe>
 8003838:	4b77      	ldr	r3, [pc, #476]	; (8003a18 <UART_SetConfig+0x25c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b03      	cmp	r3, #3
 8003842:	d817      	bhi.n	8003874 <UART_SetConfig+0xb8>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <UART_SetConfig+0x90>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	0800385d 	.word	0x0800385d
 8003850:	08003869 	.word	0x08003869
 8003854:	0800386f 	.word	0x0800386f
 8003858:	08003863 	.word	0x08003863
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e01d      	b.n	800389e <UART_SetConfig+0xe2>
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e01a      	b.n	800389e <UART_SetConfig+0xe2>
 8003868:	2304      	movs	r3, #4
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e017      	b.n	800389e <UART_SetConfig+0xe2>
 800386e:	2308      	movs	r3, #8
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e014      	b.n	800389e <UART_SetConfig+0xe2>
 8003874:	2310      	movs	r3, #16
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e011      	b.n	800389e <UART_SetConfig+0xe2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a67      	ldr	r2, [pc, #412]	; (8003a1c <UART_SetConfig+0x260>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <UART_SetConfig+0xce>
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e009      	b.n	800389e <UART_SetConfig+0xe2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a64      	ldr	r2, [pc, #400]	; (8003a20 <UART_SetConfig+0x264>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <UART_SetConfig+0xde>
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e001      	b.n	800389e <UART_SetConfig+0xe2>
 800389a:	2310      	movs	r3, #16
 800389c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a6:	d15b      	bne.n	8003960 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d827      	bhi.n	80038fe <UART_SetConfig+0x142>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0xf8>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038e9 	.word	0x080038e9
 80038c0:	080038ff 	.word	0x080038ff
 80038c4:	080038ef 	.word	0x080038ef
 80038c8:	080038ff 	.word	0x080038ff
 80038cc:	080038ff 	.word	0x080038ff
 80038d0:	080038ff 	.word	0x080038ff
 80038d4:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7ff fbe4 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 80038dc:	61b8      	str	r0, [r7, #24]
        break;
 80038de:	e013      	b.n	8003908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7ff fc02 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 80038e4:	61b8      	str	r0, [r7, #24]
        break;
 80038e6:	e00f      	b.n	8003908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <UART_SetConfig+0x268>)
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e00c      	b.n	8003908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7ff fb63 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 80038f2:	61b8      	str	r0, [r7, #24]
        break;
 80038f4:	e008      	b.n	8003908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e004      	b.n	8003908 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	77bb      	strb	r3, [r7, #30]
        break;
 8003906:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d074      	beq.n	80039f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	005a      	lsls	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d916      	bls.n	800395a <UART_SetConfig+0x19e>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003932:	d212      	bcs.n	800395a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f023 030f 	bic.w	r3, r3, #15
 800393c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	b29b      	uxth	r3, r3
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	b29a      	uxth	r2, r3
 800394a:	89fb      	ldrh	r3, [r7, #14]
 800394c:	4313      	orrs	r3, r2
 800394e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	89fa      	ldrh	r2, [r7, #14]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	e04e      	b.n	80039f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	77bb      	strb	r3, [r7, #30]
 800395e:	e04b      	b.n	80039f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003960:	7ffb      	ldrb	r3, [r7, #31]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d827      	bhi.n	80039b6 <UART_SetConfig+0x1fa>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0x1b0>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	08003991 	.word	0x08003991
 8003970:	08003999 	.word	0x08003999
 8003974:	080039a1 	.word	0x080039a1
 8003978:	080039b7 	.word	0x080039b7
 800397c:	080039a7 	.word	0x080039a7
 8003980:	080039b7 	.word	0x080039b7
 8003984:	080039b7 	.word	0x080039b7
 8003988:	080039b7 	.word	0x080039b7
 800398c:	080039af 	.word	0x080039af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7ff fb88 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8003994:	61b8      	str	r0, [r7, #24]
        break;
 8003996:	e013      	b.n	80039c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003998:	f7ff fba6 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 800399c:	61b8      	str	r0, [r7, #24]
        break;
 800399e:	e00f      	b.n	80039c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <UART_SetConfig+0x268>)
 80039a2:	61bb      	str	r3, [r7, #24]
        break;
 80039a4:	e00c      	b.n	80039c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a6:	f7ff fb07 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 80039aa:	61b8      	str	r0, [r7, #24]
        break;
 80039ac:	e008      	b.n	80039c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	61bb      	str	r3, [r7, #24]
        break;
 80039b4:	e004      	b.n	80039c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	77bb      	strb	r3, [r7, #30]
        break;
 80039be:	bf00      	nop
    }

    if (pclk != 0U)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d018      	beq.n	80039f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	085a      	lsrs	r2, r3, #1
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	441a      	add	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	d908      	bls.n	80039f4 <UART_SetConfig+0x238>
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d204      	bcs.n	80039f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	e001      	b.n	80039f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a04:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	efff69f3 	.word	0xefff69f3
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	40004800 	.word	0x40004800
 8003a24:	007a1200 	.word	0x007a1200

08003a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	d10a      	bne.n	8003b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b7c:	f7fd fef8 	bl	8001970 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10e      	bne.n	8003bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f82d 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e023      	b.n	8003bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d10e      	bne.n	8003bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f817 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e00d      	b.n	8003bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b09c      	sub	sp, #112	; 0x70
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0e:	e0a5      	b.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	f000 80a1 	beq.w	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7fd fea9 	bl	8001970 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d13e      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c44:	667b      	str	r3, [r7, #100]	; 0x64
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3308      	adds	r3, #8
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e067      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d04f      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cca:	d147      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e6      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	613b      	str	r3, [r7, #16]
   return(result);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d28:	623a      	str	r2, [r7, #32]
 8003d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	69f9      	ldr	r1, [r7, #28]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e010      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	f43f af4a 	beq.w	8003c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3770      	adds	r7, #112	; 0x70
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <gcvt>:
 8003d88:	b530      	push	{r4, r5, lr}
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4605      	mov	r5, r0
 8003d92:	2300      	movs	r3, #0
 8003d94:	ec51 0b10 	vmov	r0, r1, d0
 8003d98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003d9c:	f7fc fe96 	bl	8000acc <__aeabi_dcmplt>
 8003da0:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003da4:	4622      	mov	r2, r4
 8003da6:	b118      	cbz	r0, 8003db0 <gcvt+0x28>
 8003da8:	232d      	movs	r3, #45	; 0x2d
 8003daa:	f802 3b01 	strb.w	r3, [r2], #1
 8003dae:	3d01      	subs	r5, #1
 8003db0:	2300      	movs	r3, #0
 8003db2:	4806      	ldr	r0, [pc, #24]	; (8003dcc <gcvt+0x44>)
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4629      	mov	r1, r5
 8003db8:	2367      	movs	r3, #103	; 0x67
 8003dba:	6800      	ldr	r0, [r0, #0]
 8003dbc:	f000 f8c8 	bl	8003f50 <_gcvt>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	4620      	movne	r0, r4
 8003dc6:	2000      	moveq	r0, #0
 8003dc8:	b005      	add	sp, #20
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	20000010 	.word	0x20000010

08003dd0 <__errno>:
 8003dd0:	4b01      	ldr	r3, [pc, #4]	; (8003dd8 <__errno+0x8>)
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000010 	.word	0x20000010

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4d0d      	ldr	r5, [pc, #52]	; (8003e14 <__libc_init_array+0x38>)
 8003de0:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de2:	1b64      	subs	r4, r4, r5
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	2600      	movs	r6, #0
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	4d0b      	ldr	r5, [pc, #44]	; (8003e1c <__libc_init_array+0x40>)
 8003dee:	4c0c      	ldr	r4, [pc, #48]	; (8003e20 <__libc_init_array+0x44>)
 8003df0:	f002 fb62 	bl	80064b8 <_init>
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	2600      	movs	r6, #0
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	080067ec 	.word	0x080067ec
 8003e18:	080067ec 	.word	0x080067ec
 8003e1c:	080067ec 	.word	0x080067ec
 8003e20:	080067f0 	.word	0x080067f0

08003e24 <memset>:
 8003e24:	4402      	add	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <strcat>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	4602      	mov	r2, r0
 8003e38:	7814      	ldrb	r4, [r2, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	3201      	adds	r2, #1
 8003e3e:	2c00      	cmp	r4, #0
 8003e40:	d1fa      	bne.n	8003e38 <strcat+0x4>
 8003e42:	3b01      	subs	r3, #1
 8003e44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e4c:	2a00      	cmp	r2, #0
 8003e4e:	d1f9      	bne.n	8003e44 <strcat+0x10>
 8003e50:	bd10      	pop	{r4, pc}

08003e52 <strcpy>:
 8003e52:	4603      	mov	r3, r0
 8003e54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e58:	f803 2b01 	strb.w	r2, [r3], #1
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	d1f9      	bne.n	8003e54 <strcpy+0x2>
 8003e60:	4770      	bx	lr

08003e62 <print_e>:
 8003e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e64:	b087      	sub	sp, #28
 8003e66:	ec43 2b10 	vmov	d0, r2, r3
 8003e6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003e6c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8003e70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003e72:	ab04      	add	r3, sp, #16
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	ab03      	add	r3, sp, #12
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	1c62      	adds	r2, r4, #1
 8003e7c:	ab05      	add	r3, sp, #20
 8003e7e:	460f      	mov	r7, r1
 8003e80:	2102      	movs	r1, #2
 8003e82:	f000 fde5 	bl	8004a50 <_dtoa_r>
 8003e86:	9a05      	ldr	r2, [sp, #20]
 8003e88:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d105      	bne.n	8003e9c <print_e+0x3a>
 8003e90:	4601      	mov	r1, r0
 8003e92:	4638      	mov	r0, r7
 8003e94:	f7ff ffdd 	bl	8003e52 <strcpy>
 8003e98:	b007      	add	sp, #28
 8003e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	7801      	ldrb	r1, [r0, #0]
 8003ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	bfc8      	it	gt
 8003ea8:	2501      	movgt	r5, #1
 8003eaa:	212e      	movs	r1, #46	; 0x2e
 8003eac:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8003eb0:	b10f      	cbz	r7, 8003eb6 <print_e+0x54>
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	dc37      	bgt.n	8003f26 <print_e+0xc4>
 8003eb6:	2e67      	cmp	r6, #103	; 0x67
 8003eb8:	d046      	beq.n	8003f48 <print_e+0xe6>
 8003eba:	2e47      	cmp	r6, #71	; 0x47
 8003ebc:	d046      	beq.n	8003f4c <print_e+0xea>
 8003ebe:	212e      	movs	r1, #46	; 0x2e
 8003ec0:	2030      	movs	r0, #48	; 0x30
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	dc38      	bgt.n	8003f38 <print_e+0xd6>
 8003ec6:	1e51      	subs	r1, r2, #1
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	bfb8      	it	lt
 8003ecc:	f1c2 0201 	rsblt	r2, r2, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	9105      	str	r1, [sp, #20]
 8003ed4:	bfbc      	itt	lt
 8003ed6:	212d      	movlt	r1, #45	; 0x2d
 8003ed8:	9205      	strlt	r2, [sp, #20]
 8003eda:	f800 6b02 	strb.w	r6, [r0], #2
 8003ede:	bfb8      	it	lt
 8003ee0:	7059      	strblt	r1, [r3, #1]
 8003ee2:	9905      	ldr	r1, [sp, #20]
 8003ee4:	bfa4      	itt	ge
 8003ee6:	222b      	movge	r2, #43	; 0x2b
 8003ee8:	705a      	strbge	r2, [r3, #1]
 8003eea:	2963      	cmp	r1, #99	; 0x63
 8003eec:	dd0b      	ble.n	8003f06 <print_e+0xa4>
 8003eee:	2264      	movs	r2, #100	; 0x64
 8003ef0:	fb91 f2f2 	sdiv	r2, r1, r2
 8003ef4:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8003ef8:	1cd8      	adds	r0, r3, #3
 8003efa:	709c      	strb	r4, [r3, #2]
 8003efc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003f00:	fb03 1202 	mla	r2, r3, r2, r1
 8003f04:	9205      	str	r2, [sp, #20]
 8003f06:	9a05      	ldr	r2, [sp, #20]
 8003f08:	230a      	movs	r3, #10
 8003f0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f12:	7001      	strb	r1, [r0, #0]
 8003f14:	f06f 0109 	mvn.w	r1, #9
 8003f18:	fb01 2303 	mla	r3, r1, r3, r2
 8003f1c:	3330      	adds	r3, #48	; 0x30
 8003f1e:	7043      	strb	r3, [r0, #1]
 8003f20:	2300      	movs	r3, #0
 8003f22:	7083      	strb	r3, [r0, #2]
 8003f24:	e7b8      	b.n	8003e98 <print_e+0x36>
 8003f26:	b10d      	cbz	r5, 8003f2c <print_e+0xca>
 8003f28:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2c:	7805      	ldrb	r5, [r0, #0]
 8003f2e:	f803 5b01 	strb.w	r5, [r3], #1
 8003f32:	3c01      	subs	r4, #1
 8003f34:	2500      	movs	r5, #0
 8003f36:	e7b9      	b.n	8003eac <print_e+0x4a>
 8003f38:	b10d      	cbz	r5, 8003f3e <print_e+0xdc>
 8003f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3e:	f803 0b01 	strb.w	r0, [r3], #1
 8003f42:	3c01      	subs	r4, #1
 8003f44:	2500      	movs	r5, #0
 8003f46:	e7bc      	b.n	8003ec2 <print_e+0x60>
 8003f48:	2665      	movs	r6, #101	; 0x65
 8003f4a:	e7bc      	b.n	8003ec6 <print_e+0x64>
 8003f4c:	2645      	movs	r6, #69	; 0x45
 8003f4e:	e7ba      	b.n	8003ec6 <print_e+0x64>

08003f50 <_gcvt>:
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	ec55 4b10 	vmov	r4, r5, d0
 8003f58:	b088      	sub	sp, #32
 8003f5a:	4681      	mov	r9, r0
 8003f5c:	4688      	mov	r8, r1
 8003f5e:	4616      	mov	r6, r2
 8003f60:	469a      	mov	sl, r3
 8003f62:	ee10 0a10 	vmov	r0, s0
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003f6e:	f7fc fdad 	bl	8000acc <__aeabi_dcmplt>
 8003f72:	b110      	cbz	r0, 8003f7a <_gcvt+0x2a>
 8003f74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003f78:	461d      	mov	r5, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc fd99 	bl	8000ab8 <__aeabi_dcmpeq>
 8003f86:	b138      	cbz	r0, 8003f98 <_gcvt+0x48>
 8003f88:	2330      	movs	r3, #48	; 0x30
 8003f8a:	7033      	strb	r3, [r6, #0]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	7073      	strb	r3, [r6, #1]
 8003f90:	4630      	mov	r0, r6
 8003f92:	b008      	add	sp, #32
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	a34b      	add	r3, pc, #300	; (adr r3, 80040c8 <_gcvt+0x178>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f7fc fd9d 	bl	8000ae0 <__aeabi_dcmple>
 8003fa6:	b158      	cbz	r0, 8003fc0 <_gcvt+0x70>
 8003fa8:	f108 31ff 	add.w	r1, r8, #4294967295
 8003fac:	9100      	str	r1, [sp, #0]
 8003fae:	e9cd a701 	strd	sl, r7, [sp, #4]
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4648      	mov	r0, r9
 8003fba:	f7ff ff52 	bl	8003e62 <print_e>
 8003fbe:	e7e7      	b.n	8003f90 <_gcvt+0x40>
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	f000 fc03 	bl	80047cc <_mprec_log10>
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	ec51 0b10 	vmov	r0, r1, d0
 8003fcc:	462b      	mov	r3, r5
 8003fce:	f7fc fd87 	bl	8000ae0 <__aeabi_dcmple>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1e8      	bne.n	8003fa8 <_gcvt+0x58>
 8003fd6:	ab07      	add	r3, sp, #28
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	ab06      	add	r3, sp, #24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4642      	mov	r2, r8
 8003fe0:	ab05      	add	r3, sp, #20
 8003fe2:	ec45 4b10 	vmov	d0, r4, r5
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4648      	mov	r0, r9
 8003fea:	f000 fd31 	bl	8004a50 <_dtoa_r>
 8003fee:	9a05      	ldr	r2, [sp, #20]
 8003ff0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d00e      	beq.n	8004016 <_gcvt+0xc6>
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	44b0      	add	r8, r6
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004002:	9905      	ldr	r1, [sp, #20]
 8004004:	eba8 0203 	sub.w	r2, r8, r3
 8004008:	b10d      	cbz	r5, 800400e <_gcvt+0xbe>
 800400a:	2900      	cmp	r1, #0
 800400c:	dc08      	bgt.n	8004020 <_gcvt+0xd0>
 800400e:	2000      	movs	r0, #0
 8004010:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004014:	e00d      	b.n	8004032 <_gcvt+0xe2>
 8004016:	4601      	mov	r1, r0
 8004018:	4630      	mov	r0, r6
 800401a:	f7ff ff1a 	bl	8003e52 <strcpy>
 800401e:	e7b7      	b.n	8003f90 <_gcvt+0x40>
 8004020:	3901      	subs	r1, #1
 8004022:	f803 5b01 	strb.w	r5, [r3], #1
 8004026:	9105      	str	r1, [sp, #20]
 8004028:	e7e8      	b.n	8003ffc <_gcvt+0xac>
 800402a:	f803 cb01 	strb.w	ip, [r3], #1
 800402e:	3a01      	subs	r2, #1
 8004030:	2001      	movs	r0, #1
 8004032:	2900      	cmp	r1, #0
 8004034:	460d      	mov	r5, r1
 8004036:	dc2a      	bgt.n	800408e <_gcvt+0x13e>
 8004038:	b100      	cbz	r0, 800403c <_gcvt+0xec>
 800403a:	9105      	str	r1, [sp, #20]
 800403c:	b90f      	cbnz	r7, 8004042 <_gcvt+0xf2>
 800403e:	7821      	ldrb	r1, [r4, #0]
 8004040:	b311      	cbz	r1, 8004088 <_gcvt+0x138>
 8004042:	42b3      	cmp	r3, r6
 8004044:	bf04      	itt	eq
 8004046:	2130      	moveq	r1, #48	; 0x30
 8004048:	f803 1b01 	strbeq.w	r1, [r3], #1
 800404c:	212e      	movs	r1, #46	; 0x2e
 800404e:	7019      	strb	r1, [r3, #0]
 8004050:	9905      	ldr	r1, [sp, #20]
 8004052:	4618      	mov	r0, r3
 8004054:	2500      	movs	r5, #0
 8004056:	eba1 0c03 	sub.w	ip, r1, r3
 800405a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800405e:	eb1c 0f00 	cmn.w	ip, r0
 8004062:	d41c      	bmi.n	800409e <_gcvt+0x14e>
 8004064:	2900      	cmp	r1, #0
 8004066:	f1c1 0000 	rsb	r0, r1, #0
 800406a:	bfc8      	it	gt
 800406c:	2000      	movgt	r0, #0
 800406e:	f100 0c01 	add.w	ip, r0, #1
 8004072:	4463      	add	r3, ip
 8004074:	4401      	add	r1, r0
 8004076:	b105      	cbz	r5, 800407a <_gcvt+0x12a>
 8004078:	9105      	str	r1, [sp, #20]
 800407a:	1e61      	subs	r1, r4, #1
 800407c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004080:	b108      	cbz	r0, 8004086 <_gcvt+0x136>
 8004082:	2a00      	cmp	r2, #0
 8004084:	dc0f      	bgt.n	80040a6 <_gcvt+0x156>
 8004086:	b9df      	cbnz	r7, 80040c0 <_gcvt+0x170>
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e780      	b.n	8003f90 <_gcvt+0x40>
 800408e:	2a00      	cmp	r2, #0
 8004090:	f101 31ff 	add.w	r1, r1, #4294967295
 8004094:	dcc9      	bgt.n	800402a <_gcvt+0xda>
 8004096:	2800      	cmp	r0, #0
 8004098:	d0d0      	beq.n	800403c <_gcvt+0xec>
 800409a:	9505      	str	r5, [sp, #20]
 800409c:	e7ce      	b.n	800403c <_gcvt+0xec>
 800409e:	f800 ef01 	strb.w	lr, [r0, #1]!
 80040a2:	2501      	movs	r5, #1
 80040a4:	e7db      	b.n	800405e <_gcvt+0x10e>
 80040a6:	f803 0b01 	strb.w	r0, [r3], #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	e7e6      	b.n	800407c <_gcvt+0x12c>
 80040ae:	f801 5b01 	strb.w	r5, [r1], #1
 80040b2:	1a60      	subs	r0, r4, r1
 80040b4:	2800      	cmp	r0, #0
 80040b6:	dcfa      	bgt.n	80040ae <_gcvt+0x15e>
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	bfa8      	it	ge
 80040bc:	189b      	addge	r3, r3, r2
 80040be:	e7e3      	b.n	8004088 <_gcvt+0x138>
 80040c0:	4619      	mov	r1, r3
 80040c2:	189c      	adds	r4, r3, r2
 80040c4:	2530      	movs	r5, #48	; 0x30
 80040c6:	e7f4      	b.n	80040b2 <_gcvt+0x162>
 80040c8:	eb1c432d 	.word	0xeb1c432d
 80040cc:	3f1a36e2 	.word	0x3f1a36e2

080040d0 <_Balloc>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040d4:	4604      	mov	r4, r0
 80040d6:	460d      	mov	r5, r1
 80040d8:	b976      	cbnz	r6, 80040f8 <_Balloc+0x28>
 80040da:	2010      	movs	r0, #16
 80040dc:	f001 fab6 	bl	800564c <malloc>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6260      	str	r0, [r4, #36]	; 0x24
 80040e4:	b920      	cbnz	r0, 80040f0 <_Balloc+0x20>
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <_Balloc+0x78>)
 80040e8:	4818      	ldr	r0, [pc, #96]	; (800414c <_Balloc+0x7c>)
 80040ea:	2166      	movs	r1, #102	; 0x66
 80040ec:	f000 fc06 	bl	80048fc <__assert_func>
 80040f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040f4:	6006      	str	r6, [r0, #0]
 80040f6:	60c6      	str	r6, [r0, #12]
 80040f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80040fa:	68f3      	ldr	r3, [r6, #12]
 80040fc:	b183      	cbz	r3, 8004120 <_Balloc+0x50>
 80040fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004106:	b9b8      	cbnz	r0, 8004138 <_Balloc+0x68>
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f605 	lsl.w	r6, r1, r5
 800410e:	1d72      	adds	r2, r6, #5
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	4620      	mov	r0, r4
 8004114:	f000 fb78 	bl	8004808 <_calloc_r>
 8004118:	b160      	cbz	r0, 8004134 <_Balloc+0x64>
 800411a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800411e:	e00e      	b.n	800413e <_Balloc+0x6e>
 8004120:	2221      	movs	r2, #33	; 0x21
 8004122:	2104      	movs	r1, #4
 8004124:	4620      	mov	r0, r4
 8004126:	f000 fb6f 	bl	8004808 <_calloc_r>
 800412a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412c:	60f0      	str	r0, [r6, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e4      	bne.n	80040fe <_Balloc+0x2e>
 8004134:	2000      	movs	r0, #0
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	6802      	ldr	r2, [r0, #0]
 800413a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800413e:	2300      	movs	r3, #0
 8004140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004144:	e7f7      	b.n	8004136 <_Balloc+0x66>
 8004146:	bf00      	nop
 8004148:	08006524 	.word	0x08006524
 800414c:	0800653b 	.word	0x0800653b

08004150 <_Bfree>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004154:	4605      	mov	r5, r0
 8004156:	460c      	mov	r4, r1
 8004158:	b976      	cbnz	r6, 8004178 <_Bfree+0x28>
 800415a:	2010      	movs	r0, #16
 800415c:	f001 fa76 	bl	800564c <malloc>
 8004160:	4602      	mov	r2, r0
 8004162:	6268      	str	r0, [r5, #36]	; 0x24
 8004164:	b920      	cbnz	r0, 8004170 <_Bfree+0x20>
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <_Bfree+0x3c>)
 8004168:	4809      	ldr	r0, [pc, #36]	; (8004190 <_Bfree+0x40>)
 800416a:	218a      	movs	r1, #138	; 0x8a
 800416c:	f000 fbc6 	bl	80048fc <__assert_func>
 8004170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004174:	6006      	str	r6, [r0, #0]
 8004176:	60c6      	str	r6, [r0, #12]
 8004178:	b13c      	cbz	r4, 800418a <_Bfree+0x3a>
 800417a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004184:	6021      	str	r1, [r4, #0]
 8004186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	08006524 	.word	0x08006524
 8004190:	0800653b 	.word	0x0800653b

08004194 <__multadd>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	690e      	ldr	r6, [r1, #16]
 800419a:	4607      	mov	r7, r0
 800419c:	4698      	mov	r8, r3
 800419e:	460c      	mov	r4, r1
 80041a0:	f101 0014 	add.w	r0, r1, #20
 80041a4:	2300      	movs	r3, #0
 80041a6:	6805      	ldr	r5, [r0, #0]
 80041a8:	b2a9      	uxth	r1, r5
 80041aa:	fb02 8101 	mla	r1, r2, r1, r8
 80041ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80041b2:	0c2d      	lsrs	r5, r5, #16
 80041b4:	fb02 c505 	mla	r5, r2, r5, ip
 80041b8:	b289      	uxth	r1, r1
 80041ba:	3301      	adds	r3, #1
 80041bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80041c0:	429e      	cmp	r6, r3
 80041c2:	f840 1b04 	str.w	r1, [r0], #4
 80041c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80041ca:	dcec      	bgt.n	80041a6 <__multadd+0x12>
 80041cc:	f1b8 0f00 	cmp.w	r8, #0
 80041d0:	d022      	beq.n	8004218 <__multadd+0x84>
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	42b3      	cmp	r3, r6
 80041d6:	dc19      	bgt.n	800420c <__multadd+0x78>
 80041d8:	6861      	ldr	r1, [r4, #4]
 80041da:	4638      	mov	r0, r7
 80041dc:	3101      	adds	r1, #1
 80041de:	f7ff ff77 	bl	80040d0 <_Balloc>
 80041e2:	4605      	mov	r5, r0
 80041e4:	b928      	cbnz	r0, 80041f2 <__multadd+0x5e>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <__multadd+0x8c>)
 80041ea:	480e      	ldr	r0, [pc, #56]	; (8004224 <__multadd+0x90>)
 80041ec:	21b5      	movs	r1, #181	; 0xb5
 80041ee:	f000 fb85 	bl	80048fc <__assert_func>
 80041f2:	6922      	ldr	r2, [r4, #16]
 80041f4:	3202      	adds	r2, #2
 80041f6:	f104 010c 	add.w	r1, r4, #12
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	300c      	adds	r0, #12
 80041fe:	f001 fa2d 	bl	800565c <memcpy>
 8004202:	4621      	mov	r1, r4
 8004204:	4638      	mov	r0, r7
 8004206:	f7ff ffa3 	bl	8004150 <_Bfree>
 800420a:	462c      	mov	r4, r5
 800420c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004210:	3601      	adds	r6, #1
 8004212:	f8c3 8014 	str.w	r8, [r3, #20]
 8004216:	6126      	str	r6, [r4, #16]
 8004218:	4620      	mov	r0, r4
 800421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800421e:	bf00      	nop
 8004220:	0800659b 	.word	0x0800659b
 8004224:	0800653b 	.word	0x0800653b

08004228 <__hi0bits>:
 8004228:	0c03      	lsrs	r3, r0, #16
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	b9d3      	cbnz	r3, 8004264 <__hi0bits+0x3c>
 800422e:	0400      	lsls	r0, r0, #16
 8004230:	2310      	movs	r3, #16
 8004232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004236:	bf04      	itt	eq
 8004238:	0200      	lsleq	r0, r0, #8
 800423a:	3308      	addeq	r3, #8
 800423c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004240:	bf04      	itt	eq
 8004242:	0100      	lsleq	r0, r0, #4
 8004244:	3304      	addeq	r3, #4
 8004246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800424a:	bf04      	itt	eq
 800424c:	0080      	lsleq	r0, r0, #2
 800424e:	3302      	addeq	r3, #2
 8004250:	2800      	cmp	r0, #0
 8004252:	db05      	blt.n	8004260 <__hi0bits+0x38>
 8004254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004258:	f103 0301 	add.w	r3, r3, #1
 800425c:	bf08      	it	eq
 800425e:	2320      	moveq	r3, #32
 8004260:	4618      	mov	r0, r3
 8004262:	4770      	bx	lr
 8004264:	2300      	movs	r3, #0
 8004266:	e7e4      	b.n	8004232 <__hi0bits+0xa>

08004268 <__lo0bits>:
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	f013 0207 	ands.w	r2, r3, #7
 800426e:	4601      	mov	r1, r0
 8004270:	d00b      	beq.n	800428a <__lo0bits+0x22>
 8004272:	07da      	lsls	r2, r3, #31
 8004274:	d424      	bmi.n	80042c0 <__lo0bits+0x58>
 8004276:	0798      	lsls	r0, r3, #30
 8004278:	bf49      	itett	mi
 800427a:	085b      	lsrmi	r3, r3, #1
 800427c:	089b      	lsrpl	r3, r3, #2
 800427e:	2001      	movmi	r0, #1
 8004280:	600b      	strmi	r3, [r1, #0]
 8004282:	bf5c      	itt	pl
 8004284:	600b      	strpl	r3, [r1, #0]
 8004286:	2002      	movpl	r0, #2
 8004288:	4770      	bx	lr
 800428a:	b298      	uxth	r0, r3
 800428c:	b9b0      	cbnz	r0, 80042bc <__lo0bits+0x54>
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	2010      	movs	r0, #16
 8004292:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004296:	bf04      	itt	eq
 8004298:	0a1b      	lsreq	r3, r3, #8
 800429a:	3008      	addeq	r0, #8
 800429c:	071a      	lsls	r2, r3, #28
 800429e:	bf04      	itt	eq
 80042a0:	091b      	lsreq	r3, r3, #4
 80042a2:	3004      	addeq	r0, #4
 80042a4:	079a      	lsls	r2, r3, #30
 80042a6:	bf04      	itt	eq
 80042a8:	089b      	lsreq	r3, r3, #2
 80042aa:	3002      	addeq	r0, #2
 80042ac:	07da      	lsls	r2, r3, #31
 80042ae:	d403      	bmi.n	80042b8 <__lo0bits+0x50>
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	f100 0001 	add.w	r0, r0, #1
 80042b6:	d005      	beq.n	80042c4 <__lo0bits+0x5c>
 80042b8:	600b      	str	r3, [r1, #0]
 80042ba:	4770      	bx	lr
 80042bc:	4610      	mov	r0, r2
 80042be:	e7e8      	b.n	8004292 <__lo0bits+0x2a>
 80042c0:	2000      	movs	r0, #0
 80042c2:	4770      	bx	lr
 80042c4:	2020      	movs	r0, #32
 80042c6:	4770      	bx	lr

080042c8 <__i2b>:
 80042c8:	b510      	push	{r4, lr}
 80042ca:	460c      	mov	r4, r1
 80042cc:	2101      	movs	r1, #1
 80042ce:	f7ff feff 	bl	80040d0 <_Balloc>
 80042d2:	4602      	mov	r2, r0
 80042d4:	b928      	cbnz	r0, 80042e2 <__i2b+0x1a>
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <__i2b+0x24>)
 80042d8:	4805      	ldr	r0, [pc, #20]	; (80042f0 <__i2b+0x28>)
 80042da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80042de:	f000 fb0d 	bl	80048fc <__assert_func>
 80042e2:	2301      	movs	r3, #1
 80042e4:	6144      	str	r4, [r0, #20]
 80042e6:	6103      	str	r3, [r0, #16]
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	bf00      	nop
 80042ec:	0800659b 	.word	0x0800659b
 80042f0:	0800653b 	.word	0x0800653b

080042f4 <__multiply>:
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	4614      	mov	r4, r2
 80042fa:	690a      	ldr	r2, [r1, #16]
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bfb8      	it	lt
 8004302:	460b      	movlt	r3, r1
 8004304:	460d      	mov	r5, r1
 8004306:	bfbc      	itt	lt
 8004308:	4625      	movlt	r5, r4
 800430a:	461c      	movlt	r4, r3
 800430c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004310:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004314:	68ab      	ldr	r3, [r5, #8]
 8004316:	6869      	ldr	r1, [r5, #4]
 8004318:	eb0a 0709 	add.w	r7, sl, r9
 800431c:	42bb      	cmp	r3, r7
 800431e:	b085      	sub	sp, #20
 8004320:	bfb8      	it	lt
 8004322:	3101      	addlt	r1, #1
 8004324:	f7ff fed4 	bl	80040d0 <_Balloc>
 8004328:	b930      	cbnz	r0, 8004338 <__multiply+0x44>
 800432a:	4602      	mov	r2, r0
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <__multiply+0x144>)
 800432e:	4843      	ldr	r0, [pc, #268]	; (800443c <__multiply+0x148>)
 8004330:	f240 115d 	movw	r1, #349	; 0x15d
 8004334:	f000 fae2 	bl	80048fc <__assert_func>
 8004338:	f100 0614 	add.w	r6, r0, #20
 800433c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004340:	4633      	mov	r3, r6
 8004342:	2200      	movs	r2, #0
 8004344:	4543      	cmp	r3, r8
 8004346:	d31e      	bcc.n	8004386 <__multiply+0x92>
 8004348:	f105 0c14 	add.w	ip, r5, #20
 800434c:	f104 0314 	add.w	r3, r4, #20
 8004350:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004354:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004358:	9202      	str	r2, [sp, #8]
 800435a:	ebac 0205 	sub.w	r2, ip, r5
 800435e:	3a15      	subs	r2, #21
 8004360:	f022 0203 	bic.w	r2, r2, #3
 8004364:	3204      	adds	r2, #4
 8004366:	f105 0115 	add.w	r1, r5, #21
 800436a:	458c      	cmp	ip, r1
 800436c:	bf38      	it	cc
 800436e:	2204      	movcc	r2, #4
 8004370:	9201      	str	r2, [sp, #4]
 8004372:	9a02      	ldr	r2, [sp, #8]
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	d808      	bhi.n	800438c <__multiply+0x98>
 800437a:	2f00      	cmp	r7, #0
 800437c:	dc55      	bgt.n	800442a <__multiply+0x136>
 800437e:	6107      	str	r7, [r0, #16]
 8004380:	b005      	add	sp, #20
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	f843 2b04 	str.w	r2, [r3], #4
 800438a:	e7db      	b.n	8004344 <__multiply+0x50>
 800438c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004390:	f1ba 0f00 	cmp.w	sl, #0
 8004394:	d020      	beq.n	80043d8 <__multiply+0xe4>
 8004396:	f105 0e14 	add.w	lr, r5, #20
 800439a:	46b1      	mov	r9, r6
 800439c:	2200      	movs	r2, #0
 800439e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80043a2:	f8d9 b000 	ldr.w	fp, [r9]
 80043a6:	b2a1      	uxth	r1, r4
 80043a8:	fa1f fb8b 	uxth.w	fp, fp
 80043ac:	fb0a b101 	mla	r1, sl, r1, fp
 80043b0:	4411      	add	r1, r2
 80043b2:	f8d9 2000 	ldr.w	r2, [r9]
 80043b6:	0c24      	lsrs	r4, r4, #16
 80043b8:	0c12      	lsrs	r2, r2, #16
 80043ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80043be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80043c2:	b289      	uxth	r1, r1
 80043c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80043c8:	45f4      	cmp	ip, lr
 80043ca:	f849 1b04 	str.w	r1, [r9], #4
 80043ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80043d2:	d8e4      	bhi.n	800439e <__multiply+0xaa>
 80043d4:	9901      	ldr	r1, [sp, #4]
 80043d6:	5072      	str	r2, [r6, r1]
 80043d8:	9a03      	ldr	r2, [sp, #12]
 80043da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80043de:	3304      	adds	r3, #4
 80043e0:	f1b9 0f00 	cmp.w	r9, #0
 80043e4:	d01f      	beq.n	8004426 <__multiply+0x132>
 80043e6:	6834      	ldr	r4, [r6, #0]
 80043e8:	f105 0114 	add.w	r1, r5, #20
 80043ec:	46b6      	mov	lr, r6
 80043ee:	f04f 0a00 	mov.w	sl, #0
 80043f2:	880a      	ldrh	r2, [r1, #0]
 80043f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80043f8:	fb09 b202 	mla	r2, r9, r2, fp
 80043fc:	4492      	add	sl, r2
 80043fe:	b2a4      	uxth	r4, r4
 8004400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004404:	f84e 4b04 	str.w	r4, [lr], #4
 8004408:	f851 4b04 	ldr.w	r4, [r1], #4
 800440c:	f8be 2000 	ldrh.w	r2, [lr]
 8004410:	0c24      	lsrs	r4, r4, #16
 8004412:	fb09 2404 	mla	r4, r9, r4, r2
 8004416:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800441a:	458c      	cmp	ip, r1
 800441c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004420:	d8e7      	bhi.n	80043f2 <__multiply+0xfe>
 8004422:	9a01      	ldr	r2, [sp, #4]
 8004424:	50b4      	str	r4, [r6, r2]
 8004426:	3604      	adds	r6, #4
 8004428:	e7a3      	b.n	8004372 <__multiply+0x7e>
 800442a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1a5      	bne.n	800437e <__multiply+0x8a>
 8004432:	3f01      	subs	r7, #1
 8004434:	e7a1      	b.n	800437a <__multiply+0x86>
 8004436:	bf00      	nop
 8004438:	0800659b 	.word	0x0800659b
 800443c:	0800653b 	.word	0x0800653b

08004440 <__pow5mult>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	4615      	mov	r5, r2
 8004446:	f012 0203 	ands.w	r2, r2, #3
 800444a:	4606      	mov	r6, r0
 800444c:	460f      	mov	r7, r1
 800444e:	d007      	beq.n	8004460 <__pow5mult+0x20>
 8004450:	4c25      	ldr	r4, [pc, #148]	; (80044e8 <__pow5mult+0xa8>)
 8004452:	3a01      	subs	r2, #1
 8004454:	2300      	movs	r3, #0
 8004456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800445a:	f7ff fe9b 	bl	8004194 <__multadd>
 800445e:	4607      	mov	r7, r0
 8004460:	10ad      	asrs	r5, r5, #2
 8004462:	d03d      	beq.n	80044e0 <__pow5mult+0xa0>
 8004464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004466:	b97c      	cbnz	r4, 8004488 <__pow5mult+0x48>
 8004468:	2010      	movs	r0, #16
 800446a:	f001 f8ef 	bl	800564c <malloc>
 800446e:	4602      	mov	r2, r0
 8004470:	6270      	str	r0, [r6, #36]	; 0x24
 8004472:	b928      	cbnz	r0, 8004480 <__pow5mult+0x40>
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <__pow5mult+0xac>)
 8004476:	481e      	ldr	r0, [pc, #120]	; (80044f0 <__pow5mult+0xb0>)
 8004478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800447c:	f000 fa3e 	bl	80048fc <__assert_func>
 8004480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004484:	6004      	str	r4, [r0, #0]
 8004486:	60c4      	str	r4, [r0, #12]
 8004488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800448c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004490:	b94c      	cbnz	r4, 80044a6 <__pow5mult+0x66>
 8004492:	f240 2171 	movw	r1, #625	; 0x271
 8004496:	4630      	mov	r0, r6
 8004498:	f7ff ff16 	bl	80042c8 <__i2b>
 800449c:	2300      	movs	r3, #0
 800449e:	f8c8 0008 	str.w	r0, [r8, #8]
 80044a2:	4604      	mov	r4, r0
 80044a4:	6003      	str	r3, [r0, #0]
 80044a6:	f04f 0900 	mov.w	r9, #0
 80044aa:	07eb      	lsls	r3, r5, #31
 80044ac:	d50a      	bpl.n	80044c4 <__pow5mult+0x84>
 80044ae:	4639      	mov	r1, r7
 80044b0:	4622      	mov	r2, r4
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ff1e 	bl	80042f4 <__multiply>
 80044b8:	4639      	mov	r1, r7
 80044ba:	4680      	mov	r8, r0
 80044bc:	4630      	mov	r0, r6
 80044be:	f7ff fe47 	bl	8004150 <_Bfree>
 80044c2:	4647      	mov	r7, r8
 80044c4:	106d      	asrs	r5, r5, #1
 80044c6:	d00b      	beq.n	80044e0 <__pow5mult+0xa0>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	b938      	cbnz	r0, 80044dc <__pow5mult+0x9c>
 80044cc:	4622      	mov	r2, r4
 80044ce:	4621      	mov	r1, r4
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7ff ff0f 	bl	80042f4 <__multiply>
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	f8c0 9000 	str.w	r9, [r0]
 80044dc:	4604      	mov	r4, r0
 80044de:	e7e4      	b.n	80044aa <__pow5mult+0x6a>
 80044e0:	4638      	mov	r0, r7
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e6:	bf00      	nop
 80044e8:	080066a0 	.word	0x080066a0
 80044ec:	08006524 	.word	0x08006524
 80044f0:	0800653b 	.word	0x0800653b

080044f4 <__lshift>:
 80044f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	6849      	ldr	r1, [r1, #4]
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004502:	68a3      	ldr	r3, [r4, #8]
 8004504:	4607      	mov	r7, r0
 8004506:	4691      	mov	r9, r2
 8004508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800450c:	f108 0601 	add.w	r6, r8, #1
 8004510:	42b3      	cmp	r3, r6
 8004512:	db0b      	blt.n	800452c <__lshift+0x38>
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff fddb 	bl	80040d0 <_Balloc>
 800451a:	4605      	mov	r5, r0
 800451c:	b948      	cbnz	r0, 8004532 <__lshift+0x3e>
 800451e:	4602      	mov	r2, r0
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <__lshift+0xd0>)
 8004522:	4829      	ldr	r0, [pc, #164]	; (80045c8 <__lshift+0xd4>)
 8004524:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004528:	f000 f9e8 	bl	80048fc <__assert_func>
 800452c:	3101      	adds	r1, #1
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	e7ee      	b.n	8004510 <__lshift+0x1c>
 8004532:	2300      	movs	r3, #0
 8004534:	f100 0114 	add.w	r1, r0, #20
 8004538:	f100 0210 	add.w	r2, r0, #16
 800453c:	4618      	mov	r0, r3
 800453e:	4553      	cmp	r3, sl
 8004540:	db33      	blt.n	80045aa <__lshift+0xb6>
 8004542:	6920      	ldr	r0, [r4, #16]
 8004544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004548:	f104 0314 	add.w	r3, r4, #20
 800454c:	f019 091f 	ands.w	r9, r9, #31
 8004550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004558:	d02b      	beq.n	80045b2 <__lshift+0xbe>
 800455a:	f1c9 0e20 	rsb	lr, r9, #32
 800455e:	468a      	mov	sl, r1
 8004560:	2200      	movs	r2, #0
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	fa00 f009 	lsl.w	r0, r0, r9
 8004568:	4302      	orrs	r2, r0
 800456a:	f84a 2b04 	str.w	r2, [sl], #4
 800456e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004572:	459c      	cmp	ip, r3
 8004574:	fa22 f20e 	lsr.w	r2, r2, lr
 8004578:	d8f3      	bhi.n	8004562 <__lshift+0x6e>
 800457a:	ebac 0304 	sub.w	r3, ip, r4
 800457e:	3b15      	subs	r3, #21
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	3304      	adds	r3, #4
 8004586:	f104 0015 	add.w	r0, r4, #21
 800458a:	4584      	cmp	ip, r0
 800458c:	bf38      	it	cc
 800458e:	2304      	movcc	r3, #4
 8004590:	50ca      	str	r2, [r1, r3]
 8004592:	b10a      	cbz	r2, 8004598 <__lshift+0xa4>
 8004594:	f108 0602 	add.w	r6, r8, #2
 8004598:	3e01      	subs	r6, #1
 800459a:	4638      	mov	r0, r7
 800459c:	612e      	str	r6, [r5, #16]
 800459e:	4621      	mov	r1, r4
 80045a0:	f7ff fdd6 	bl	8004150 <_Bfree>
 80045a4:	4628      	mov	r0, r5
 80045a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80045ae:	3301      	adds	r3, #1
 80045b0:	e7c5      	b.n	800453e <__lshift+0x4a>
 80045b2:	3904      	subs	r1, #4
 80045b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80045bc:	459c      	cmp	ip, r3
 80045be:	d8f9      	bhi.n	80045b4 <__lshift+0xc0>
 80045c0:	e7ea      	b.n	8004598 <__lshift+0xa4>
 80045c2:	bf00      	nop
 80045c4:	0800659b 	.word	0x0800659b
 80045c8:	0800653b 	.word	0x0800653b

080045cc <__mcmp>:
 80045cc:	b530      	push	{r4, r5, lr}
 80045ce:	6902      	ldr	r2, [r0, #16]
 80045d0:	690c      	ldr	r4, [r1, #16]
 80045d2:	1b12      	subs	r2, r2, r4
 80045d4:	d10e      	bne.n	80045f4 <__mcmp+0x28>
 80045d6:	f100 0314 	add.w	r3, r0, #20
 80045da:	3114      	adds	r1, #20
 80045dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80045e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80045e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80045e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80045ec:	42a5      	cmp	r5, r4
 80045ee:	d003      	beq.n	80045f8 <__mcmp+0x2c>
 80045f0:	d305      	bcc.n	80045fe <__mcmp+0x32>
 80045f2:	2201      	movs	r2, #1
 80045f4:	4610      	mov	r0, r2
 80045f6:	bd30      	pop	{r4, r5, pc}
 80045f8:	4283      	cmp	r3, r0
 80045fa:	d3f3      	bcc.n	80045e4 <__mcmp+0x18>
 80045fc:	e7fa      	b.n	80045f4 <__mcmp+0x28>
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	e7f7      	b.n	80045f4 <__mcmp+0x28>

08004604 <__mdiff>:
 8004604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	460c      	mov	r4, r1
 800460a:	4606      	mov	r6, r0
 800460c:	4611      	mov	r1, r2
 800460e:	4620      	mov	r0, r4
 8004610:	4617      	mov	r7, r2
 8004612:	f7ff ffdb 	bl	80045cc <__mcmp>
 8004616:	1e05      	subs	r5, r0, #0
 8004618:	d110      	bne.n	800463c <__mdiff+0x38>
 800461a:	4629      	mov	r1, r5
 800461c:	4630      	mov	r0, r6
 800461e:	f7ff fd57 	bl	80040d0 <_Balloc>
 8004622:	b930      	cbnz	r0, 8004632 <__mdiff+0x2e>
 8004624:	4b39      	ldr	r3, [pc, #228]	; (800470c <__mdiff+0x108>)
 8004626:	4602      	mov	r2, r0
 8004628:	f240 2132 	movw	r1, #562	; 0x232
 800462c:	4838      	ldr	r0, [pc, #224]	; (8004710 <__mdiff+0x10c>)
 800462e:	f000 f965 	bl	80048fc <__assert_func>
 8004632:	2301      	movs	r3, #1
 8004634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463c:	bfa4      	itt	ge
 800463e:	463b      	movge	r3, r7
 8004640:	4627      	movge	r7, r4
 8004642:	4630      	mov	r0, r6
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	bfa6      	itte	ge
 8004648:	461c      	movge	r4, r3
 800464a:	2500      	movge	r5, #0
 800464c:	2501      	movlt	r5, #1
 800464e:	f7ff fd3f 	bl	80040d0 <_Balloc>
 8004652:	b920      	cbnz	r0, 800465e <__mdiff+0x5a>
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <__mdiff+0x108>)
 8004656:	4602      	mov	r2, r0
 8004658:	f44f 7110 	mov.w	r1, #576	; 0x240
 800465c:	e7e6      	b.n	800462c <__mdiff+0x28>
 800465e:	693e      	ldr	r6, [r7, #16]
 8004660:	60c5      	str	r5, [r0, #12]
 8004662:	6925      	ldr	r5, [r4, #16]
 8004664:	f107 0114 	add.w	r1, r7, #20
 8004668:	f104 0914 	add.w	r9, r4, #20
 800466c:	f100 0e14 	add.w	lr, r0, #20
 8004670:	f107 0210 	add.w	r2, r7, #16
 8004674:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004678:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800467c:	46f2      	mov	sl, lr
 800467e:	2700      	movs	r7, #0
 8004680:	f859 3b04 	ldr.w	r3, [r9], #4
 8004684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004688:	fa1f f883 	uxth.w	r8, r3
 800468c:	fa17 f78b 	uxtah	r7, r7, fp
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	eba7 0808 	sub.w	r8, r7, r8
 8004696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800469a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800469e:	fa1f f888 	uxth.w	r8, r8
 80046a2:	141f      	asrs	r7, r3, #16
 80046a4:	454d      	cmp	r5, r9
 80046a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80046aa:	f84a 3b04 	str.w	r3, [sl], #4
 80046ae:	d8e7      	bhi.n	8004680 <__mdiff+0x7c>
 80046b0:	1b2b      	subs	r3, r5, r4
 80046b2:	3b15      	subs	r3, #21
 80046b4:	f023 0303 	bic.w	r3, r3, #3
 80046b8:	3304      	adds	r3, #4
 80046ba:	3415      	adds	r4, #21
 80046bc:	42a5      	cmp	r5, r4
 80046be:	bf38      	it	cc
 80046c0:	2304      	movcc	r3, #4
 80046c2:	4419      	add	r1, r3
 80046c4:	4473      	add	r3, lr
 80046c6:	469e      	mov	lr, r3
 80046c8:	460d      	mov	r5, r1
 80046ca:	4565      	cmp	r5, ip
 80046cc:	d30e      	bcc.n	80046ec <__mdiff+0xe8>
 80046ce:	f10c 0203 	add.w	r2, ip, #3
 80046d2:	1a52      	subs	r2, r2, r1
 80046d4:	f022 0203 	bic.w	r2, r2, #3
 80046d8:	3903      	subs	r1, #3
 80046da:	458c      	cmp	ip, r1
 80046dc:	bf38      	it	cc
 80046de:	2200      	movcc	r2, #0
 80046e0:	441a      	add	r2, r3
 80046e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80046e6:	b17b      	cbz	r3, 8004708 <__mdiff+0x104>
 80046e8:	6106      	str	r6, [r0, #16]
 80046ea:	e7a5      	b.n	8004638 <__mdiff+0x34>
 80046ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80046f0:	fa17 f488 	uxtah	r4, r7, r8
 80046f4:	1422      	asrs	r2, r4, #16
 80046f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80046fa:	b2a4      	uxth	r4, r4
 80046fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004700:	f84e 4b04 	str.w	r4, [lr], #4
 8004704:	1417      	asrs	r7, r2, #16
 8004706:	e7e0      	b.n	80046ca <__mdiff+0xc6>
 8004708:	3e01      	subs	r6, #1
 800470a:	e7ea      	b.n	80046e2 <__mdiff+0xde>
 800470c:	0800659b 	.word	0x0800659b
 8004710:	0800653b 	.word	0x0800653b

08004714 <__d2b>:
 8004714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004718:	4689      	mov	r9, r1
 800471a:	2101      	movs	r1, #1
 800471c:	ec57 6b10 	vmov	r6, r7, d0
 8004720:	4690      	mov	r8, r2
 8004722:	f7ff fcd5 	bl	80040d0 <_Balloc>
 8004726:	4604      	mov	r4, r0
 8004728:	b930      	cbnz	r0, 8004738 <__d2b+0x24>
 800472a:	4602      	mov	r2, r0
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <__d2b+0xb0>)
 800472e:	4826      	ldr	r0, [pc, #152]	; (80047c8 <__d2b+0xb4>)
 8004730:	f240 310a 	movw	r1, #778	; 0x30a
 8004734:	f000 f8e2 	bl	80048fc <__assert_func>
 8004738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800473c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004740:	bb35      	cbnz	r5, 8004790 <__d2b+0x7c>
 8004742:	2e00      	cmp	r6, #0
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	d028      	beq.n	800479a <__d2b+0x86>
 8004748:	4668      	mov	r0, sp
 800474a:	9600      	str	r6, [sp, #0]
 800474c:	f7ff fd8c 	bl	8004268 <__lo0bits>
 8004750:	9900      	ldr	r1, [sp, #0]
 8004752:	b300      	cbz	r0, 8004796 <__d2b+0x82>
 8004754:	9a01      	ldr	r2, [sp, #4]
 8004756:	f1c0 0320 	rsb	r3, r0, #32
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	430b      	orrs	r3, r1
 8004760:	40c2      	lsrs	r2, r0
 8004762:	6163      	str	r3, [r4, #20]
 8004764:	9201      	str	r2, [sp, #4]
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	61a3      	str	r3, [r4, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2202      	movne	r2, #2
 8004770:	2201      	moveq	r2, #1
 8004772:	6122      	str	r2, [r4, #16]
 8004774:	b1d5      	cbz	r5, 80047ac <__d2b+0x98>
 8004776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800477a:	4405      	add	r5, r0
 800477c:	f8c9 5000 	str.w	r5, [r9]
 8004780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004784:	f8c8 0000 	str.w	r0, [r8]
 8004788:	4620      	mov	r0, r4
 800478a:	b003      	add	sp, #12
 800478c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004794:	e7d5      	b.n	8004742 <__d2b+0x2e>
 8004796:	6161      	str	r1, [r4, #20]
 8004798:	e7e5      	b.n	8004766 <__d2b+0x52>
 800479a:	a801      	add	r0, sp, #4
 800479c:	f7ff fd64 	bl	8004268 <__lo0bits>
 80047a0:	9b01      	ldr	r3, [sp, #4]
 80047a2:	6163      	str	r3, [r4, #20]
 80047a4:	2201      	movs	r2, #1
 80047a6:	6122      	str	r2, [r4, #16]
 80047a8:	3020      	adds	r0, #32
 80047aa:	e7e3      	b.n	8004774 <__d2b+0x60>
 80047ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80047b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047b4:	f8c9 0000 	str.w	r0, [r9]
 80047b8:	6918      	ldr	r0, [r3, #16]
 80047ba:	f7ff fd35 	bl	8004228 <__hi0bits>
 80047be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80047c2:	e7df      	b.n	8004784 <__d2b+0x70>
 80047c4:	0800659b 	.word	0x0800659b
 80047c8:	0800653b 	.word	0x0800653b

080047cc <_mprec_log10>:
 80047cc:	2817      	cmp	r0, #23
 80047ce:	b5d0      	push	{r4, r6, r7, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	dc07      	bgt.n	80047e4 <_mprec_log10+0x18>
 80047d4:	4809      	ldr	r0, [pc, #36]	; (80047fc <_mprec_log10+0x30>)
 80047d6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80047da:	e9d4 0100 	ldrd	r0, r1, [r4]
 80047de:	ec41 0b10 	vmov	d0, r0, r1
 80047e2:	bdd0      	pop	{r4, r6, r7, pc}
 80047e4:	4906      	ldr	r1, [pc, #24]	; (8004800 <_mprec_log10+0x34>)
 80047e6:	4f07      	ldr	r7, [pc, #28]	; (8004804 <_mprec_log10+0x38>)
 80047e8:	2000      	movs	r0, #0
 80047ea:	2600      	movs	r6, #0
 80047ec:	4632      	mov	r2, r6
 80047ee:	463b      	mov	r3, r7
 80047f0:	f7fb fefa 	bl	80005e8 <__aeabi_dmul>
 80047f4:	3c01      	subs	r4, #1
 80047f6:	d1f9      	bne.n	80047ec <_mprec_log10+0x20>
 80047f8:	e7f1      	b.n	80047de <_mprec_log10+0x12>
 80047fa:	bf00      	nop
 80047fc:	080065d8 	.word	0x080065d8
 8004800:	3ff00000 	.word	0x3ff00000
 8004804:	40240000 	.word	0x40240000

08004808 <_calloc_r>:
 8004808:	b513      	push	{r0, r1, r4, lr}
 800480a:	434a      	muls	r2, r1
 800480c:	4611      	mov	r1, r2
 800480e:	9201      	str	r2, [sp, #4]
 8004810:	f000 f80a 	bl	8004828 <_malloc_r>
 8004814:	4604      	mov	r4, r0
 8004816:	b118      	cbz	r0, 8004820 <_calloc_r+0x18>
 8004818:	9a01      	ldr	r2, [sp, #4]
 800481a:	2100      	movs	r1, #0
 800481c:	f7ff fb02 	bl	8003e24 <memset>
 8004820:	4620      	mov	r0, r4
 8004822:	b002      	add	sp, #8
 8004824:	bd10      	pop	{r4, pc}
	...

08004828 <_malloc_r>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	1ccd      	adds	r5, r1, #3
 800482c:	f025 0503 	bic.w	r5, r5, #3
 8004830:	3508      	adds	r5, #8
 8004832:	2d0c      	cmp	r5, #12
 8004834:	bf38      	it	cc
 8004836:	250c      	movcc	r5, #12
 8004838:	2d00      	cmp	r5, #0
 800483a:	4606      	mov	r6, r0
 800483c:	db01      	blt.n	8004842 <_malloc_r+0x1a>
 800483e:	42a9      	cmp	r1, r5
 8004840:	d903      	bls.n	800484a <_malloc_r+0x22>
 8004842:	230c      	movs	r3, #12
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	2000      	movs	r0, #0
 8004848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484a:	f000 ff15 	bl	8005678 <__malloc_lock>
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <_malloc_r+0xac>)
 8004850:	680a      	ldr	r2, [r1, #0]
 8004852:	4614      	mov	r4, r2
 8004854:	b99c      	cbnz	r4, 800487e <_malloc_r+0x56>
 8004856:	4f20      	ldr	r7, [pc, #128]	; (80048d8 <_malloc_r+0xb0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b923      	cbnz	r3, 8004866 <_malloc_r+0x3e>
 800485c:	4621      	mov	r1, r4
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f83c 	bl	80048dc <_sbrk_r>
 8004864:	6038      	str	r0, [r7, #0]
 8004866:	4629      	mov	r1, r5
 8004868:	4630      	mov	r0, r6
 800486a:	f000 f837 	bl	80048dc <_sbrk_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	d123      	bne.n	80048ba <_malloc_r+0x92>
 8004872:	230c      	movs	r3, #12
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	4630      	mov	r0, r6
 8004878:	f000 ff04 	bl	8005684 <__malloc_unlock>
 800487c:	e7e3      	b.n	8004846 <_malloc_r+0x1e>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	1b5b      	subs	r3, r3, r5
 8004882:	d417      	bmi.n	80048b4 <_malloc_r+0x8c>
 8004884:	2b0b      	cmp	r3, #11
 8004886:	d903      	bls.n	8004890 <_malloc_r+0x68>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	441c      	add	r4, r3
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	e004      	b.n	800489a <_malloc_r+0x72>
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	42a2      	cmp	r2, r4
 8004894:	bf0c      	ite	eq
 8004896:	600b      	streq	r3, [r1, #0]
 8004898:	6053      	strne	r3, [r2, #4]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 fef2 	bl	8005684 <__malloc_unlock>
 80048a0:	f104 000b 	add.w	r0, r4, #11
 80048a4:	1d23      	adds	r3, r4, #4
 80048a6:	f020 0007 	bic.w	r0, r0, #7
 80048aa:	1ac2      	subs	r2, r0, r3
 80048ac:	d0cc      	beq.n	8004848 <_malloc_r+0x20>
 80048ae:	1a1b      	subs	r3, r3, r0
 80048b0:	50a3      	str	r3, [r4, r2]
 80048b2:	e7c9      	b.n	8004848 <_malloc_r+0x20>
 80048b4:	4622      	mov	r2, r4
 80048b6:	6864      	ldr	r4, [r4, #4]
 80048b8:	e7cc      	b.n	8004854 <_malloc_r+0x2c>
 80048ba:	1cc4      	adds	r4, r0, #3
 80048bc:	f024 0403 	bic.w	r4, r4, #3
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d0e3      	beq.n	800488c <_malloc_r+0x64>
 80048c4:	1a21      	subs	r1, r4, r0
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 f808 	bl	80048dc <_sbrk_r>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d1dd      	bne.n	800488c <_malloc_r+0x64>
 80048d0:	e7cf      	b.n	8004872 <_malloc_r+0x4a>
 80048d2:	bf00      	nop
 80048d4:	20000094 	.word	0x20000094
 80048d8:	20000098 	.word	0x20000098

080048dc <_sbrk_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d06      	ldr	r5, [pc, #24]	; (80048f8 <_sbrk_r+0x1c>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fc fd1c 	bl	8001324 <_sbrk>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_sbrk_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_sbrk_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	200001f4 	.word	0x200001f4

080048fc <__assert_func>:
 80048fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048fe:	4614      	mov	r4, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <__assert_func+0x2c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4605      	mov	r5, r0
 8004908:	68d8      	ldr	r0, [r3, #12]
 800490a:	b14c      	cbz	r4, 8004920 <__assert_func+0x24>
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <__assert_func+0x30>)
 800490e:	9100      	str	r1, [sp, #0]
 8004910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004914:	4906      	ldr	r1, [pc, #24]	; (8004930 <__assert_func+0x34>)
 8004916:	462b      	mov	r3, r5
 8004918:	f000 fe86 	bl	8005628 <fiprintf>
 800491c:	f001 fab6 	bl	8005e8c <abort>
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <__assert_func+0x38>)
 8004922:	461c      	mov	r4, r3
 8004924:	e7f3      	b.n	800490e <__assert_func+0x12>
 8004926:	bf00      	nop
 8004928:	20000010 	.word	0x20000010
 800492c:	080066ac 	.word	0x080066ac
 8004930:	080066b9 	.word	0x080066b9
 8004934:	080066e7 	.word	0x080066e7

08004938 <quorem>:
 8004938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	6903      	ldr	r3, [r0, #16]
 800493e:	690c      	ldr	r4, [r1, #16]
 8004940:	42a3      	cmp	r3, r4
 8004942:	4607      	mov	r7, r0
 8004944:	f2c0 8081 	blt.w	8004a4a <quorem+0x112>
 8004948:	3c01      	subs	r4, #1
 800494a:	f101 0814 	add.w	r8, r1, #20
 800494e:	f100 0514 	add.w	r5, r0, #20
 8004952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800495c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004960:	3301      	adds	r3, #1
 8004962:	429a      	cmp	r2, r3
 8004964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800496c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004970:	d331      	bcc.n	80049d6 <quorem+0x9e>
 8004972:	f04f 0e00 	mov.w	lr, #0
 8004976:	4640      	mov	r0, r8
 8004978:	46ac      	mov	ip, r5
 800497a:	46f2      	mov	sl, lr
 800497c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004980:	b293      	uxth	r3, r2
 8004982:	fb06 e303 	mla	r3, r6, r3, lr
 8004986:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800498a:	b29b      	uxth	r3, r3
 800498c:	ebaa 0303 	sub.w	r3, sl, r3
 8004990:	0c12      	lsrs	r2, r2, #16
 8004992:	f8dc a000 	ldr.w	sl, [ip]
 8004996:	fb06 e202 	mla	r2, r6, r2, lr
 800499a:	fa13 f38a 	uxtah	r3, r3, sl
 800499e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049a2:	fa1f fa82 	uxth.w	sl, r2
 80049a6:	f8dc 2000 	ldr.w	r2, [ip]
 80049aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80049ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049b8:	4581      	cmp	r9, r0
 80049ba:	f84c 3b04 	str.w	r3, [ip], #4
 80049be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049c2:	d2db      	bcs.n	800497c <quorem+0x44>
 80049c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80049c8:	b92b      	cbnz	r3, 80049d6 <quorem+0x9e>
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	429d      	cmp	r5, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	d32e      	bcc.n	8004a32 <quorem+0xfa>
 80049d4:	613c      	str	r4, [r7, #16]
 80049d6:	4638      	mov	r0, r7
 80049d8:	f7ff fdf8 	bl	80045cc <__mcmp>
 80049dc:	2800      	cmp	r0, #0
 80049de:	db24      	blt.n	8004a2a <quorem+0xf2>
 80049e0:	3601      	adds	r6, #1
 80049e2:	4628      	mov	r0, r5
 80049e4:	f04f 0c00 	mov.w	ip, #0
 80049e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80049ec:	f8d0 e000 	ldr.w	lr, [r0]
 80049f0:	b293      	uxth	r3, r2
 80049f2:	ebac 0303 	sub.w	r3, ip, r3
 80049f6:	0c12      	lsrs	r2, r2, #16
 80049f8:	fa13 f38e 	uxtah	r3, r3, lr
 80049fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a0a:	45c1      	cmp	r9, r8
 8004a0c:	f840 3b04 	str.w	r3, [r0], #4
 8004a10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a14:	d2e8      	bcs.n	80049e8 <quorem+0xb0>
 8004a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a1e:	b922      	cbnz	r2, 8004a2a <quorem+0xf2>
 8004a20:	3b04      	subs	r3, #4
 8004a22:	429d      	cmp	r5, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	d30a      	bcc.n	8004a3e <quorem+0x106>
 8004a28:	613c      	str	r4, [r7, #16]
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	b003      	add	sp, #12
 8004a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d1cc      	bne.n	80049d4 <quorem+0x9c>
 8004a3a:	3c01      	subs	r4, #1
 8004a3c:	e7c7      	b.n	80049ce <quorem+0x96>
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d1f0      	bne.n	8004a28 <quorem+0xf0>
 8004a46:	3c01      	subs	r4, #1
 8004a48:	e7eb      	b.n	8004a22 <quorem+0xea>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e7ee      	b.n	8004a2c <quorem+0xf4>
	...

08004a50 <_dtoa_r>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ed2d 8b02 	vpush	{d8}
 8004a58:	ec57 6b10 	vmov	r6, r7, d0
 8004a5c:	b095      	sub	sp, #84	; 0x54
 8004a5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a64:	9105      	str	r1, [sp, #20]
 8004a66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a70:	b975      	cbnz	r5, 8004a90 <_dtoa_r+0x40>
 8004a72:	2010      	movs	r0, #16
 8004a74:	f000 fdea 	bl	800564c <malloc>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6260      	str	r0, [r4, #36]	; 0x24
 8004a7c:	b920      	cbnz	r0, 8004a88 <_dtoa_r+0x38>
 8004a7e:	4bb2      	ldr	r3, [pc, #712]	; (8004d48 <_dtoa_r+0x2f8>)
 8004a80:	21ea      	movs	r1, #234	; 0xea
 8004a82:	48b2      	ldr	r0, [pc, #712]	; (8004d4c <_dtoa_r+0x2fc>)
 8004a84:	f7ff ff3a 	bl	80048fc <__assert_func>
 8004a88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a8c:	6005      	str	r5, [r0, #0]
 8004a8e:	60c5      	str	r5, [r0, #12]
 8004a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	b151      	cbz	r1, 8004aac <_dtoa_r+0x5c>
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	604a      	str	r2, [r1, #4]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4093      	lsls	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff fb55 	bl	8004150 <_Bfree>
 8004aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	1e3b      	subs	r3, r7, #0
 8004aae:	bfb9      	ittee	lt
 8004ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ab4:	9303      	strlt	r3, [sp, #12]
 8004ab6:	2300      	movge	r3, #0
 8004ab8:	f8c8 3000 	strge.w	r3, [r8]
 8004abc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ac0:	4ba3      	ldr	r3, [pc, #652]	; (8004d50 <_dtoa_r+0x300>)
 8004ac2:	bfbc      	itt	lt
 8004ac4:	2201      	movlt	r2, #1
 8004ac6:	f8c8 2000 	strlt.w	r2, [r8]
 8004aca:	ea33 0309 	bics.w	r3, r3, r9
 8004ace:	d11b      	bne.n	8004b08 <_dtoa_r+0xb8>
 8004ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ad2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004adc:	4333      	orrs	r3, r6
 8004ade:	f000 857a 	beq.w	80055d6 <_dtoa_r+0xb86>
 8004ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae4:	b963      	cbnz	r3, 8004b00 <_dtoa_r+0xb0>
 8004ae6:	4b9b      	ldr	r3, [pc, #620]	; (8004d54 <_dtoa_r+0x304>)
 8004ae8:	e024      	b.n	8004b34 <_dtoa_r+0xe4>
 8004aea:	4b9b      	ldr	r3, [pc, #620]	; (8004d58 <_dtoa_r+0x308>)
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	9800      	ldr	r0, [sp, #0]
 8004af6:	b015      	add	sp, #84	; 0x54
 8004af8:	ecbd 8b02 	vpop	{d8}
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b00:	4b94      	ldr	r3, [pc, #592]	; (8004d54 <_dtoa_r+0x304>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	3303      	adds	r3, #3
 8004b06:	e7f3      	b.n	8004af0 <_dtoa_r+0xa0>
 8004b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	ec51 0b17 	vmov	r0, r1, d7
 8004b12:	2300      	movs	r3, #0
 8004b14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b18:	f7fb ffce 	bl	8000ab8 <__aeabi_dcmpeq>
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	b158      	cbz	r0, 8004b38 <_dtoa_r+0xe8>
 8004b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b22:	2301      	movs	r3, #1
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8551 	beq.w	80055d0 <_dtoa_r+0xb80>
 8004b2e:	488b      	ldr	r0, [pc, #556]	; (8004d5c <_dtoa_r+0x30c>)
 8004b30:	6018      	str	r0, [r3, #0]
 8004b32:	1e43      	subs	r3, r0, #1
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	e7dd      	b.n	8004af4 <_dtoa_r+0xa4>
 8004b38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004b3c:	aa12      	add	r2, sp, #72	; 0x48
 8004b3e:	a913      	add	r1, sp, #76	; 0x4c
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7ff fde7 	bl	8004714 <__d2b>
 8004b46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b4a:	4683      	mov	fp, r0
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	d07c      	beq.n	8004c4a <_dtoa_r+0x1fa>
 8004b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004b5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b6a:	4b7d      	ldr	r3, [pc, #500]	; (8004d60 <_dtoa_r+0x310>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4639      	mov	r1, r7
 8004b72:	f7fb fb81 	bl	8000278 <__aeabi_dsub>
 8004b76:	a36e      	add	r3, pc, #440	; (adr r3, 8004d30 <_dtoa_r+0x2e0>)
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	f7fb fd34 	bl	80005e8 <__aeabi_dmul>
 8004b80:	a36d      	add	r3, pc, #436	; (adr r3, 8004d38 <_dtoa_r+0x2e8>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fb79 	bl	800027c <__adddf3>
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	460f      	mov	r7, r1
 8004b90:	f7fb fcc0 	bl	8000514 <__aeabi_i2d>
 8004b94:	a36a      	add	r3, pc, #424	; (adr r3, 8004d40 <_dtoa_r+0x2f0>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f7fb fd25 	bl	80005e8 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb fb69 	bl	800027c <__adddf3>
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	f7fb ffb5 	bl	8000b1c <__aeabi_d2iz>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4682      	mov	sl, r0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f7fb ff86 	bl	8000acc <__aeabi_dcmplt>
 8004bc0:	b148      	cbz	r0, 8004bd6 <_dtoa_r+0x186>
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	f7fb fca6 	bl	8000514 <__aeabi_i2d>
 8004bc8:	4632      	mov	r2, r6
 8004bca:	463b      	mov	r3, r7
 8004bcc:	f7fb ff74 	bl	8000ab8 <__aeabi_dcmpeq>
 8004bd0:	b908      	cbnz	r0, 8004bd6 <_dtoa_r+0x186>
 8004bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bd6:	f1ba 0f16 	cmp.w	sl, #22
 8004bda:	d854      	bhi.n	8004c86 <_dtoa_r+0x236>
 8004bdc:	4b61      	ldr	r3, [pc, #388]	; (8004d64 <_dtoa_r+0x314>)
 8004bde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bea:	f7fb ff6f 	bl	8000acc <__aeabi_dcmplt>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d04b      	beq.n	8004c8a <_dtoa_r+0x23a>
 8004bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8004bfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bfc:	1b5d      	subs	r5, r3, r5
 8004bfe:	1e6b      	subs	r3, r5, #1
 8004c00:	9304      	str	r3, [sp, #16]
 8004c02:	bf43      	ittte	mi
 8004c04:	2300      	movmi	r3, #0
 8004c06:	f1c5 0801 	rsbmi	r8, r5, #1
 8004c0a:	9304      	strmi	r3, [sp, #16]
 8004c0c:	f04f 0800 	movpl.w	r8, #0
 8004c10:	f1ba 0f00 	cmp.w	sl, #0
 8004c14:	db3b      	blt.n	8004c8e <_dtoa_r+0x23e>
 8004c16:	9b04      	ldr	r3, [sp, #16]
 8004c18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004c1c:	4453      	add	r3, sl
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9306      	str	r3, [sp, #24]
 8004c24:	9b05      	ldr	r3, [sp, #20]
 8004c26:	2b09      	cmp	r3, #9
 8004c28:	d869      	bhi.n	8004cfe <_dtoa_r+0x2ae>
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	bfc4      	itt	gt
 8004c2e:	3b04      	subgt	r3, #4
 8004c30:	9305      	strgt	r3, [sp, #20]
 8004c32:	9b05      	ldr	r3, [sp, #20]
 8004c34:	f1a3 0302 	sub.w	r3, r3, #2
 8004c38:	bfcc      	ite	gt
 8004c3a:	2500      	movgt	r5, #0
 8004c3c:	2501      	movle	r5, #1
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d869      	bhi.n	8004d16 <_dtoa_r+0x2c6>
 8004c42:	e8df f003 	tbb	[pc, r3]
 8004c46:	4e2c      	.short	0x4e2c
 8004c48:	5a4c      	.short	0x5a4c
 8004c4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004c4e:	441d      	add	r5, r3
 8004c50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	bfc1      	itttt	gt
 8004c58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c60:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c68:	bfda      	itte	le
 8004c6a:	f1c3 0320 	rsble	r3, r3, #32
 8004c6e:	fa06 f003 	lslle.w	r0, r6, r3
 8004c72:	4318      	orrgt	r0, r3
 8004c74:	f7fb fc3e 	bl	80004f4 <__aeabi_ui2d>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c80:	3d01      	subs	r5, #1
 8004c82:	9310      	str	r3, [sp, #64]	; 0x40
 8004c84:	e771      	b.n	8004b6a <_dtoa_r+0x11a>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e7b6      	b.n	8004bf8 <_dtoa_r+0x1a8>
 8004c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8004c8c:	e7b5      	b.n	8004bfa <_dtoa_r+0x1aa>
 8004c8e:	f1ca 0300 	rsb	r3, sl, #0
 8004c92:	9306      	str	r3, [sp, #24]
 8004c94:	2300      	movs	r3, #0
 8004c96:	eba8 080a 	sub.w	r8, r8, sl
 8004c9a:	930d      	str	r3, [sp, #52]	; 0x34
 8004c9c:	e7c2      	b.n	8004c24 <_dtoa_r+0x1d4>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9308      	str	r3, [sp, #32]
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc39      	bgt.n	8004d1c <_dtoa_r+0x2cc>
 8004ca8:	f04f 0901 	mov.w	r9, #1
 8004cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cb8:	2200      	movs	r2, #0
 8004cba:	6042      	str	r2, [r0, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	f102 0614 	add.w	r6, r2, #20
 8004cc2:	429e      	cmp	r6, r3
 8004cc4:	6841      	ldr	r1, [r0, #4]
 8004cc6:	d92f      	bls.n	8004d28 <_dtoa_r+0x2d8>
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7ff fa01 	bl	80040d0 <_Balloc>
 8004cce:	9000      	str	r0, [sp, #0]
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d14b      	bne.n	8004d6c <_dtoa_r+0x31c>
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <_dtoa_r+0x318>)
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cdc:	e6d1      	b.n	8004a82 <_dtoa_r+0x32>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e7de      	b.n	8004ca0 <_dtoa_r+0x250>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9308      	str	r3, [sp, #32]
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	eb0a 0903 	add.w	r9, sl, r3
 8004cec:	f109 0301 	add.w	r3, r9, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	bfb8      	it	lt
 8004cf6:	2301      	movlt	r3, #1
 8004cf8:	e7dd      	b.n	8004cb6 <_dtoa_r+0x266>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e7f2      	b.n	8004ce4 <_dtoa_r+0x294>
 8004cfe:	2501      	movs	r5, #1
 8004d00:	2300      	movs	r3, #0
 8004d02:	9305      	str	r3, [sp, #20]
 8004d04:	9508      	str	r5, [sp, #32]
 8004d06:	f04f 39ff 	mov.w	r9, #4294967295
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d10:	2312      	movs	r3, #18
 8004d12:	9209      	str	r2, [sp, #36]	; 0x24
 8004d14:	e7cf      	b.n	8004cb6 <_dtoa_r+0x266>
 8004d16:	2301      	movs	r3, #1
 8004d18:	9308      	str	r3, [sp, #32]
 8004d1a:	e7f4      	b.n	8004d06 <_dtoa_r+0x2b6>
 8004d1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d20:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d24:	464b      	mov	r3, r9
 8004d26:	e7c6      	b.n	8004cb6 <_dtoa_r+0x266>
 8004d28:	3101      	adds	r1, #1
 8004d2a:	6041      	str	r1, [r0, #4]
 8004d2c:	0052      	lsls	r2, r2, #1
 8004d2e:	e7c6      	b.n	8004cbe <_dtoa_r+0x26e>
 8004d30:	636f4361 	.word	0x636f4361
 8004d34:	3fd287a7 	.word	0x3fd287a7
 8004d38:	8b60c8b3 	.word	0x8b60c8b3
 8004d3c:	3fc68a28 	.word	0x3fc68a28
 8004d40:	509f79fb 	.word	0x509f79fb
 8004d44:	3fd34413 	.word	0x3fd34413
 8004d48:	08006524 	.word	0x08006524
 8004d4c:	080066f7 	.word	0x080066f7
 8004d50:	7ff00000 	.word	0x7ff00000
 8004d54:	080066f1 	.word	0x080066f1
 8004d58:	080066e8 	.word	0x080066e8
 8004d5c:	080066f6 	.word	0x080066f6
 8004d60:	3ff80000 	.word	0x3ff80000
 8004d64:	080065d8 	.word	0x080065d8
 8004d68:	0800659b 	.word	0x0800659b
 8004d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d6e:	9a00      	ldr	r2, [sp, #0]
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	9b01      	ldr	r3, [sp, #4]
 8004d74:	2b0e      	cmp	r3, #14
 8004d76:	f200 80ad 	bhi.w	8004ed4 <_dtoa_r+0x484>
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	f000 80aa 	beq.w	8004ed4 <_dtoa_r+0x484>
 8004d80:	f1ba 0f00 	cmp.w	sl, #0
 8004d84:	dd36      	ble.n	8004df4 <_dtoa_r+0x3a4>
 8004d86:	4ac3      	ldr	r2, [pc, #780]	; (8005094 <_dtoa_r+0x644>)
 8004d88:	f00a 030f 	and.w	r3, sl, #15
 8004d8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d90:	ed93 7b00 	vldr	d7, [r3]
 8004d94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004d98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004d9c:	eeb0 8a47 	vmov.f32	s16, s14
 8004da0:	eef0 8a67 	vmov.f32	s17, s15
 8004da4:	d016      	beq.n	8004dd4 <_dtoa_r+0x384>
 8004da6:	4bbc      	ldr	r3, [pc, #752]	; (8005098 <_dtoa_r+0x648>)
 8004da8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004db0:	f7fb fd44 	bl	800083c <__aeabi_ddiv>
 8004db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004db8:	f007 070f 	and.w	r7, r7, #15
 8004dbc:	2503      	movs	r5, #3
 8004dbe:	4eb6      	ldr	r6, [pc, #728]	; (8005098 <_dtoa_r+0x648>)
 8004dc0:	b957      	cbnz	r7, 8004dd8 <_dtoa_r+0x388>
 8004dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc6:	ec53 2b18 	vmov	r2, r3, d8
 8004dca:	f7fb fd37 	bl	800083c <__aeabi_ddiv>
 8004dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dd2:	e029      	b.n	8004e28 <_dtoa_r+0x3d8>
 8004dd4:	2502      	movs	r5, #2
 8004dd6:	e7f2      	b.n	8004dbe <_dtoa_r+0x36e>
 8004dd8:	07f9      	lsls	r1, r7, #31
 8004dda:	d508      	bpl.n	8004dee <_dtoa_r+0x39e>
 8004ddc:	ec51 0b18 	vmov	r0, r1, d8
 8004de0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004de4:	f7fb fc00 	bl	80005e8 <__aeabi_dmul>
 8004de8:	ec41 0b18 	vmov	d8, r0, r1
 8004dec:	3501      	adds	r5, #1
 8004dee:	107f      	asrs	r7, r7, #1
 8004df0:	3608      	adds	r6, #8
 8004df2:	e7e5      	b.n	8004dc0 <_dtoa_r+0x370>
 8004df4:	f000 80a6 	beq.w	8004f44 <_dtoa_r+0x4f4>
 8004df8:	f1ca 0600 	rsb	r6, sl, #0
 8004dfc:	4ba5      	ldr	r3, [pc, #660]	; (8005094 <_dtoa_r+0x644>)
 8004dfe:	4fa6      	ldr	r7, [pc, #664]	; (8005098 <_dtoa_r+0x648>)
 8004e00:	f006 020f 	and.w	r2, r6, #15
 8004e04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e10:	f7fb fbea 	bl	80005e8 <__aeabi_dmul>
 8004e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e18:	1136      	asrs	r6, r6, #4
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2502      	movs	r5, #2
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	f040 8085 	bne.w	8004f2e <_dtoa_r+0x4de>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1d2      	bne.n	8004dce <_dtoa_r+0x37e>
 8004e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 808c 	beq.w	8004f48 <_dtoa_r+0x4f8>
 8004e30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e34:	4b99      	ldr	r3, [pc, #612]	; (800509c <_dtoa_r+0x64c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe46 	bl	8000acc <__aeabi_dcmplt>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f000 8081 	beq.w	8004f48 <_dtoa_r+0x4f8>
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d07d      	beq.n	8004f48 <_dtoa_r+0x4f8>
 8004e4c:	f1b9 0f00 	cmp.w	r9, #0
 8004e50:	dd3c      	ble.n	8004ecc <_dtoa_r+0x47c>
 8004e52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b91      	ldr	r3, [pc, #580]	; (80050a0 <_dtoa_r+0x650>)
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fbc2 	bl	80005e8 <__aeabi_dmul>
 8004e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e68:	3501      	adds	r5, #1
 8004e6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004e6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7fb fb4e 	bl	8000514 <__aeabi_i2d>
 8004e78:	4632      	mov	r2, r6
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	f7fb fbb4 	bl	80005e8 <__aeabi_dmul>
 8004e80:	4b88      	ldr	r3, [pc, #544]	; (80050a4 <_dtoa_r+0x654>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	f7fb f9fa 	bl	800027c <__adddf3>
 8004e88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e90:	9303      	str	r3, [sp, #12]
 8004e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d15c      	bne.n	8004f52 <_dtoa_r+0x502>
 8004e98:	4b83      	ldr	r3, [pc, #524]	; (80050a8 <_dtoa_r+0x658>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	f7fb f9ea 	bl	8000278 <__aeabi_dsub>
 8004ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	f7fb fe2c 	bl	8000b08 <__aeabi_dcmpgt>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	f040 8296 	bne.w	80053e2 <_dtoa_r+0x992>
 8004eb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	f7fb fe03 	bl	8000acc <__aeabi_dcmplt>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	f040 8288 	bne.w	80053dc <_dtoa_r+0x98c>
 8004ecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f2c0 8158 	blt.w	800518c <_dtoa_r+0x73c>
 8004edc:	f1ba 0f0e 	cmp.w	sl, #14
 8004ee0:	f300 8154 	bgt.w	800518c <_dtoa_r+0x73c>
 8004ee4:	4b6b      	ldr	r3, [pc, #428]	; (8005094 <_dtoa_r+0x644>)
 8004ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004eea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f280 80e3 	bge.w	80050bc <_dtoa_r+0x66c>
 8004ef6:	9b01      	ldr	r3, [sp, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f300 80df 	bgt.w	80050bc <_dtoa_r+0x66c>
 8004efe:	f040 826d 	bne.w	80053dc <_dtoa_r+0x98c>
 8004f02:	4b69      	ldr	r3, [pc, #420]	; (80050a8 <_dtoa_r+0x658>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	4640      	mov	r0, r8
 8004f08:	4649      	mov	r1, r9
 8004f0a:	f7fb fb6d 	bl	80005e8 <__aeabi_dmul>
 8004f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f12:	f7fb fdef 	bl	8000af4 <__aeabi_dcmpge>
 8004f16:	9e01      	ldr	r6, [sp, #4]
 8004f18:	4637      	mov	r7, r6
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f040 8243 	bne.w	80053a6 <_dtoa_r+0x956>
 8004f20:	9d00      	ldr	r5, [sp, #0]
 8004f22:	2331      	movs	r3, #49	; 0x31
 8004f24:	f805 3b01 	strb.w	r3, [r5], #1
 8004f28:	f10a 0a01 	add.w	sl, sl, #1
 8004f2c:	e23f      	b.n	80053ae <_dtoa_r+0x95e>
 8004f2e:	07f2      	lsls	r2, r6, #31
 8004f30:	d505      	bpl.n	8004f3e <_dtoa_r+0x4ee>
 8004f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f36:	f7fb fb57 	bl	80005e8 <__aeabi_dmul>
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	1076      	asrs	r6, r6, #1
 8004f40:	3708      	adds	r7, #8
 8004f42:	e76c      	b.n	8004e1e <_dtoa_r+0x3ce>
 8004f44:	2502      	movs	r5, #2
 8004f46:	e76f      	b.n	8004e28 <_dtoa_r+0x3d8>
 8004f48:	9b01      	ldr	r3, [sp, #4]
 8004f4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f50:	e78d      	b.n	8004e6e <_dtoa_r+0x41e>
 8004f52:	9900      	ldr	r1, [sp, #0]
 8004f54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f58:	4b4e      	ldr	r3, [pc, #312]	; (8005094 <_dtoa_r+0x644>)
 8004f5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f5e:	4401      	add	r1, r0
 8004f60:	9102      	str	r1, [sp, #8]
 8004f62:	9908      	ldr	r1, [sp, #32]
 8004f64:	eeb0 8a47 	vmov.f32	s16, s14
 8004f68:	eef0 8a67 	vmov.f32	s17, s15
 8004f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d045      	beq.n	8005004 <_dtoa_r+0x5b4>
 8004f78:	494c      	ldr	r1, [pc, #304]	; (80050ac <_dtoa_r+0x65c>)
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7fb fc5e 	bl	800083c <__aeabi_ddiv>
 8004f80:	ec53 2b18 	vmov	r2, r3, d8
 8004f84:	f7fb f978 	bl	8000278 <__aeabi_dsub>
 8004f88:	9d00      	ldr	r5, [sp, #0]
 8004f8a:	ec41 0b18 	vmov	d8, r0, r1
 8004f8e:	4639      	mov	r1, r7
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7fb fdc3 	bl	8000b1c <__aeabi_d2iz>
 8004f96:	900c      	str	r0, [sp, #48]	; 0x30
 8004f98:	f7fb fabc 	bl	8000514 <__aeabi_i2d>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	f7fb f968 	bl	8000278 <__aeabi_dsub>
 8004fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004faa:	3330      	adds	r3, #48	; 0x30
 8004fac:	f805 3b01 	strb.w	r3, [r5], #1
 8004fb0:	ec53 2b18 	vmov	r2, r3, d8
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	460f      	mov	r7, r1
 8004fb8:	f7fb fd88 	bl	8000acc <__aeabi_dcmplt>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d165      	bne.n	800508c <_dtoa_r+0x63c>
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	4935      	ldr	r1, [pc, #212]	; (800509c <_dtoa_r+0x64c>)
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f7fb f956 	bl	8000278 <__aeabi_dsub>
 8004fcc:	ec53 2b18 	vmov	r2, r3, d8
 8004fd0:	f7fb fd7c 	bl	8000acc <__aeabi_dcmplt>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f040 80b9 	bne.w	800514c <_dtoa_r+0x6fc>
 8004fda:	9b02      	ldr	r3, [sp, #8]
 8004fdc:	429d      	cmp	r5, r3
 8004fde:	f43f af75 	beq.w	8004ecc <_dtoa_r+0x47c>
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <_dtoa_r+0x650>)
 8004fe4:	ec51 0b18 	vmov	r0, r1, d8
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f7fb fafd 	bl	80005e8 <__aeabi_dmul>
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <_dtoa_r+0x650>)
 8004ff0:	ec41 0b18 	vmov	d8, r0, r1
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb faf5 	bl	80005e8 <__aeabi_dmul>
 8004ffe:	4606      	mov	r6, r0
 8005000:	460f      	mov	r7, r1
 8005002:	e7c4      	b.n	8004f8e <_dtoa_r+0x53e>
 8005004:	ec51 0b17 	vmov	r0, r1, d7
 8005008:	f7fb faee 	bl	80005e8 <__aeabi_dmul>
 800500c:	9b02      	ldr	r3, [sp, #8]
 800500e:	9d00      	ldr	r5, [sp, #0]
 8005010:	930c      	str	r3, [sp, #48]	; 0x30
 8005012:	ec41 0b18 	vmov	d8, r0, r1
 8005016:	4639      	mov	r1, r7
 8005018:	4630      	mov	r0, r6
 800501a:	f7fb fd7f 	bl	8000b1c <__aeabi_d2iz>
 800501e:	9011      	str	r0, [sp, #68]	; 0x44
 8005020:	f7fb fa78 	bl	8000514 <__aeabi_i2d>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4630      	mov	r0, r6
 800502a:	4639      	mov	r1, r7
 800502c:	f7fb f924 	bl	8000278 <__aeabi_dsub>
 8005030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005032:	3330      	adds	r3, #48	; 0x30
 8005034:	f805 3b01 	strb.w	r3, [r5], #1
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	429d      	cmp	r5, r3
 800503c:	4606      	mov	r6, r0
 800503e:	460f      	mov	r7, r1
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	d134      	bne.n	80050b0 <_dtoa_r+0x660>
 8005046:	4b19      	ldr	r3, [pc, #100]	; (80050ac <_dtoa_r+0x65c>)
 8005048:	ec51 0b18 	vmov	r0, r1, d8
 800504c:	f7fb f916 	bl	800027c <__adddf3>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4630      	mov	r0, r6
 8005056:	4639      	mov	r1, r7
 8005058:	f7fb fd56 	bl	8000b08 <__aeabi_dcmpgt>
 800505c:	2800      	cmp	r0, #0
 800505e:	d175      	bne.n	800514c <_dtoa_r+0x6fc>
 8005060:	ec53 2b18 	vmov	r2, r3, d8
 8005064:	4911      	ldr	r1, [pc, #68]	; (80050ac <_dtoa_r+0x65c>)
 8005066:	2000      	movs	r0, #0
 8005068:	f7fb f906 	bl	8000278 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb fd2a 	bl	8000acc <__aeabi_dcmplt>
 8005078:	2800      	cmp	r0, #0
 800507a:	f43f af27 	beq.w	8004ecc <_dtoa_r+0x47c>
 800507e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005080:	1e6b      	subs	r3, r5, #1
 8005082:	930c      	str	r3, [sp, #48]	; 0x30
 8005084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005088:	2b30      	cmp	r3, #48	; 0x30
 800508a:	d0f8      	beq.n	800507e <_dtoa_r+0x62e>
 800508c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005090:	e04a      	b.n	8005128 <_dtoa_r+0x6d8>
 8005092:	bf00      	nop
 8005094:	080065d8 	.word	0x080065d8
 8005098:	080065b0 	.word	0x080065b0
 800509c:	3ff00000 	.word	0x3ff00000
 80050a0:	40240000 	.word	0x40240000
 80050a4:	401c0000 	.word	0x401c0000
 80050a8:	40140000 	.word	0x40140000
 80050ac:	3fe00000 	.word	0x3fe00000
 80050b0:	4baf      	ldr	r3, [pc, #700]	; (8005370 <_dtoa_r+0x920>)
 80050b2:	f7fb fa99 	bl	80005e8 <__aeabi_dmul>
 80050b6:	4606      	mov	r6, r0
 80050b8:	460f      	mov	r7, r1
 80050ba:	e7ac      	b.n	8005016 <_dtoa_r+0x5c6>
 80050bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050c0:	9d00      	ldr	r5, [sp, #0]
 80050c2:	4642      	mov	r2, r8
 80050c4:	464b      	mov	r3, r9
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb fbb7 	bl	800083c <__aeabi_ddiv>
 80050ce:	f7fb fd25 	bl	8000b1c <__aeabi_d2iz>
 80050d2:	9002      	str	r0, [sp, #8]
 80050d4:	f7fb fa1e 	bl	8000514 <__aeabi_i2d>
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	f7fb fa84 	bl	80005e8 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb f8c6 	bl	8000278 <__aeabi_dsub>
 80050ec:	9e02      	ldr	r6, [sp, #8]
 80050ee:	9f01      	ldr	r7, [sp, #4]
 80050f0:	3630      	adds	r6, #48	; 0x30
 80050f2:	f805 6b01 	strb.w	r6, [r5], #1
 80050f6:	9e00      	ldr	r6, [sp, #0]
 80050f8:	1bae      	subs	r6, r5, r6
 80050fa:	42b7      	cmp	r7, r6
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	d137      	bne.n	8005172 <_dtoa_r+0x722>
 8005102:	f7fb f8bb 	bl	800027c <__adddf3>
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	4606      	mov	r6, r0
 800510c:	460f      	mov	r7, r1
 800510e:	f7fb fcfb 	bl	8000b08 <__aeabi_dcmpgt>
 8005112:	b9c8      	cbnz	r0, 8005148 <_dtoa_r+0x6f8>
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	4630      	mov	r0, r6
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb fccc 	bl	8000ab8 <__aeabi_dcmpeq>
 8005120:	b110      	cbz	r0, 8005128 <_dtoa_r+0x6d8>
 8005122:	9b02      	ldr	r3, [sp, #8]
 8005124:	07d9      	lsls	r1, r3, #31
 8005126:	d40f      	bmi.n	8005148 <_dtoa_r+0x6f8>
 8005128:	4620      	mov	r0, r4
 800512a:	4659      	mov	r1, fp
 800512c:	f7ff f810 	bl	8004150 <_Bfree>
 8005130:	2300      	movs	r3, #0
 8005132:	702b      	strb	r3, [r5, #0]
 8005134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005136:	f10a 0001 	add.w	r0, sl, #1
 800513a:	6018      	str	r0, [r3, #0]
 800513c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800513e:	2b00      	cmp	r3, #0
 8005140:	f43f acd8 	beq.w	8004af4 <_dtoa_r+0xa4>
 8005144:	601d      	str	r5, [r3, #0]
 8005146:	e4d5      	b.n	8004af4 <_dtoa_r+0xa4>
 8005148:	f8cd a01c 	str.w	sl, [sp, #28]
 800514c:	462b      	mov	r3, r5
 800514e:	461d      	mov	r5, r3
 8005150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005154:	2a39      	cmp	r2, #57	; 0x39
 8005156:	d108      	bne.n	800516a <_dtoa_r+0x71a>
 8005158:	9a00      	ldr	r2, [sp, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d1f7      	bne.n	800514e <_dtoa_r+0x6fe>
 800515e:	9a07      	ldr	r2, [sp, #28]
 8005160:	9900      	ldr	r1, [sp, #0]
 8005162:	3201      	adds	r2, #1
 8005164:	9207      	str	r2, [sp, #28]
 8005166:	2230      	movs	r2, #48	; 0x30
 8005168:	700a      	strb	r2, [r1, #0]
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	3201      	adds	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e78c      	b.n	800508c <_dtoa_r+0x63c>
 8005172:	4b7f      	ldr	r3, [pc, #508]	; (8005370 <_dtoa_r+0x920>)
 8005174:	2200      	movs	r2, #0
 8005176:	f7fb fa37 	bl	80005e8 <__aeabi_dmul>
 800517a:	2200      	movs	r2, #0
 800517c:	2300      	movs	r3, #0
 800517e:	4606      	mov	r6, r0
 8005180:	460f      	mov	r7, r1
 8005182:	f7fb fc99 	bl	8000ab8 <__aeabi_dcmpeq>
 8005186:	2800      	cmp	r0, #0
 8005188:	d09b      	beq.n	80050c2 <_dtoa_r+0x672>
 800518a:	e7cd      	b.n	8005128 <_dtoa_r+0x6d8>
 800518c:	9a08      	ldr	r2, [sp, #32]
 800518e:	2a00      	cmp	r2, #0
 8005190:	f000 80c4 	beq.w	800531c <_dtoa_r+0x8cc>
 8005194:	9a05      	ldr	r2, [sp, #20]
 8005196:	2a01      	cmp	r2, #1
 8005198:	f300 80a8 	bgt.w	80052ec <_dtoa_r+0x89c>
 800519c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800519e:	2a00      	cmp	r2, #0
 80051a0:	f000 80a0 	beq.w	80052e4 <_dtoa_r+0x894>
 80051a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051a8:	9e06      	ldr	r6, [sp, #24]
 80051aa:	4645      	mov	r5, r8
 80051ac:	9a04      	ldr	r2, [sp, #16]
 80051ae:	2101      	movs	r1, #1
 80051b0:	441a      	add	r2, r3
 80051b2:	4620      	mov	r0, r4
 80051b4:	4498      	add	r8, r3
 80051b6:	9204      	str	r2, [sp, #16]
 80051b8:	f7ff f886 	bl	80042c8 <__i2b>
 80051bc:	4607      	mov	r7, r0
 80051be:	2d00      	cmp	r5, #0
 80051c0:	dd0b      	ble.n	80051da <_dtoa_r+0x78a>
 80051c2:	9b04      	ldr	r3, [sp, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dd08      	ble.n	80051da <_dtoa_r+0x78a>
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	9a04      	ldr	r2, [sp, #16]
 80051cc:	bfa8      	it	ge
 80051ce:	462b      	movge	r3, r5
 80051d0:	eba8 0803 	sub.w	r8, r8, r3
 80051d4:	1aed      	subs	r5, r5, r3
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9b06      	ldr	r3, [sp, #24]
 80051dc:	b1fb      	cbz	r3, 800521e <_dtoa_r+0x7ce>
 80051de:	9b08      	ldr	r3, [sp, #32]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 809f 	beq.w	8005324 <_dtoa_r+0x8d4>
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	dd11      	ble.n	800520e <_dtoa_r+0x7be>
 80051ea:	4639      	mov	r1, r7
 80051ec:	4632      	mov	r2, r6
 80051ee:	4620      	mov	r0, r4
 80051f0:	f7ff f926 	bl	8004440 <__pow5mult>
 80051f4:	465a      	mov	r2, fp
 80051f6:	4601      	mov	r1, r0
 80051f8:	4607      	mov	r7, r0
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff f87a 	bl	80042f4 <__multiply>
 8005200:	4659      	mov	r1, fp
 8005202:	9007      	str	r0, [sp, #28]
 8005204:	4620      	mov	r0, r4
 8005206:	f7fe ffa3 	bl	8004150 <_Bfree>
 800520a:	9b07      	ldr	r3, [sp, #28]
 800520c:	469b      	mov	fp, r3
 800520e:	9b06      	ldr	r3, [sp, #24]
 8005210:	1b9a      	subs	r2, r3, r6
 8005212:	d004      	beq.n	800521e <_dtoa_r+0x7ce>
 8005214:	4659      	mov	r1, fp
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff f912 	bl	8004440 <__pow5mult>
 800521c:	4683      	mov	fp, r0
 800521e:	2101      	movs	r1, #1
 8005220:	4620      	mov	r0, r4
 8005222:	f7ff f851 	bl	80042c8 <__i2b>
 8005226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	4606      	mov	r6, r0
 800522c:	dd7c      	ble.n	8005328 <_dtoa_r+0x8d8>
 800522e:	461a      	mov	r2, r3
 8005230:	4601      	mov	r1, r0
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff f904 	bl	8004440 <__pow5mult>
 8005238:	9b05      	ldr	r3, [sp, #20]
 800523a:	2b01      	cmp	r3, #1
 800523c:	4606      	mov	r6, r0
 800523e:	dd76      	ble.n	800532e <_dtoa_r+0x8de>
 8005240:	2300      	movs	r3, #0
 8005242:	9306      	str	r3, [sp, #24]
 8005244:	6933      	ldr	r3, [r6, #16]
 8005246:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800524a:	6918      	ldr	r0, [r3, #16]
 800524c:	f7fe ffec 	bl	8004228 <__hi0bits>
 8005250:	f1c0 0020 	rsb	r0, r0, #32
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	4418      	add	r0, r3
 8005258:	f010 001f 	ands.w	r0, r0, #31
 800525c:	f000 8086 	beq.w	800536c <_dtoa_r+0x91c>
 8005260:	f1c0 0320 	rsb	r3, r0, #32
 8005264:	2b04      	cmp	r3, #4
 8005266:	dd7f      	ble.n	8005368 <_dtoa_r+0x918>
 8005268:	f1c0 001c 	rsb	r0, r0, #28
 800526c:	9b04      	ldr	r3, [sp, #16]
 800526e:	4403      	add	r3, r0
 8005270:	4480      	add	r8, r0
 8005272:	4405      	add	r5, r0
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	f1b8 0f00 	cmp.w	r8, #0
 800527a:	dd05      	ble.n	8005288 <_dtoa_r+0x838>
 800527c:	4659      	mov	r1, fp
 800527e:	4642      	mov	r2, r8
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff f937 	bl	80044f4 <__lshift>
 8005286:	4683      	mov	fp, r0
 8005288:	9b04      	ldr	r3, [sp, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dd05      	ble.n	800529a <_dtoa_r+0x84a>
 800528e:	4631      	mov	r1, r6
 8005290:	461a      	mov	r2, r3
 8005292:	4620      	mov	r0, r4
 8005294:	f7ff f92e 	bl	80044f4 <__lshift>
 8005298:	4606      	mov	r6, r0
 800529a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d069      	beq.n	8005374 <_dtoa_r+0x924>
 80052a0:	4631      	mov	r1, r6
 80052a2:	4658      	mov	r0, fp
 80052a4:	f7ff f992 	bl	80045cc <__mcmp>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	da63      	bge.n	8005374 <_dtoa_r+0x924>
 80052ac:	2300      	movs	r3, #0
 80052ae:	4659      	mov	r1, fp
 80052b0:	220a      	movs	r2, #10
 80052b2:	4620      	mov	r0, r4
 80052b4:	f7fe ff6e 	bl	8004194 <__multadd>
 80052b8:	9b08      	ldr	r3, [sp, #32]
 80052ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052be:	4683      	mov	fp, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 818f 	beq.w	80055e4 <_dtoa_r+0xb94>
 80052c6:	4639      	mov	r1, r7
 80052c8:	2300      	movs	r3, #0
 80052ca:	220a      	movs	r2, #10
 80052cc:	4620      	mov	r0, r4
 80052ce:	f7fe ff61 	bl	8004194 <__multadd>
 80052d2:	f1b9 0f00 	cmp.w	r9, #0
 80052d6:	4607      	mov	r7, r0
 80052d8:	f300 808e 	bgt.w	80053f8 <_dtoa_r+0x9a8>
 80052dc:	9b05      	ldr	r3, [sp, #20]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	dc50      	bgt.n	8005384 <_dtoa_r+0x934>
 80052e2:	e089      	b.n	80053f8 <_dtoa_r+0x9a8>
 80052e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052ea:	e75d      	b.n	80051a8 <_dtoa_r+0x758>
 80052ec:	9b01      	ldr	r3, [sp, #4]
 80052ee:	1e5e      	subs	r6, r3, #1
 80052f0:	9b06      	ldr	r3, [sp, #24]
 80052f2:	42b3      	cmp	r3, r6
 80052f4:	bfbf      	itttt	lt
 80052f6:	9b06      	ldrlt	r3, [sp, #24]
 80052f8:	9606      	strlt	r6, [sp, #24]
 80052fa:	1af2      	sublt	r2, r6, r3
 80052fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80052fe:	bfb6      	itet	lt
 8005300:	189b      	addlt	r3, r3, r2
 8005302:	1b9e      	subge	r6, r3, r6
 8005304:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	bfb8      	it	lt
 800530a:	2600      	movlt	r6, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	bfb5      	itete	lt
 8005310:	eba8 0503 	sublt.w	r5, r8, r3
 8005314:	9b01      	ldrge	r3, [sp, #4]
 8005316:	2300      	movlt	r3, #0
 8005318:	4645      	movge	r5, r8
 800531a:	e747      	b.n	80051ac <_dtoa_r+0x75c>
 800531c:	9e06      	ldr	r6, [sp, #24]
 800531e:	9f08      	ldr	r7, [sp, #32]
 8005320:	4645      	mov	r5, r8
 8005322:	e74c      	b.n	80051be <_dtoa_r+0x76e>
 8005324:	9a06      	ldr	r2, [sp, #24]
 8005326:	e775      	b.n	8005214 <_dtoa_r+0x7c4>
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	dc18      	bgt.n	8005360 <_dtoa_r+0x910>
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	b9b3      	cbnz	r3, 8005360 <_dtoa_r+0x910>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005338:	b9a3      	cbnz	r3, 8005364 <_dtoa_r+0x914>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005340:	0d1b      	lsrs	r3, r3, #20
 8005342:	051b      	lsls	r3, r3, #20
 8005344:	b12b      	cbz	r3, 8005352 <_dtoa_r+0x902>
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	3301      	adds	r3, #1
 800534a:	9304      	str	r3, [sp, #16]
 800534c:	f108 0801 	add.w	r8, r8, #1
 8005350:	2301      	movs	r3, #1
 8005352:	9306      	str	r3, [sp, #24]
 8005354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005356:	2b00      	cmp	r3, #0
 8005358:	f47f af74 	bne.w	8005244 <_dtoa_r+0x7f4>
 800535c:	2001      	movs	r0, #1
 800535e:	e779      	b.n	8005254 <_dtoa_r+0x804>
 8005360:	2300      	movs	r3, #0
 8005362:	e7f6      	b.n	8005352 <_dtoa_r+0x902>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	e7f4      	b.n	8005352 <_dtoa_r+0x902>
 8005368:	d085      	beq.n	8005276 <_dtoa_r+0x826>
 800536a:	4618      	mov	r0, r3
 800536c:	301c      	adds	r0, #28
 800536e:	e77d      	b.n	800526c <_dtoa_r+0x81c>
 8005370:	40240000 	.word	0x40240000
 8005374:	9b01      	ldr	r3, [sp, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	dc38      	bgt.n	80053ec <_dtoa_r+0x99c>
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	2b02      	cmp	r3, #2
 800537e:	dd35      	ble.n	80053ec <_dtoa_r+0x99c>
 8005380:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005384:	f1b9 0f00 	cmp.w	r9, #0
 8005388:	d10d      	bne.n	80053a6 <_dtoa_r+0x956>
 800538a:	4631      	mov	r1, r6
 800538c:	464b      	mov	r3, r9
 800538e:	2205      	movs	r2, #5
 8005390:	4620      	mov	r0, r4
 8005392:	f7fe feff 	bl	8004194 <__multadd>
 8005396:	4601      	mov	r1, r0
 8005398:	4606      	mov	r6, r0
 800539a:	4658      	mov	r0, fp
 800539c:	f7ff f916 	bl	80045cc <__mcmp>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f73f adbd 	bgt.w	8004f20 <_dtoa_r+0x4d0>
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	9d00      	ldr	r5, [sp, #0]
 80053aa:	ea6f 0a03 	mvn.w	sl, r3
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	4631      	mov	r1, r6
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7fe fecb 	bl	8004150 <_Bfree>
 80053ba:	2f00      	cmp	r7, #0
 80053bc:	f43f aeb4 	beq.w	8005128 <_dtoa_r+0x6d8>
 80053c0:	f1b8 0f00 	cmp.w	r8, #0
 80053c4:	d005      	beq.n	80053d2 <_dtoa_r+0x982>
 80053c6:	45b8      	cmp	r8, r7
 80053c8:	d003      	beq.n	80053d2 <_dtoa_r+0x982>
 80053ca:	4641      	mov	r1, r8
 80053cc:	4620      	mov	r0, r4
 80053ce:	f7fe febf 	bl	8004150 <_Bfree>
 80053d2:	4639      	mov	r1, r7
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7fe febb 	bl	8004150 <_Bfree>
 80053da:	e6a5      	b.n	8005128 <_dtoa_r+0x6d8>
 80053dc:	2600      	movs	r6, #0
 80053de:	4637      	mov	r7, r6
 80053e0:	e7e1      	b.n	80053a6 <_dtoa_r+0x956>
 80053e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053e8:	4637      	mov	r7, r6
 80053ea:	e599      	b.n	8004f20 <_dtoa_r+0x4d0>
 80053ec:	9b08      	ldr	r3, [sp, #32]
 80053ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80fd 	beq.w	80055f2 <_dtoa_r+0xba2>
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	dd05      	ble.n	8005408 <_dtoa_r+0x9b8>
 80053fc:	4639      	mov	r1, r7
 80053fe:	462a      	mov	r2, r5
 8005400:	4620      	mov	r0, r4
 8005402:	f7ff f877 	bl	80044f4 <__lshift>
 8005406:	4607      	mov	r7, r0
 8005408:	9b06      	ldr	r3, [sp, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d05c      	beq.n	80054c8 <_dtoa_r+0xa78>
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4620      	mov	r0, r4
 8005412:	f7fe fe5d 	bl	80040d0 <_Balloc>
 8005416:	4605      	mov	r5, r0
 8005418:	b928      	cbnz	r0, 8005426 <_dtoa_r+0x9d6>
 800541a:	4b80      	ldr	r3, [pc, #512]	; (800561c <_dtoa_r+0xbcc>)
 800541c:	4602      	mov	r2, r0
 800541e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005422:	f7ff bb2e 	b.w	8004a82 <_dtoa_r+0x32>
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	3202      	adds	r2, #2
 800542a:	0092      	lsls	r2, r2, #2
 800542c:	f107 010c 	add.w	r1, r7, #12
 8005430:	300c      	adds	r0, #12
 8005432:	f000 f913 	bl	800565c <memcpy>
 8005436:	2201      	movs	r2, #1
 8005438:	4629      	mov	r1, r5
 800543a:	4620      	mov	r0, r4
 800543c:	f7ff f85a 	bl	80044f4 <__lshift>
 8005440:	9b00      	ldr	r3, [sp, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	9b00      	ldr	r3, [sp, #0]
 8005448:	444b      	add	r3, r9
 800544a:	9307      	str	r3, [sp, #28]
 800544c:	9b02      	ldr	r3, [sp, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	46b8      	mov	r8, r7
 8005454:	9306      	str	r3, [sp, #24]
 8005456:	4607      	mov	r7, r0
 8005458:	9b01      	ldr	r3, [sp, #4]
 800545a:	4631      	mov	r1, r6
 800545c:	3b01      	subs	r3, #1
 800545e:	4658      	mov	r0, fp
 8005460:	9302      	str	r3, [sp, #8]
 8005462:	f7ff fa69 	bl	8004938 <quorem>
 8005466:	4603      	mov	r3, r0
 8005468:	3330      	adds	r3, #48	; 0x30
 800546a:	9004      	str	r0, [sp, #16]
 800546c:	4641      	mov	r1, r8
 800546e:	4658      	mov	r0, fp
 8005470:	9308      	str	r3, [sp, #32]
 8005472:	f7ff f8ab 	bl	80045cc <__mcmp>
 8005476:	463a      	mov	r2, r7
 8005478:	4681      	mov	r9, r0
 800547a:	4631      	mov	r1, r6
 800547c:	4620      	mov	r0, r4
 800547e:	f7ff f8c1 	bl	8004604 <__mdiff>
 8005482:	68c2      	ldr	r2, [r0, #12]
 8005484:	9b08      	ldr	r3, [sp, #32]
 8005486:	4605      	mov	r5, r0
 8005488:	bb02      	cbnz	r2, 80054cc <_dtoa_r+0xa7c>
 800548a:	4601      	mov	r1, r0
 800548c:	4658      	mov	r0, fp
 800548e:	f7ff f89d 	bl	80045cc <__mcmp>
 8005492:	9b08      	ldr	r3, [sp, #32]
 8005494:	4602      	mov	r2, r0
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800549e:	f7fe fe57 	bl	8004150 <_Bfree>
 80054a2:	9b05      	ldr	r3, [sp, #20]
 80054a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054a6:	9d01      	ldr	r5, [sp, #4]
 80054a8:	ea43 0102 	orr.w	r1, r3, r2
 80054ac:	9b06      	ldr	r3, [sp, #24]
 80054ae:	430b      	orrs	r3, r1
 80054b0:	9b08      	ldr	r3, [sp, #32]
 80054b2:	d10d      	bne.n	80054d0 <_dtoa_r+0xa80>
 80054b4:	2b39      	cmp	r3, #57	; 0x39
 80054b6:	d029      	beq.n	800550c <_dtoa_r+0xabc>
 80054b8:	f1b9 0f00 	cmp.w	r9, #0
 80054bc:	dd01      	ble.n	80054c2 <_dtoa_r+0xa72>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	3331      	adds	r3, #49	; 0x31
 80054c2:	9a02      	ldr	r2, [sp, #8]
 80054c4:	7013      	strb	r3, [r2, #0]
 80054c6:	e774      	b.n	80053b2 <_dtoa_r+0x962>
 80054c8:	4638      	mov	r0, r7
 80054ca:	e7b9      	b.n	8005440 <_dtoa_r+0x9f0>
 80054cc:	2201      	movs	r2, #1
 80054ce:	e7e2      	b.n	8005496 <_dtoa_r+0xa46>
 80054d0:	f1b9 0f00 	cmp.w	r9, #0
 80054d4:	db06      	blt.n	80054e4 <_dtoa_r+0xa94>
 80054d6:	9905      	ldr	r1, [sp, #20]
 80054d8:	ea41 0909 	orr.w	r9, r1, r9
 80054dc:	9906      	ldr	r1, [sp, #24]
 80054de:	ea59 0101 	orrs.w	r1, r9, r1
 80054e2:	d120      	bne.n	8005526 <_dtoa_r+0xad6>
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	ddec      	ble.n	80054c2 <_dtoa_r+0xa72>
 80054e8:	4659      	mov	r1, fp
 80054ea:	2201      	movs	r2, #1
 80054ec:	4620      	mov	r0, r4
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f7ff f800 	bl	80044f4 <__lshift>
 80054f4:	4631      	mov	r1, r6
 80054f6:	4683      	mov	fp, r0
 80054f8:	f7ff f868 	bl	80045cc <__mcmp>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	dc02      	bgt.n	8005508 <_dtoa_r+0xab8>
 8005502:	d1de      	bne.n	80054c2 <_dtoa_r+0xa72>
 8005504:	07da      	lsls	r2, r3, #31
 8005506:	d5dc      	bpl.n	80054c2 <_dtoa_r+0xa72>
 8005508:	2b39      	cmp	r3, #57	; 0x39
 800550a:	d1d8      	bne.n	80054be <_dtoa_r+0xa6e>
 800550c:	9a02      	ldr	r2, [sp, #8]
 800550e:	2339      	movs	r3, #57	; 0x39
 8005510:	7013      	strb	r3, [r2, #0]
 8005512:	462b      	mov	r3, r5
 8005514:	461d      	mov	r5, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800551c:	2a39      	cmp	r2, #57	; 0x39
 800551e:	d050      	beq.n	80055c2 <_dtoa_r+0xb72>
 8005520:	3201      	adds	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e745      	b.n	80053b2 <_dtoa_r+0x962>
 8005526:	2a00      	cmp	r2, #0
 8005528:	dd03      	ble.n	8005532 <_dtoa_r+0xae2>
 800552a:	2b39      	cmp	r3, #57	; 0x39
 800552c:	d0ee      	beq.n	800550c <_dtoa_r+0xabc>
 800552e:	3301      	adds	r3, #1
 8005530:	e7c7      	b.n	80054c2 <_dtoa_r+0xa72>
 8005532:	9a01      	ldr	r2, [sp, #4]
 8005534:	9907      	ldr	r1, [sp, #28]
 8005536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800553a:	428a      	cmp	r2, r1
 800553c:	d02a      	beq.n	8005594 <_dtoa_r+0xb44>
 800553e:	4659      	mov	r1, fp
 8005540:	2300      	movs	r3, #0
 8005542:	220a      	movs	r2, #10
 8005544:	4620      	mov	r0, r4
 8005546:	f7fe fe25 	bl	8004194 <__multadd>
 800554a:	45b8      	cmp	r8, r7
 800554c:	4683      	mov	fp, r0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	f04f 020a 	mov.w	r2, #10
 8005556:	4641      	mov	r1, r8
 8005558:	4620      	mov	r0, r4
 800555a:	d107      	bne.n	800556c <_dtoa_r+0xb1c>
 800555c:	f7fe fe1a 	bl	8004194 <__multadd>
 8005560:	4680      	mov	r8, r0
 8005562:	4607      	mov	r7, r0
 8005564:	9b01      	ldr	r3, [sp, #4]
 8005566:	3301      	adds	r3, #1
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	e775      	b.n	8005458 <_dtoa_r+0xa08>
 800556c:	f7fe fe12 	bl	8004194 <__multadd>
 8005570:	4639      	mov	r1, r7
 8005572:	4680      	mov	r8, r0
 8005574:	2300      	movs	r3, #0
 8005576:	220a      	movs	r2, #10
 8005578:	4620      	mov	r0, r4
 800557a:	f7fe fe0b 	bl	8004194 <__multadd>
 800557e:	4607      	mov	r7, r0
 8005580:	e7f0      	b.n	8005564 <_dtoa_r+0xb14>
 8005582:	f1b9 0f00 	cmp.w	r9, #0
 8005586:	9a00      	ldr	r2, [sp, #0]
 8005588:	bfcc      	ite	gt
 800558a:	464d      	movgt	r5, r9
 800558c:	2501      	movle	r5, #1
 800558e:	4415      	add	r5, r2
 8005590:	f04f 0800 	mov.w	r8, #0
 8005594:	4659      	mov	r1, fp
 8005596:	2201      	movs	r2, #1
 8005598:	4620      	mov	r0, r4
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	f7fe ffaa 	bl	80044f4 <__lshift>
 80055a0:	4631      	mov	r1, r6
 80055a2:	4683      	mov	fp, r0
 80055a4:	f7ff f812 	bl	80045cc <__mcmp>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	dcb2      	bgt.n	8005512 <_dtoa_r+0xac2>
 80055ac:	d102      	bne.n	80055b4 <_dtoa_r+0xb64>
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	07db      	lsls	r3, r3, #31
 80055b2:	d4ae      	bmi.n	8005512 <_dtoa_r+0xac2>
 80055b4:	462b      	mov	r3, r5
 80055b6:	461d      	mov	r5, r3
 80055b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055bc:	2a30      	cmp	r2, #48	; 0x30
 80055be:	d0fa      	beq.n	80055b6 <_dtoa_r+0xb66>
 80055c0:	e6f7      	b.n	80053b2 <_dtoa_r+0x962>
 80055c2:	9a00      	ldr	r2, [sp, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d1a5      	bne.n	8005514 <_dtoa_r+0xac4>
 80055c8:	f10a 0a01 	add.w	sl, sl, #1
 80055cc:	2331      	movs	r3, #49	; 0x31
 80055ce:	e779      	b.n	80054c4 <_dtoa_r+0xa74>
 80055d0:	4b13      	ldr	r3, [pc, #76]	; (8005620 <_dtoa_r+0xbd0>)
 80055d2:	f7ff baaf 	b.w	8004b34 <_dtoa_r+0xe4>
 80055d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f aa86 	bne.w	8004aea <_dtoa_r+0x9a>
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <_dtoa_r+0xbd4>)
 80055e0:	f7ff baa8 	b.w	8004b34 <_dtoa_r+0xe4>
 80055e4:	f1b9 0f00 	cmp.w	r9, #0
 80055e8:	dc03      	bgt.n	80055f2 <_dtoa_r+0xba2>
 80055ea:	9b05      	ldr	r3, [sp, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f73f aec9 	bgt.w	8005384 <_dtoa_r+0x934>
 80055f2:	9d00      	ldr	r5, [sp, #0]
 80055f4:	4631      	mov	r1, r6
 80055f6:	4658      	mov	r0, fp
 80055f8:	f7ff f99e 	bl	8004938 <quorem>
 80055fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005600:	f805 3b01 	strb.w	r3, [r5], #1
 8005604:	9a00      	ldr	r2, [sp, #0]
 8005606:	1aaa      	subs	r2, r5, r2
 8005608:	4591      	cmp	r9, r2
 800560a:	ddba      	ble.n	8005582 <_dtoa_r+0xb32>
 800560c:	4659      	mov	r1, fp
 800560e:	2300      	movs	r3, #0
 8005610:	220a      	movs	r2, #10
 8005612:	4620      	mov	r0, r4
 8005614:	f7fe fdbe 	bl	8004194 <__multadd>
 8005618:	4683      	mov	fp, r0
 800561a:	e7eb      	b.n	80055f4 <_dtoa_r+0xba4>
 800561c:	0800659b 	.word	0x0800659b
 8005620:	080066f5 	.word	0x080066f5
 8005624:	080066e8 	.word	0x080066e8

08005628 <fiprintf>:
 8005628:	b40e      	push	{r1, r2, r3}
 800562a:	b503      	push	{r0, r1, lr}
 800562c:	4601      	mov	r1, r0
 800562e:	ab03      	add	r3, sp, #12
 8005630:	4805      	ldr	r0, [pc, #20]	; (8005648 <fiprintf+0x20>)
 8005632:	f853 2b04 	ldr.w	r2, [r3], #4
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f000 f8a3 	bl	8005784 <_vfiprintf_r>
 800563e:	b002      	add	sp, #8
 8005640:	f85d eb04 	ldr.w	lr, [sp], #4
 8005644:	b003      	add	sp, #12
 8005646:	4770      	bx	lr
 8005648:	20000010 	.word	0x20000010

0800564c <malloc>:
 800564c:	4b02      	ldr	r3, [pc, #8]	; (8005658 <malloc+0xc>)
 800564e:	4601      	mov	r1, r0
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	f7ff b8e9 	b.w	8004828 <_malloc_r>
 8005656:	bf00      	nop
 8005658:	20000010 	.word	0x20000010

0800565c <memcpy>:
 800565c:	440a      	add	r2, r1
 800565e:	4291      	cmp	r1, r2
 8005660:	f100 33ff 	add.w	r3, r0, #4294967295
 8005664:	d100      	bne.n	8005668 <memcpy+0xc>
 8005666:	4770      	bx	lr
 8005668:	b510      	push	{r4, lr}
 800566a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800566e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005672:	4291      	cmp	r1, r2
 8005674:	d1f9      	bne.n	800566a <memcpy+0xe>
 8005676:	bd10      	pop	{r4, pc}

08005678 <__malloc_lock>:
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <__malloc_lock+0x8>)
 800567a:	f000 bdc7 	b.w	800620c <__retarget_lock_acquire_recursive>
 800567e:	bf00      	nop
 8005680:	200001fc 	.word	0x200001fc

08005684 <__malloc_unlock>:
 8005684:	4801      	ldr	r0, [pc, #4]	; (800568c <__malloc_unlock+0x8>)
 8005686:	f000 bdc2 	b.w	800620e <__retarget_lock_release_recursive>
 800568a:	bf00      	nop
 800568c:	200001fc 	.word	0x200001fc

08005690 <_free_r>:
 8005690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005692:	2900      	cmp	r1, #0
 8005694:	d048      	beq.n	8005728 <_free_r+0x98>
 8005696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569a:	9001      	str	r0, [sp, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f1a1 0404 	sub.w	r4, r1, #4
 80056a2:	bfb8      	it	lt
 80056a4:	18e4      	addlt	r4, r4, r3
 80056a6:	f7ff ffe7 	bl	8005678 <__malloc_lock>
 80056aa:	4a20      	ldr	r2, [pc, #128]	; (800572c <_free_r+0x9c>)
 80056ac:	9801      	ldr	r0, [sp, #4]
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	4615      	mov	r5, r2
 80056b2:	b933      	cbnz	r3, 80056c2 <_free_r+0x32>
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	6014      	str	r4, [r2, #0]
 80056b8:	b003      	add	sp, #12
 80056ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056be:	f7ff bfe1 	b.w	8005684 <__malloc_unlock>
 80056c2:	42a3      	cmp	r3, r4
 80056c4:	d90b      	bls.n	80056de <_free_r+0x4e>
 80056c6:	6821      	ldr	r1, [r4, #0]
 80056c8:	1862      	adds	r2, r4, r1
 80056ca:	4293      	cmp	r3, r2
 80056cc:	bf04      	itt	eq
 80056ce:	681a      	ldreq	r2, [r3, #0]
 80056d0:	685b      	ldreq	r3, [r3, #4]
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	bf04      	itt	eq
 80056d6:	1852      	addeq	r2, r2, r1
 80056d8:	6022      	streq	r2, [r4, #0]
 80056da:	602c      	str	r4, [r5, #0]
 80056dc:	e7ec      	b.n	80056b8 <_free_r+0x28>
 80056de:	461a      	mov	r2, r3
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	b10b      	cbz	r3, 80056e8 <_free_r+0x58>
 80056e4:	42a3      	cmp	r3, r4
 80056e6:	d9fa      	bls.n	80056de <_free_r+0x4e>
 80056e8:	6811      	ldr	r1, [r2, #0]
 80056ea:	1855      	adds	r5, r2, r1
 80056ec:	42a5      	cmp	r5, r4
 80056ee:	d10b      	bne.n	8005708 <_free_r+0x78>
 80056f0:	6824      	ldr	r4, [r4, #0]
 80056f2:	4421      	add	r1, r4
 80056f4:	1854      	adds	r4, r2, r1
 80056f6:	42a3      	cmp	r3, r4
 80056f8:	6011      	str	r1, [r2, #0]
 80056fa:	d1dd      	bne.n	80056b8 <_free_r+0x28>
 80056fc:	681c      	ldr	r4, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	6053      	str	r3, [r2, #4]
 8005702:	4421      	add	r1, r4
 8005704:	6011      	str	r1, [r2, #0]
 8005706:	e7d7      	b.n	80056b8 <_free_r+0x28>
 8005708:	d902      	bls.n	8005710 <_free_r+0x80>
 800570a:	230c      	movs	r3, #12
 800570c:	6003      	str	r3, [r0, #0]
 800570e:	e7d3      	b.n	80056b8 <_free_r+0x28>
 8005710:	6825      	ldr	r5, [r4, #0]
 8005712:	1961      	adds	r1, r4, r5
 8005714:	428b      	cmp	r3, r1
 8005716:	bf04      	itt	eq
 8005718:	6819      	ldreq	r1, [r3, #0]
 800571a:	685b      	ldreq	r3, [r3, #4]
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	bf04      	itt	eq
 8005720:	1949      	addeq	r1, r1, r5
 8005722:	6021      	streq	r1, [r4, #0]
 8005724:	6054      	str	r4, [r2, #4]
 8005726:	e7c7      	b.n	80056b8 <_free_r+0x28>
 8005728:	b003      	add	sp, #12
 800572a:	bd30      	pop	{r4, r5, pc}
 800572c:	20000094 	.word	0x20000094

08005730 <__sfputc_r>:
 8005730:	6893      	ldr	r3, [r2, #8]
 8005732:	3b01      	subs	r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	b410      	push	{r4}
 8005738:	6093      	str	r3, [r2, #8]
 800573a:	da08      	bge.n	800574e <__sfputc_r+0x1e>
 800573c:	6994      	ldr	r4, [r2, #24]
 800573e:	42a3      	cmp	r3, r4
 8005740:	db01      	blt.n	8005746 <__sfputc_r+0x16>
 8005742:	290a      	cmp	r1, #10
 8005744:	d103      	bne.n	800574e <__sfputc_r+0x1e>
 8005746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800574a:	f000 badf 	b.w	8005d0c <__swbuf_r>
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	1c58      	adds	r0, r3, #1
 8005752:	6010      	str	r0, [r2, #0]
 8005754:	7019      	strb	r1, [r3, #0]
 8005756:	4608      	mov	r0, r1
 8005758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575c:	4770      	bx	lr

0800575e <__sfputs_r>:
 800575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005760:	4606      	mov	r6, r0
 8005762:	460f      	mov	r7, r1
 8005764:	4614      	mov	r4, r2
 8005766:	18d5      	adds	r5, r2, r3
 8005768:	42ac      	cmp	r4, r5
 800576a:	d101      	bne.n	8005770 <__sfputs_r+0x12>
 800576c:	2000      	movs	r0, #0
 800576e:	e007      	b.n	8005780 <__sfputs_r+0x22>
 8005770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005774:	463a      	mov	r2, r7
 8005776:	4630      	mov	r0, r6
 8005778:	f7ff ffda 	bl	8005730 <__sfputc_r>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d1f3      	bne.n	8005768 <__sfputs_r+0xa>
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005784 <_vfiprintf_r>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	460d      	mov	r5, r1
 800578a:	b09d      	sub	sp, #116	; 0x74
 800578c:	4614      	mov	r4, r2
 800578e:	4698      	mov	r8, r3
 8005790:	4606      	mov	r6, r0
 8005792:	b118      	cbz	r0, 800579c <_vfiprintf_r+0x18>
 8005794:	6983      	ldr	r3, [r0, #24]
 8005796:	b90b      	cbnz	r3, 800579c <_vfiprintf_r+0x18>
 8005798:	f000 fc9a 	bl	80060d0 <__sinit>
 800579c:	4b89      	ldr	r3, [pc, #548]	; (80059c4 <_vfiprintf_r+0x240>)
 800579e:	429d      	cmp	r5, r3
 80057a0:	d11b      	bne.n	80057da <_vfiprintf_r+0x56>
 80057a2:	6875      	ldr	r5, [r6, #4]
 80057a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_vfiprintf_r+0x32>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_vfiprintf_r+0x32>
 80057b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b2:	f000 fd2b 	bl	800620c <__retarget_lock_acquire_recursive>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	d501      	bpl.n	80057c0 <_vfiprintf_r+0x3c>
 80057bc:	692b      	ldr	r3, [r5, #16]
 80057be:	b9eb      	cbnz	r3, 80057fc <_vfiprintf_r+0x78>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 faf4 	bl	8005db0 <__swsetup_r>
 80057c8:	b1c0      	cbz	r0, 80057fc <_vfiprintf_r+0x78>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057cc:	07dc      	lsls	r4, r3, #31
 80057ce:	d50e      	bpl.n	80057ee <_vfiprintf_r+0x6a>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	b01d      	add	sp, #116	; 0x74
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <_vfiprintf_r+0x244>)
 80057dc:	429d      	cmp	r5, r3
 80057de:	d101      	bne.n	80057e4 <_vfiprintf_r+0x60>
 80057e0:	68b5      	ldr	r5, [r6, #8]
 80057e2:	e7df      	b.n	80057a4 <_vfiprintf_r+0x20>
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <_vfiprintf_r+0x248>)
 80057e6:	429d      	cmp	r5, r3
 80057e8:	bf08      	it	eq
 80057ea:	68f5      	ldreq	r5, [r6, #12]
 80057ec:	e7da      	b.n	80057a4 <_vfiprintf_r+0x20>
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	0598      	lsls	r0, r3, #22
 80057f2:	d4ed      	bmi.n	80057d0 <_vfiprintf_r+0x4c>
 80057f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f6:	f000 fd0a 	bl	800620e <__retarget_lock_release_recursive>
 80057fa:	e7e9      	b.n	80057d0 <_vfiprintf_r+0x4c>
 80057fc:	2300      	movs	r3, #0
 80057fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005800:	2320      	movs	r3, #32
 8005802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005806:	f8cd 800c 	str.w	r8, [sp, #12]
 800580a:	2330      	movs	r3, #48	; 0x30
 800580c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059d0 <_vfiprintf_r+0x24c>
 8005810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005814:	f04f 0901 	mov.w	r9, #1
 8005818:	4623      	mov	r3, r4
 800581a:	469a      	mov	sl, r3
 800581c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005820:	b10a      	cbz	r2, 8005826 <_vfiprintf_r+0xa2>
 8005822:	2a25      	cmp	r2, #37	; 0x25
 8005824:	d1f9      	bne.n	800581a <_vfiprintf_r+0x96>
 8005826:	ebba 0b04 	subs.w	fp, sl, r4
 800582a:	d00b      	beq.n	8005844 <_vfiprintf_r+0xc0>
 800582c:	465b      	mov	r3, fp
 800582e:	4622      	mov	r2, r4
 8005830:	4629      	mov	r1, r5
 8005832:	4630      	mov	r0, r6
 8005834:	f7ff ff93 	bl	800575e <__sfputs_r>
 8005838:	3001      	adds	r0, #1
 800583a:	f000 80aa 	beq.w	8005992 <_vfiprintf_r+0x20e>
 800583e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005840:	445a      	add	r2, fp
 8005842:	9209      	str	r2, [sp, #36]	; 0x24
 8005844:	f89a 3000 	ldrb.w	r3, [sl]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a2 	beq.w	8005992 <_vfiprintf_r+0x20e>
 800584e:	2300      	movs	r3, #0
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005858:	f10a 0a01 	add.w	sl, sl, #1
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005864:	931a      	str	r3, [sp, #104]	; 0x68
 8005866:	4654      	mov	r4, sl
 8005868:	2205      	movs	r2, #5
 800586a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586e:	4858      	ldr	r0, [pc, #352]	; (80059d0 <_vfiprintf_r+0x24c>)
 8005870:	f7fa fcae 	bl	80001d0 <memchr>
 8005874:	9a04      	ldr	r2, [sp, #16]
 8005876:	b9d8      	cbnz	r0, 80058b0 <_vfiprintf_r+0x12c>
 8005878:	06d1      	lsls	r1, r2, #27
 800587a:	bf44      	itt	mi
 800587c:	2320      	movmi	r3, #32
 800587e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005882:	0713      	lsls	r3, r2, #28
 8005884:	bf44      	itt	mi
 8005886:	232b      	movmi	r3, #43	; 0x2b
 8005888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588c:	f89a 3000 	ldrb.w	r3, [sl]
 8005890:	2b2a      	cmp	r3, #42	; 0x2a
 8005892:	d015      	beq.n	80058c0 <_vfiprintf_r+0x13c>
 8005894:	9a07      	ldr	r2, [sp, #28]
 8005896:	4654      	mov	r4, sl
 8005898:	2000      	movs	r0, #0
 800589a:	f04f 0c0a 	mov.w	ip, #10
 800589e:	4621      	mov	r1, r4
 80058a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a4:	3b30      	subs	r3, #48	; 0x30
 80058a6:	2b09      	cmp	r3, #9
 80058a8:	d94e      	bls.n	8005948 <_vfiprintf_r+0x1c4>
 80058aa:	b1b0      	cbz	r0, 80058da <_vfiprintf_r+0x156>
 80058ac:	9207      	str	r2, [sp, #28]
 80058ae:	e014      	b.n	80058da <_vfiprintf_r+0x156>
 80058b0:	eba0 0308 	sub.w	r3, r0, r8
 80058b4:	fa09 f303 	lsl.w	r3, r9, r3
 80058b8:	4313      	orrs	r3, r2
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	46a2      	mov	sl, r4
 80058be:	e7d2      	b.n	8005866 <_vfiprintf_r+0xe2>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	9103      	str	r1, [sp, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfbb      	ittet	lt
 80058cc:	425b      	neglt	r3, r3
 80058ce:	f042 0202 	orrlt.w	r2, r2, #2
 80058d2:	9307      	strge	r3, [sp, #28]
 80058d4:	9307      	strlt	r3, [sp, #28]
 80058d6:	bfb8      	it	lt
 80058d8:	9204      	strlt	r2, [sp, #16]
 80058da:	7823      	ldrb	r3, [r4, #0]
 80058dc:	2b2e      	cmp	r3, #46	; 0x2e
 80058de:	d10c      	bne.n	80058fa <_vfiprintf_r+0x176>
 80058e0:	7863      	ldrb	r3, [r4, #1]
 80058e2:	2b2a      	cmp	r3, #42	; 0x2a
 80058e4:	d135      	bne.n	8005952 <_vfiprintf_r+0x1ce>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	1d1a      	adds	r2, r3, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	9203      	str	r2, [sp, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bfb8      	it	lt
 80058f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f6:	3402      	adds	r4, #2
 80058f8:	9305      	str	r3, [sp, #20]
 80058fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059e0 <_vfiprintf_r+0x25c>
 80058fe:	7821      	ldrb	r1, [r4, #0]
 8005900:	2203      	movs	r2, #3
 8005902:	4650      	mov	r0, sl
 8005904:	f7fa fc64 	bl	80001d0 <memchr>
 8005908:	b140      	cbz	r0, 800591c <_vfiprintf_r+0x198>
 800590a:	2340      	movs	r3, #64	; 0x40
 800590c:	eba0 000a 	sub.w	r0, r0, sl
 8005910:	fa03 f000 	lsl.w	r0, r3, r0
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	4303      	orrs	r3, r0
 8005918:	3401      	adds	r4, #1
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005920:	482c      	ldr	r0, [pc, #176]	; (80059d4 <_vfiprintf_r+0x250>)
 8005922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005926:	2206      	movs	r2, #6
 8005928:	f7fa fc52 	bl	80001d0 <memchr>
 800592c:	2800      	cmp	r0, #0
 800592e:	d03f      	beq.n	80059b0 <_vfiprintf_r+0x22c>
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <_vfiprintf_r+0x254>)
 8005932:	bb1b      	cbnz	r3, 800597c <_vfiprintf_r+0x1f8>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	3307      	adds	r3, #7
 8005938:	f023 0307 	bic.w	r3, r3, #7
 800593c:	3308      	adds	r3, #8
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005942:	443b      	add	r3, r7
 8005944:	9309      	str	r3, [sp, #36]	; 0x24
 8005946:	e767      	b.n	8005818 <_vfiprintf_r+0x94>
 8005948:	fb0c 3202 	mla	r2, ip, r2, r3
 800594c:	460c      	mov	r4, r1
 800594e:	2001      	movs	r0, #1
 8005950:	e7a5      	b.n	800589e <_vfiprintf_r+0x11a>
 8005952:	2300      	movs	r3, #0
 8005954:	3401      	adds	r4, #1
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	4619      	mov	r1, r3
 800595a:	f04f 0c0a 	mov.w	ip, #10
 800595e:	4620      	mov	r0, r4
 8005960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005964:	3a30      	subs	r2, #48	; 0x30
 8005966:	2a09      	cmp	r2, #9
 8005968:	d903      	bls.n	8005972 <_vfiprintf_r+0x1ee>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0c5      	beq.n	80058fa <_vfiprintf_r+0x176>
 800596e:	9105      	str	r1, [sp, #20]
 8005970:	e7c3      	b.n	80058fa <_vfiprintf_r+0x176>
 8005972:	fb0c 2101 	mla	r1, ip, r1, r2
 8005976:	4604      	mov	r4, r0
 8005978:	2301      	movs	r3, #1
 800597a:	e7f0      	b.n	800595e <_vfiprintf_r+0x1da>
 800597c:	ab03      	add	r3, sp, #12
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462a      	mov	r2, r5
 8005982:	4b16      	ldr	r3, [pc, #88]	; (80059dc <_vfiprintf_r+0x258>)
 8005984:	a904      	add	r1, sp, #16
 8005986:	4630      	mov	r0, r6
 8005988:	f3af 8000 	nop.w
 800598c:	4607      	mov	r7, r0
 800598e:	1c78      	adds	r0, r7, #1
 8005990:	d1d6      	bne.n	8005940 <_vfiprintf_r+0x1bc>
 8005992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005994:	07d9      	lsls	r1, r3, #31
 8005996:	d405      	bmi.n	80059a4 <_vfiprintf_r+0x220>
 8005998:	89ab      	ldrh	r3, [r5, #12]
 800599a:	059a      	lsls	r2, r3, #22
 800599c:	d402      	bmi.n	80059a4 <_vfiprintf_r+0x220>
 800599e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059a0:	f000 fc35 	bl	800620e <__retarget_lock_release_recursive>
 80059a4:	89ab      	ldrh	r3, [r5, #12]
 80059a6:	065b      	lsls	r3, r3, #25
 80059a8:	f53f af12 	bmi.w	80057d0 <_vfiprintf_r+0x4c>
 80059ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ae:	e711      	b.n	80057d4 <_vfiprintf_r+0x50>
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <_vfiprintf_r+0x258>)
 80059b8:	a904      	add	r1, sp, #16
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 f880 	bl	8005ac0 <_printf_i>
 80059c0:	e7e4      	b.n	800598c <_vfiprintf_r+0x208>
 80059c2:	bf00      	nop
 80059c4:	080067ac 	.word	0x080067ac
 80059c8:	080067cc 	.word	0x080067cc
 80059cc:	0800678c 	.word	0x0800678c
 80059d0:	08006756 	.word	0x08006756
 80059d4:	08006760 	.word	0x08006760
 80059d8:	00000000 	.word	0x00000000
 80059dc:	0800575f 	.word	0x0800575f
 80059e0:	0800675c 	.word	0x0800675c

080059e4 <_printf_common>:
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	4616      	mov	r6, r2
 80059ea:	4699      	mov	r9, r3
 80059ec:	688a      	ldr	r2, [r1, #8]
 80059ee:	690b      	ldr	r3, [r1, #16]
 80059f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	bfb8      	it	lt
 80059f8:	4613      	movlt	r3, r2
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a00:	4607      	mov	r7, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	b10a      	cbz	r2, 8005a0a <_printf_common+0x26>
 8005a06:	3301      	adds	r3, #1
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	0699      	lsls	r1, r3, #26
 8005a0e:	bf42      	ittt	mi
 8005a10:	6833      	ldrmi	r3, [r6, #0]
 8005a12:	3302      	addmi	r3, #2
 8005a14:	6033      	strmi	r3, [r6, #0]
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	f015 0506 	ands.w	r5, r5, #6
 8005a1c:	d106      	bne.n	8005a2c <_printf_common+0x48>
 8005a1e:	f104 0a19 	add.w	sl, r4, #25
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	6832      	ldr	r2, [r6, #0]
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dc26      	bgt.n	8005a7a <_printf_common+0x96>
 8005a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a30:	1e13      	subs	r3, r2, #0
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	bf18      	it	ne
 8005a36:	2301      	movne	r3, #1
 8005a38:	0692      	lsls	r2, r2, #26
 8005a3a:	d42b      	bmi.n	8005a94 <_printf_common+0xb0>
 8005a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a40:	4649      	mov	r1, r9
 8005a42:	4638      	mov	r0, r7
 8005a44:	47c0      	blx	r8
 8005a46:	3001      	adds	r0, #1
 8005a48:	d01e      	beq.n	8005a88 <_printf_common+0xa4>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	68e5      	ldr	r5, [r4, #12]
 8005a4e:	6832      	ldr	r2, [r6, #0]
 8005a50:	f003 0306 	and.w	r3, r3, #6
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	bf08      	it	eq
 8005a58:	1aad      	subeq	r5, r5, r2
 8005a5a:	68a3      	ldr	r3, [r4, #8]
 8005a5c:	6922      	ldr	r2, [r4, #16]
 8005a5e:	bf0c      	ite	eq
 8005a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a64:	2500      	movne	r5, #0
 8005a66:	4293      	cmp	r3, r2
 8005a68:	bfc4      	itt	gt
 8005a6a:	1a9b      	subgt	r3, r3, r2
 8005a6c:	18ed      	addgt	r5, r5, r3
 8005a6e:	2600      	movs	r6, #0
 8005a70:	341a      	adds	r4, #26
 8005a72:	42b5      	cmp	r5, r6
 8005a74:	d11a      	bne.n	8005aac <_printf_common+0xc8>
 8005a76:	2000      	movs	r0, #0
 8005a78:	e008      	b.n	8005a8c <_printf_common+0xa8>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4638      	mov	r0, r7
 8005a82:	47c0      	blx	r8
 8005a84:	3001      	adds	r0, #1
 8005a86:	d103      	bne.n	8005a90 <_printf_common+0xac>
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a90:	3501      	adds	r5, #1
 8005a92:	e7c6      	b.n	8005a22 <_printf_common+0x3e>
 8005a94:	18e1      	adds	r1, r4, r3
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	2030      	movs	r0, #48	; 0x30
 8005a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a9e:	4422      	add	r2, r4
 8005aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	e7c7      	b.n	8005a3c <_printf_common+0x58>
 8005aac:	2301      	movs	r3, #1
 8005aae:	4622      	mov	r2, r4
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	47c0      	blx	r8
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d0e6      	beq.n	8005a88 <_printf_common+0xa4>
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7d9      	b.n	8005a72 <_printf_common+0x8e>
	...

08005ac0 <_printf_i>:
 8005ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4691      	mov	r9, r2
 8005ac8:	7e27      	ldrb	r7, [r4, #24]
 8005aca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005acc:	2f78      	cmp	r7, #120	; 0x78
 8005ace:	4680      	mov	r8, r0
 8005ad0:	469a      	mov	sl, r3
 8005ad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad6:	d807      	bhi.n	8005ae8 <_printf_i+0x28>
 8005ad8:	2f62      	cmp	r7, #98	; 0x62
 8005ada:	d80a      	bhi.n	8005af2 <_printf_i+0x32>
 8005adc:	2f00      	cmp	r7, #0
 8005ade:	f000 80d8 	beq.w	8005c92 <_printf_i+0x1d2>
 8005ae2:	2f58      	cmp	r7, #88	; 0x58
 8005ae4:	f000 80a3 	beq.w	8005c2e <_printf_i+0x16e>
 8005ae8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af0:	e03a      	b.n	8005b68 <_printf_i+0xa8>
 8005af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005af6:	2b15      	cmp	r3, #21
 8005af8:	d8f6      	bhi.n	8005ae8 <_printf_i+0x28>
 8005afa:	a001      	add	r0, pc, #4	; (adr r0, 8005b00 <_printf_i+0x40>)
 8005afc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b00:	08005b59 	.word	0x08005b59
 8005b04:	08005b6d 	.word	0x08005b6d
 8005b08:	08005ae9 	.word	0x08005ae9
 8005b0c:	08005ae9 	.word	0x08005ae9
 8005b10:	08005ae9 	.word	0x08005ae9
 8005b14:	08005ae9 	.word	0x08005ae9
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005ae9 	.word	0x08005ae9
 8005b20:	08005ae9 	.word	0x08005ae9
 8005b24:	08005ae9 	.word	0x08005ae9
 8005b28:	08005ae9 	.word	0x08005ae9
 8005b2c:	08005c79 	.word	0x08005c79
 8005b30:	08005b9d 	.word	0x08005b9d
 8005b34:	08005c5b 	.word	0x08005c5b
 8005b38:	08005ae9 	.word	0x08005ae9
 8005b3c:	08005ae9 	.word	0x08005ae9
 8005b40:	08005c9b 	.word	0x08005c9b
 8005b44:	08005ae9 	.word	0x08005ae9
 8005b48:	08005b9d 	.word	0x08005b9d
 8005b4c:	08005ae9 	.word	0x08005ae9
 8005b50:	08005ae9 	.word	0x08005ae9
 8005b54:	08005c63 	.word	0x08005c63
 8005b58:	680b      	ldr	r3, [r1, #0]
 8005b5a:	1d1a      	adds	r2, r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	600a      	str	r2, [r1, #0]
 8005b60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0a3      	b.n	8005cb4 <_printf_i+0x1f4>
 8005b6c:	6825      	ldr	r5, [r4, #0]
 8005b6e:	6808      	ldr	r0, [r1, #0]
 8005b70:	062e      	lsls	r6, r5, #24
 8005b72:	f100 0304 	add.w	r3, r0, #4
 8005b76:	d50a      	bpl.n	8005b8e <_printf_i+0xce>
 8005b78:	6805      	ldr	r5, [r0, #0]
 8005b7a:	600b      	str	r3, [r1, #0]
 8005b7c:	2d00      	cmp	r5, #0
 8005b7e:	da03      	bge.n	8005b88 <_printf_i+0xc8>
 8005b80:	232d      	movs	r3, #45	; 0x2d
 8005b82:	426d      	negs	r5, r5
 8005b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b88:	485e      	ldr	r0, [pc, #376]	; (8005d04 <_printf_i+0x244>)
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	e019      	b.n	8005bc2 <_printf_i+0x102>
 8005b8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b92:	6805      	ldr	r5, [r0, #0]
 8005b94:	600b      	str	r3, [r1, #0]
 8005b96:	bf18      	it	ne
 8005b98:	b22d      	sxthne	r5, r5
 8005b9a:	e7ef      	b.n	8005b7c <_printf_i+0xbc>
 8005b9c:	680b      	ldr	r3, [r1, #0]
 8005b9e:	6825      	ldr	r5, [r4, #0]
 8005ba0:	1d18      	adds	r0, r3, #4
 8005ba2:	6008      	str	r0, [r1, #0]
 8005ba4:	0628      	lsls	r0, r5, #24
 8005ba6:	d501      	bpl.n	8005bac <_printf_i+0xec>
 8005ba8:	681d      	ldr	r5, [r3, #0]
 8005baa:	e002      	b.n	8005bb2 <_printf_i+0xf2>
 8005bac:	0669      	lsls	r1, r5, #25
 8005bae:	d5fb      	bpl.n	8005ba8 <_printf_i+0xe8>
 8005bb0:	881d      	ldrh	r5, [r3, #0]
 8005bb2:	4854      	ldr	r0, [pc, #336]	; (8005d04 <_printf_i+0x244>)
 8005bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8005bb6:	bf0c      	ite	eq
 8005bb8:	2308      	moveq	r3, #8
 8005bba:	230a      	movne	r3, #10
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc2:	6866      	ldr	r6, [r4, #4]
 8005bc4:	60a6      	str	r6, [r4, #8]
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	bfa2      	ittt	ge
 8005bca:	6821      	ldrge	r1, [r4, #0]
 8005bcc:	f021 0104 	bicge.w	r1, r1, #4
 8005bd0:	6021      	strge	r1, [r4, #0]
 8005bd2:	b90d      	cbnz	r5, 8005bd8 <_printf_i+0x118>
 8005bd4:	2e00      	cmp	r6, #0
 8005bd6:	d04d      	beq.n	8005c74 <_printf_i+0x1b4>
 8005bd8:	4616      	mov	r6, r2
 8005bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bde:	fb03 5711 	mls	r7, r3, r1, r5
 8005be2:	5dc7      	ldrb	r7, [r0, r7]
 8005be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005be8:	462f      	mov	r7, r5
 8005bea:	42bb      	cmp	r3, r7
 8005bec:	460d      	mov	r5, r1
 8005bee:	d9f4      	bls.n	8005bda <_printf_i+0x11a>
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d10b      	bne.n	8005c0c <_printf_i+0x14c>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	07df      	lsls	r7, r3, #31
 8005bf8:	d508      	bpl.n	8005c0c <_printf_i+0x14c>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	6861      	ldr	r1, [r4, #4]
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	bfde      	ittt	le
 8005c02:	2330      	movle	r3, #48	; 0x30
 8005c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c0c:	1b92      	subs	r2, r2, r6
 8005c0e:	6122      	str	r2, [r4, #16]
 8005c10:	f8cd a000 	str.w	sl, [sp]
 8005c14:	464b      	mov	r3, r9
 8005c16:	aa03      	add	r2, sp, #12
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f7ff fee2 	bl	80059e4 <_printf_common>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d14c      	bne.n	8005cbe <_printf_i+0x1fe>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	b004      	add	sp, #16
 8005c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2e:	4835      	ldr	r0, [pc, #212]	; (8005d04 <_printf_i+0x244>)
 8005c30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	680e      	ldr	r6, [r1, #0]
 8005c38:	061f      	lsls	r7, r3, #24
 8005c3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c3e:	600e      	str	r6, [r1, #0]
 8005c40:	d514      	bpl.n	8005c6c <_printf_i+0x1ac>
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	bf44      	itt	mi
 8005c46:	f043 0320 	orrmi.w	r3, r3, #32
 8005c4a:	6023      	strmi	r3, [r4, #0]
 8005c4c:	b91d      	cbnz	r5, 8005c56 <_printf_i+0x196>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f023 0320 	bic.w	r3, r3, #32
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	2310      	movs	r3, #16
 8005c58:	e7b0      	b.n	8005bbc <_printf_i+0xfc>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	f043 0320 	orr.w	r3, r3, #32
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	2378      	movs	r3, #120	; 0x78
 8005c64:	4828      	ldr	r0, [pc, #160]	; (8005d08 <_printf_i+0x248>)
 8005c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c6a:	e7e3      	b.n	8005c34 <_printf_i+0x174>
 8005c6c:	065e      	lsls	r6, r3, #25
 8005c6e:	bf48      	it	mi
 8005c70:	b2ad      	uxthmi	r5, r5
 8005c72:	e7e6      	b.n	8005c42 <_printf_i+0x182>
 8005c74:	4616      	mov	r6, r2
 8005c76:	e7bb      	b.n	8005bf0 <_printf_i+0x130>
 8005c78:	680b      	ldr	r3, [r1, #0]
 8005c7a:	6826      	ldr	r6, [r4, #0]
 8005c7c:	6960      	ldr	r0, [r4, #20]
 8005c7e:	1d1d      	adds	r5, r3, #4
 8005c80:	600d      	str	r5, [r1, #0]
 8005c82:	0635      	lsls	r5, r6, #24
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	d501      	bpl.n	8005c8c <_printf_i+0x1cc>
 8005c88:	6018      	str	r0, [r3, #0]
 8005c8a:	e002      	b.n	8005c92 <_printf_i+0x1d2>
 8005c8c:	0671      	lsls	r1, r6, #25
 8005c8e:	d5fb      	bpl.n	8005c88 <_printf_i+0x1c8>
 8005c90:	8018      	strh	r0, [r3, #0]
 8005c92:	2300      	movs	r3, #0
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	4616      	mov	r6, r2
 8005c98:	e7ba      	b.n	8005c10 <_printf_i+0x150>
 8005c9a:	680b      	ldr	r3, [r1, #0]
 8005c9c:	1d1a      	adds	r2, r3, #4
 8005c9e:	600a      	str	r2, [r1, #0]
 8005ca0:	681e      	ldr	r6, [r3, #0]
 8005ca2:	6862      	ldr	r2, [r4, #4]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f7fa fa92 	bl	80001d0 <memchr>
 8005cac:	b108      	cbz	r0, 8005cb2 <_printf_i+0x1f2>
 8005cae:	1b80      	subs	r0, r0, r6
 8005cb0:	6060      	str	r0, [r4, #4]
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbc:	e7a8      	b.n	8005c10 <_printf_i+0x150>
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d0ab      	beq.n	8005c24 <_printf_i+0x164>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	079b      	lsls	r3, r3, #30
 8005cd0:	d413      	bmi.n	8005cfa <_printf_i+0x23a>
 8005cd2:	68e0      	ldr	r0, [r4, #12]
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	4298      	cmp	r0, r3
 8005cd8:	bfb8      	it	lt
 8005cda:	4618      	movlt	r0, r3
 8005cdc:	e7a4      	b.n	8005c28 <_printf_i+0x168>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	47d0      	blx	sl
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d09b      	beq.n	8005c24 <_printf_i+0x164>
 8005cec:	3501      	adds	r5, #1
 8005cee:	68e3      	ldr	r3, [r4, #12]
 8005cf0:	9903      	ldr	r1, [sp, #12]
 8005cf2:	1a5b      	subs	r3, r3, r1
 8005cf4:	42ab      	cmp	r3, r5
 8005cf6:	dcf2      	bgt.n	8005cde <_printf_i+0x21e>
 8005cf8:	e7eb      	b.n	8005cd2 <_printf_i+0x212>
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	f104 0619 	add.w	r6, r4, #25
 8005d00:	e7f5      	b.n	8005cee <_printf_i+0x22e>
 8005d02:	bf00      	nop
 8005d04:	08006767 	.word	0x08006767
 8005d08:	08006778 	.word	0x08006778

08005d0c <__swbuf_r>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	460e      	mov	r6, r1
 8005d10:	4614      	mov	r4, r2
 8005d12:	4605      	mov	r5, r0
 8005d14:	b118      	cbz	r0, 8005d1e <__swbuf_r+0x12>
 8005d16:	6983      	ldr	r3, [r0, #24]
 8005d18:	b90b      	cbnz	r3, 8005d1e <__swbuf_r+0x12>
 8005d1a:	f000 f9d9 	bl	80060d0 <__sinit>
 8005d1e:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <__swbuf_r+0x98>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	d12b      	bne.n	8005d7c <__swbuf_r+0x70>
 8005d24:	686c      	ldr	r4, [r5, #4]
 8005d26:	69a3      	ldr	r3, [r4, #24]
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	071a      	lsls	r2, r3, #28
 8005d2e:	d52f      	bpl.n	8005d90 <__swbuf_r+0x84>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	b36b      	cbz	r3, 8005d90 <__swbuf_r+0x84>
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	1ac0      	subs	r0, r0, r3
 8005d3a:	6963      	ldr	r3, [r4, #20]
 8005d3c:	b2f6      	uxtb	r6, r6
 8005d3e:	4283      	cmp	r3, r0
 8005d40:	4637      	mov	r7, r6
 8005d42:	dc04      	bgt.n	8005d4e <__swbuf_r+0x42>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f92e 	bl	8005fa8 <_fflush_r>
 8005d4c:	bb30      	cbnz	r0, 8005d9c <__swbuf_r+0x90>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	60a3      	str	r3, [r4, #8]
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	6022      	str	r2, [r4, #0]
 8005d5a:	701e      	strb	r6, [r3, #0]
 8005d5c:	6963      	ldr	r3, [r4, #20]
 8005d5e:	3001      	adds	r0, #1
 8005d60:	4283      	cmp	r3, r0
 8005d62:	d004      	beq.n	8005d6e <__swbuf_r+0x62>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	07db      	lsls	r3, r3, #31
 8005d68:	d506      	bpl.n	8005d78 <__swbuf_r+0x6c>
 8005d6a:	2e0a      	cmp	r6, #10
 8005d6c:	d104      	bne.n	8005d78 <__swbuf_r+0x6c>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 f919 	bl	8005fa8 <_fflush_r>
 8005d76:	b988      	cbnz	r0, 8005d9c <__swbuf_r+0x90>
 8005d78:	4638      	mov	r0, r7
 8005d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <__swbuf_r+0x9c>)
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	d101      	bne.n	8005d86 <__swbuf_r+0x7a>
 8005d82:	68ac      	ldr	r4, [r5, #8]
 8005d84:	e7cf      	b.n	8005d26 <__swbuf_r+0x1a>
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <__swbuf_r+0xa0>)
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	bf08      	it	eq
 8005d8c:	68ec      	ldreq	r4, [r5, #12]
 8005d8e:	e7ca      	b.n	8005d26 <__swbuf_r+0x1a>
 8005d90:	4621      	mov	r1, r4
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 f80c 	bl	8005db0 <__swsetup_r>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d0cb      	beq.n	8005d34 <__swbuf_r+0x28>
 8005d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8005da0:	e7ea      	b.n	8005d78 <__swbuf_r+0x6c>
 8005da2:	bf00      	nop
 8005da4:	080067ac 	.word	0x080067ac
 8005da8:	080067cc 	.word	0x080067cc
 8005dac:	0800678c 	.word	0x0800678c

08005db0 <__swsetup_r>:
 8005db0:	4b32      	ldr	r3, [pc, #200]	; (8005e7c <__swsetup_r+0xcc>)
 8005db2:	b570      	push	{r4, r5, r6, lr}
 8005db4:	681d      	ldr	r5, [r3, #0]
 8005db6:	4606      	mov	r6, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	b125      	cbz	r5, 8005dc6 <__swsetup_r+0x16>
 8005dbc:	69ab      	ldr	r3, [r5, #24]
 8005dbe:	b913      	cbnz	r3, 8005dc6 <__swsetup_r+0x16>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 f985 	bl	80060d0 <__sinit>
 8005dc6:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <__swsetup_r+0xd0>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d10f      	bne.n	8005dec <__swsetup_r+0x3c>
 8005dcc:	686c      	ldr	r4, [r5, #4]
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd4:	0719      	lsls	r1, r3, #28
 8005dd6:	d42c      	bmi.n	8005e32 <__swsetup_r+0x82>
 8005dd8:	06dd      	lsls	r5, r3, #27
 8005dda:	d411      	bmi.n	8005e00 <__swsetup_r+0x50>
 8005ddc:	2309      	movs	r3, #9
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dea:	e03e      	b.n	8005e6a <__swsetup_r+0xba>
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <__swsetup_r+0xd4>)
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d101      	bne.n	8005df6 <__swsetup_r+0x46>
 8005df2:	68ac      	ldr	r4, [r5, #8]
 8005df4:	e7eb      	b.n	8005dce <__swsetup_r+0x1e>
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <__swsetup_r+0xd8>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	bf08      	it	eq
 8005dfc:	68ec      	ldreq	r4, [r5, #12]
 8005dfe:	e7e6      	b.n	8005dce <__swsetup_r+0x1e>
 8005e00:	0758      	lsls	r0, r3, #29
 8005e02:	d512      	bpl.n	8005e2a <__swsetup_r+0x7a>
 8005e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e06:	b141      	cbz	r1, 8005e1a <__swsetup_r+0x6a>
 8005e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <__swsetup_r+0x66>
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff fc3d 	bl	8005690 <_free_r>
 8005e16:	2300      	movs	r3, #0
 8005e18:	6363      	str	r3, [r4, #52]	; 0x34
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	2300      	movs	r3, #0
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0308 	orr.w	r3, r3, #8
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	b94b      	cbnz	r3, 8005e4a <__swsetup_r+0x9a>
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d003      	beq.n	8005e4a <__swsetup_r+0x9a>
 8005e42:	4621      	mov	r1, r4
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 fa07 	bl	8006258 <__smakebuf_r>
 8005e4a:	89a0      	ldrh	r0, [r4, #12]
 8005e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e50:	f010 0301 	ands.w	r3, r0, #1
 8005e54:	d00a      	beq.n	8005e6c <__swsetup_r+0xbc>
 8005e56:	2300      	movs	r3, #0
 8005e58:	60a3      	str	r3, [r4, #8]
 8005e5a:	6963      	ldr	r3, [r4, #20]
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	61a3      	str	r3, [r4, #24]
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	b943      	cbnz	r3, 8005e76 <__swsetup_r+0xc6>
 8005e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e68:	d1ba      	bne.n	8005de0 <__swsetup_r+0x30>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	0781      	lsls	r1, r0, #30
 8005e6e:	bf58      	it	pl
 8005e70:	6963      	ldrpl	r3, [r4, #20]
 8005e72:	60a3      	str	r3, [r4, #8]
 8005e74:	e7f4      	b.n	8005e60 <__swsetup_r+0xb0>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e7f7      	b.n	8005e6a <__swsetup_r+0xba>
 8005e7a:	bf00      	nop
 8005e7c:	20000010 	.word	0x20000010
 8005e80:	080067ac 	.word	0x080067ac
 8005e84:	080067cc 	.word	0x080067cc
 8005e88:	0800678c 	.word	0x0800678c

08005e8c <abort>:
 8005e8c:	b508      	push	{r3, lr}
 8005e8e:	2006      	movs	r0, #6
 8005e90:	f000 fa4a 	bl	8006328 <raise>
 8005e94:	2001      	movs	r0, #1
 8005e96:	f7fb f9cd 	bl	8001234 <_exit>
	...

08005e9c <__sflush_r>:
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	0710      	lsls	r0, r2, #28
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	d458      	bmi.n	8005f5c <__sflush_r+0xc0>
 8005eaa:	684b      	ldr	r3, [r1, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc05      	bgt.n	8005ebc <__sflush_r+0x20>
 8005eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dc02      	bgt.n	8005ebc <__sflush_r+0x20>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d0f9      	beq.n	8005eb6 <__sflush_r+0x1a>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ec8:	682f      	ldr	r7, [r5, #0]
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	d032      	beq.n	8005f34 <__sflush_r+0x98>
 8005ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	075a      	lsls	r2, r3, #29
 8005ed4:	d505      	bpl.n	8005ee2 <__sflush_r+0x46>
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	1ac0      	subs	r0, r0, r3
 8005eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005edc:	b10b      	cbz	r3, 8005ee2 <__sflush_r+0x46>
 8005ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee0:	1ac0      	subs	r0, r0, r3
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ee8:	6a21      	ldr	r1, [r4, #32]
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b0      	blx	r6
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	d106      	bne.n	8005f02 <__sflush_r+0x66>
 8005ef4:	6829      	ldr	r1, [r5, #0]
 8005ef6:	291d      	cmp	r1, #29
 8005ef8:	d82c      	bhi.n	8005f54 <__sflush_r+0xb8>
 8005efa:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <__sflush_r+0x108>)
 8005efc:	40ca      	lsrs	r2, r1
 8005efe:	07d6      	lsls	r6, r2, #31
 8005f00:	d528      	bpl.n	8005f54 <__sflush_r+0xb8>
 8005f02:	2200      	movs	r2, #0
 8005f04:	6062      	str	r2, [r4, #4]
 8005f06:	04d9      	lsls	r1, r3, #19
 8005f08:	6922      	ldr	r2, [r4, #16]
 8005f0a:	6022      	str	r2, [r4, #0]
 8005f0c:	d504      	bpl.n	8005f18 <__sflush_r+0x7c>
 8005f0e:	1c42      	adds	r2, r0, #1
 8005f10:	d101      	bne.n	8005f16 <__sflush_r+0x7a>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	b903      	cbnz	r3, 8005f18 <__sflush_r+0x7c>
 8005f16:	6560      	str	r0, [r4, #84]	; 0x54
 8005f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f1a:	602f      	str	r7, [r5, #0]
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d0ca      	beq.n	8005eb6 <__sflush_r+0x1a>
 8005f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d002      	beq.n	8005f2e <__sflush_r+0x92>
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f7ff fbb1 	bl	8005690 <_free_r>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	6360      	str	r0, [r4, #52]	; 0x34
 8005f32:	e7c1      	b.n	8005eb8 <__sflush_r+0x1c>
 8005f34:	6a21      	ldr	r1, [r4, #32]
 8005f36:	2301      	movs	r3, #1
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b0      	blx	r6
 8005f3c:	1c41      	adds	r1, r0, #1
 8005f3e:	d1c7      	bne.n	8005ed0 <__sflush_r+0x34>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c4      	beq.n	8005ed0 <__sflush_r+0x34>
 8005f46:	2b1d      	cmp	r3, #29
 8005f48:	d001      	beq.n	8005f4e <__sflush_r+0xb2>
 8005f4a:	2b16      	cmp	r3, #22
 8005f4c:	d101      	bne.n	8005f52 <__sflush_r+0xb6>
 8005f4e:	602f      	str	r7, [r5, #0]
 8005f50:	e7b1      	b.n	8005eb6 <__sflush_r+0x1a>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	e7ad      	b.n	8005eb8 <__sflush_r+0x1c>
 8005f5c:	690f      	ldr	r7, [r1, #16]
 8005f5e:	2f00      	cmp	r7, #0
 8005f60:	d0a9      	beq.n	8005eb6 <__sflush_r+0x1a>
 8005f62:	0793      	lsls	r3, r2, #30
 8005f64:	680e      	ldr	r6, [r1, #0]
 8005f66:	bf08      	it	eq
 8005f68:	694b      	ldreq	r3, [r1, #20]
 8005f6a:	600f      	str	r7, [r1, #0]
 8005f6c:	bf18      	it	ne
 8005f6e:	2300      	movne	r3, #0
 8005f70:	eba6 0807 	sub.w	r8, r6, r7
 8005f74:	608b      	str	r3, [r1, #8]
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	dd9c      	ble.n	8005eb6 <__sflush_r+0x1a>
 8005f7c:	6a21      	ldr	r1, [r4, #32]
 8005f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f80:	4643      	mov	r3, r8
 8005f82:	463a      	mov	r2, r7
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b0      	blx	r6
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	dc06      	bgt.n	8005f9a <__sflush_r+0xfe>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	e78e      	b.n	8005eb8 <__sflush_r+0x1c>
 8005f9a:	4407      	add	r7, r0
 8005f9c:	eba8 0800 	sub.w	r8, r8, r0
 8005fa0:	e7e9      	b.n	8005f76 <__sflush_r+0xda>
 8005fa2:	bf00      	nop
 8005fa4:	20400001 	.word	0x20400001

08005fa8 <_fflush_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	690b      	ldr	r3, [r1, #16]
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	b913      	cbnz	r3, 8005fb8 <_fflush_r+0x10>
 8005fb2:	2500      	movs	r5, #0
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	b118      	cbz	r0, 8005fc2 <_fflush_r+0x1a>
 8005fba:	6983      	ldr	r3, [r0, #24]
 8005fbc:	b90b      	cbnz	r3, 8005fc2 <_fflush_r+0x1a>
 8005fbe:	f000 f887 	bl	80060d0 <__sinit>
 8005fc2:	4b14      	ldr	r3, [pc, #80]	; (8006014 <_fflush_r+0x6c>)
 8005fc4:	429c      	cmp	r4, r3
 8005fc6:	d11b      	bne.n	8006000 <_fflush_r+0x58>
 8005fc8:	686c      	ldr	r4, [r5, #4]
 8005fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0ef      	beq.n	8005fb2 <_fflush_r+0xa>
 8005fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fd4:	07d0      	lsls	r0, r2, #31
 8005fd6:	d404      	bmi.n	8005fe2 <_fflush_r+0x3a>
 8005fd8:	0599      	lsls	r1, r3, #22
 8005fda:	d402      	bmi.n	8005fe2 <_fflush_r+0x3a>
 8005fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fde:	f000 f915 	bl	800620c <__retarget_lock_acquire_recursive>
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	f7ff ff59 	bl	8005e9c <__sflush_r>
 8005fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fec:	07da      	lsls	r2, r3, #31
 8005fee:	4605      	mov	r5, r0
 8005ff0:	d4e0      	bmi.n	8005fb4 <_fflush_r+0xc>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	059b      	lsls	r3, r3, #22
 8005ff6:	d4dd      	bmi.n	8005fb4 <_fflush_r+0xc>
 8005ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffa:	f000 f908 	bl	800620e <__retarget_lock_release_recursive>
 8005ffe:	e7d9      	b.n	8005fb4 <_fflush_r+0xc>
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <_fflush_r+0x70>)
 8006002:	429c      	cmp	r4, r3
 8006004:	d101      	bne.n	800600a <_fflush_r+0x62>
 8006006:	68ac      	ldr	r4, [r5, #8]
 8006008:	e7df      	b.n	8005fca <_fflush_r+0x22>
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <_fflush_r+0x74>)
 800600c:	429c      	cmp	r4, r3
 800600e:	bf08      	it	eq
 8006010:	68ec      	ldreq	r4, [r5, #12]
 8006012:	e7da      	b.n	8005fca <_fflush_r+0x22>
 8006014:	080067ac 	.word	0x080067ac
 8006018:	080067cc 	.word	0x080067cc
 800601c:	0800678c 	.word	0x0800678c

08006020 <std>:
 8006020:	2300      	movs	r3, #0
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	e9c0 3300 	strd	r3, r3, [r0]
 800602a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602e:	6083      	str	r3, [r0, #8]
 8006030:	8181      	strh	r1, [r0, #12]
 8006032:	6643      	str	r3, [r0, #100]	; 0x64
 8006034:	81c2      	strh	r2, [r0, #14]
 8006036:	6183      	str	r3, [r0, #24]
 8006038:	4619      	mov	r1, r3
 800603a:	2208      	movs	r2, #8
 800603c:	305c      	adds	r0, #92	; 0x5c
 800603e:	f7fd fef1 	bl	8003e24 <memset>
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <std+0x38>)
 8006044:	6263      	str	r3, [r4, #36]	; 0x24
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <std+0x3c>)
 8006048:	62a3      	str	r3, [r4, #40]	; 0x28
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <std+0x40>)
 800604c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <std+0x44>)
 8006050:	6224      	str	r4, [r4, #32]
 8006052:	6323      	str	r3, [r4, #48]	; 0x30
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	08006361 	.word	0x08006361
 800605c:	08006383 	.word	0x08006383
 8006060:	080063bb 	.word	0x080063bb
 8006064:	080063df 	.word	0x080063df

08006068 <_cleanup_r>:
 8006068:	4901      	ldr	r1, [pc, #4]	; (8006070 <_cleanup_r+0x8>)
 800606a:	f000 b8af 	b.w	80061cc <_fwalk_reent>
 800606e:	bf00      	nop
 8006070:	08005fa9 	.word	0x08005fa9

08006074 <__sfmoreglue>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	1e4a      	subs	r2, r1, #1
 8006078:	2568      	movs	r5, #104	; 0x68
 800607a:	4355      	muls	r5, r2
 800607c:	460e      	mov	r6, r1
 800607e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006082:	f7fe fbd1 	bl	8004828 <_malloc_r>
 8006086:	4604      	mov	r4, r0
 8006088:	b140      	cbz	r0, 800609c <__sfmoreglue+0x28>
 800608a:	2100      	movs	r1, #0
 800608c:	e9c0 1600 	strd	r1, r6, [r0]
 8006090:	300c      	adds	r0, #12
 8006092:	60a0      	str	r0, [r4, #8]
 8006094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006098:	f7fd fec4 	bl	8003e24 <memset>
 800609c:	4620      	mov	r0, r4
 800609e:	bd70      	pop	{r4, r5, r6, pc}

080060a0 <__sfp_lock_acquire>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__sfp_lock_acquire+0x8>)
 80060a2:	f000 b8b3 	b.w	800620c <__retarget_lock_acquire_recursive>
 80060a6:	bf00      	nop
 80060a8:	20000200 	.word	0x20000200

080060ac <__sfp_lock_release>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__sfp_lock_release+0x8>)
 80060ae:	f000 b8ae 	b.w	800620e <__retarget_lock_release_recursive>
 80060b2:	bf00      	nop
 80060b4:	20000200 	.word	0x20000200

080060b8 <__sinit_lock_acquire>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__sinit_lock_acquire+0x8>)
 80060ba:	f000 b8a7 	b.w	800620c <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	200001fb 	.word	0x200001fb

080060c4 <__sinit_lock_release>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__sinit_lock_release+0x8>)
 80060c6:	f000 b8a2 	b.w	800620e <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	200001fb 	.word	0x200001fb

080060d0 <__sinit>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	4604      	mov	r4, r0
 80060d4:	f7ff fff0 	bl	80060b8 <__sinit_lock_acquire>
 80060d8:	69a3      	ldr	r3, [r4, #24]
 80060da:	b11b      	cbz	r3, 80060e4 <__sinit+0x14>
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	f7ff bff0 	b.w	80060c4 <__sinit_lock_release>
 80060e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060e8:	6523      	str	r3, [r4, #80]	; 0x50
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <__sinit+0x68>)
 80060ec:	4a13      	ldr	r2, [pc, #76]	; (800613c <__sinit+0x6c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	bf04      	itt	eq
 80060f6:	2301      	moveq	r3, #1
 80060f8:	61a3      	streq	r3, [r4, #24]
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f820 	bl	8006140 <__sfp>
 8006100:	6060      	str	r0, [r4, #4]
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f81c 	bl	8006140 <__sfp>
 8006108:	60a0      	str	r0, [r4, #8]
 800610a:	4620      	mov	r0, r4
 800610c:	f000 f818 	bl	8006140 <__sfp>
 8006110:	2200      	movs	r2, #0
 8006112:	60e0      	str	r0, [r4, #12]
 8006114:	2104      	movs	r1, #4
 8006116:	6860      	ldr	r0, [r4, #4]
 8006118:	f7ff ff82 	bl	8006020 <std>
 800611c:	68a0      	ldr	r0, [r4, #8]
 800611e:	2201      	movs	r2, #1
 8006120:	2109      	movs	r1, #9
 8006122:	f7ff ff7d 	bl	8006020 <std>
 8006126:	68e0      	ldr	r0, [r4, #12]
 8006128:	2202      	movs	r2, #2
 800612a:	2112      	movs	r1, #18
 800612c:	f7ff ff78 	bl	8006020 <std>
 8006130:	2301      	movs	r3, #1
 8006132:	61a3      	str	r3, [r4, #24]
 8006134:	e7d2      	b.n	80060dc <__sinit+0xc>
 8006136:	bf00      	nop
 8006138:	08006520 	.word	0x08006520
 800613c:	08006069 	.word	0x08006069

08006140 <__sfp>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	4607      	mov	r7, r0
 8006144:	f7ff ffac 	bl	80060a0 <__sfp_lock_acquire>
 8006148:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <__sfp+0x84>)
 800614a:	681e      	ldr	r6, [r3, #0]
 800614c:	69b3      	ldr	r3, [r6, #24]
 800614e:	b913      	cbnz	r3, 8006156 <__sfp+0x16>
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff ffbd 	bl	80060d0 <__sinit>
 8006156:	3648      	adds	r6, #72	; 0x48
 8006158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800615c:	3b01      	subs	r3, #1
 800615e:	d503      	bpl.n	8006168 <__sfp+0x28>
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	b30b      	cbz	r3, 80061a8 <__sfp+0x68>
 8006164:	6836      	ldr	r6, [r6, #0]
 8006166:	e7f7      	b.n	8006158 <__sfp+0x18>
 8006168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800616c:	b9d5      	cbnz	r5, 80061a4 <__sfp+0x64>
 800616e:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <__sfp+0x88>)
 8006170:	60e3      	str	r3, [r4, #12]
 8006172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006176:	6665      	str	r5, [r4, #100]	; 0x64
 8006178:	f000 f847 	bl	800620a <__retarget_lock_init_recursive>
 800617c:	f7ff ff96 	bl	80060ac <__sfp_lock_release>
 8006180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006188:	6025      	str	r5, [r4, #0]
 800618a:	61a5      	str	r5, [r4, #24]
 800618c:	2208      	movs	r2, #8
 800618e:	4629      	mov	r1, r5
 8006190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006194:	f7fd fe46 	bl	8003e24 <memset>
 8006198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800619c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061a0:	4620      	mov	r0, r4
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a4:	3468      	adds	r4, #104	; 0x68
 80061a6:	e7d9      	b.n	800615c <__sfp+0x1c>
 80061a8:	2104      	movs	r1, #4
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ff62 	bl	8006074 <__sfmoreglue>
 80061b0:	4604      	mov	r4, r0
 80061b2:	6030      	str	r0, [r6, #0]
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d1d5      	bne.n	8006164 <__sfp+0x24>
 80061b8:	f7ff ff78 	bl	80060ac <__sfp_lock_release>
 80061bc:	230c      	movs	r3, #12
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	e7ee      	b.n	80061a0 <__sfp+0x60>
 80061c2:	bf00      	nop
 80061c4:	08006520 	.word	0x08006520
 80061c8:	ffff0001 	.word	0xffff0001

080061cc <_fwalk_reent>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	4606      	mov	r6, r0
 80061d2:	4688      	mov	r8, r1
 80061d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061d8:	2700      	movs	r7, #0
 80061da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061de:	f1b9 0901 	subs.w	r9, r9, #1
 80061e2:	d505      	bpl.n	80061f0 <_fwalk_reent+0x24>
 80061e4:	6824      	ldr	r4, [r4, #0]
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	d1f7      	bne.n	80061da <_fwalk_reent+0xe>
 80061ea:	4638      	mov	r0, r7
 80061ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f0:	89ab      	ldrh	r3, [r5, #12]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d907      	bls.n	8006206 <_fwalk_reent+0x3a>
 80061f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fa:	3301      	adds	r3, #1
 80061fc:	d003      	beq.n	8006206 <_fwalk_reent+0x3a>
 80061fe:	4629      	mov	r1, r5
 8006200:	4630      	mov	r0, r6
 8006202:	47c0      	blx	r8
 8006204:	4307      	orrs	r7, r0
 8006206:	3568      	adds	r5, #104	; 0x68
 8006208:	e7e9      	b.n	80061de <_fwalk_reent+0x12>

0800620a <__retarget_lock_init_recursive>:
 800620a:	4770      	bx	lr

0800620c <__retarget_lock_acquire_recursive>:
 800620c:	4770      	bx	lr

0800620e <__retarget_lock_release_recursive>:
 800620e:	4770      	bx	lr

08006210 <__swhatbuf_r>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	460e      	mov	r6, r1
 8006214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006218:	2900      	cmp	r1, #0
 800621a:	b096      	sub	sp, #88	; 0x58
 800621c:	4614      	mov	r4, r2
 800621e:	461d      	mov	r5, r3
 8006220:	da07      	bge.n	8006232 <__swhatbuf_r+0x22>
 8006222:	2300      	movs	r3, #0
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	89b3      	ldrh	r3, [r6, #12]
 8006228:	061a      	lsls	r2, r3, #24
 800622a:	d410      	bmi.n	800624e <__swhatbuf_r+0x3e>
 800622c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006230:	e00e      	b.n	8006250 <__swhatbuf_r+0x40>
 8006232:	466a      	mov	r2, sp
 8006234:	f000 f8fa 	bl	800642c <_fstat_r>
 8006238:	2800      	cmp	r0, #0
 800623a:	dbf2      	blt.n	8006222 <__swhatbuf_r+0x12>
 800623c:	9a01      	ldr	r2, [sp, #4]
 800623e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006246:	425a      	negs	r2, r3
 8006248:	415a      	adcs	r2, r3
 800624a:	602a      	str	r2, [r5, #0]
 800624c:	e7ee      	b.n	800622c <__swhatbuf_r+0x1c>
 800624e:	2340      	movs	r3, #64	; 0x40
 8006250:	2000      	movs	r0, #0
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	b016      	add	sp, #88	; 0x58
 8006256:	bd70      	pop	{r4, r5, r6, pc}

08006258 <__smakebuf_r>:
 8006258:	898b      	ldrh	r3, [r1, #12]
 800625a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800625c:	079d      	lsls	r5, r3, #30
 800625e:	4606      	mov	r6, r0
 8006260:	460c      	mov	r4, r1
 8006262:	d507      	bpl.n	8006274 <__smakebuf_r+0x1c>
 8006264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	2301      	movs	r3, #1
 800626e:	6163      	str	r3, [r4, #20]
 8006270:	b002      	add	sp, #8
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	ab01      	add	r3, sp, #4
 8006276:	466a      	mov	r2, sp
 8006278:	f7ff ffca 	bl	8006210 <__swhatbuf_r>
 800627c:	9900      	ldr	r1, [sp, #0]
 800627e:	4605      	mov	r5, r0
 8006280:	4630      	mov	r0, r6
 8006282:	f7fe fad1 	bl	8004828 <_malloc_r>
 8006286:	b948      	cbnz	r0, 800629c <__smakebuf_r+0x44>
 8006288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628c:	059a      	lsls	r2, r3, #22
 800628e:	d4ef      	bmi.n	8006270 <__smakebuf_r+0x18>
 8006290:	f023 0303 	bic.w	r3, r3, #3
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	e7e3      	b.n	8006264 <__smakebuf_r+0xc>
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <__smakebuf_r+0x7c>)
 800629e:	62b3      	str	r3, [r6, #40]	; 0x28
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	6020      	str	r0, [r4, #0]
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	6163      	str	r3, [r4, #20]
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	6120      	str	r0, [r4, #16]
 80062b2:	b15b      	cbz	r3, 80062cc <__smakebuf_r+0x74>
 80062b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b8:	4630      	mov	r0, r6
 80062ba:	f000 f8c9 	bl	8006450 <_isatty_r>
 80062be:	b128      	cbz	r0, 80062cc <__smakebuf_r+0x74>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	89a0      	ldrh	r0, [r4, #12]
 80062ce:	4305      	orrs	r5, r0
 80062d0:	81a5      	strh	r5, [r4, #12]
 80062d2:	e7cd      	b.n	8006270 <__smakebuf_r+0x18>
 80062d4:	08006069 	.word	0x08006069

080062d8 <_raise_r>:
 80062d8:	291f      	cmp	r1, #31
 80062da:	b538      	push	{r3, r4, r5, lr}
 80062dc:	4604      	mov	r4, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	d904      	bls.n	80062ec <_raise_r+0x14>
 80062e2:	2316      	movs	r3, #22
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062ee:	b112      	cbz	r2, 80062f6 <_raise_r+0x1e>
 80062f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062f4:	b94b      	cbnz	r3, 800630a <_raise_r+0x32>
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 f830 	bl	800635c <_getpid_r>
 80062fc:	462a      	mov	r2, r5
 80062fe:	4601      	mov	r1, r0
 8006300:	4620      	mov	r0, r4
 8006302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006306:	f000 b817 	b.w	8006338 <_kill_r>
 800630a:	2b01      	cmp	r3, #1
 800630c:	d00a      	beq.n	8006324 <_raise_r+0x4c>
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	d103      	bne.n	800631a <_raise_r+0x42>
 8006312:	2316      	movs	r3, #22
 8006314:	6003      	str	r3, [r0, #0]
 8006316:	2001      	movs	r0, #1
 8006318:	e7e7      	b.n	80062ea <_raise_r+0x12>
 800631a:	2400      	movs	r4, #0
 800631c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006320:	4628      	mov	r0, r5
 8006322:	4798      	blx	r3
 8006324:	2000      	movs	r0, #0
 8006326:	e7e0      	b.n	80062ea <_raise_r+0x12>

08006328 <raise>:
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <raise+0xc>)
 800632a:	4601      	mov	r1, r0
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f7ff bfd3 	b.w	80062d8 <_raise_r>
 8006332:	bf00      	nop
 8006334:	20000010 	.word	0x20000010

08006338 <_kill_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d07      	ldr	r5, [pc, #28]	; (8006358 <_kill_r+0x20>)
 800633c:	2300      	movs	r3, #0
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	f7fa ff65 	bl	8001214 <_kill>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d102      	bne.n	8006354 <_kill_r+0x1c>
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	b103      	cbz	r3, 8006354 <_kill_r+0x1c>
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	bd38      	pop	{r3, r4, r5, pc}
 8006356:	bf00      	nop
 8006358:	200001f4 	.word	0x200001f4

0800635c <_getpid_r>:
 800635c:	f7fa bf52 	b.w	8001204 <_getpid>

08006360 <__sread>:
 8006360:	b510      	push	{r4, lr}
 8006362:	460c      	mov	r4, r1
 8006364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006368:	f000 f894 	bl	8006494 <_read_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	bfab      	itete	ge
 8006370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006372:	89a3      	ldrhlt	r3, [r4, #12]
 8006374:	181b      	addge	r3, r3, r0
 8006376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800637a:	bfac      	ite	ge
 800637c:	6563      	strge	r3, [r4, #84]	; 0x54
 800637e:	81a3      	strhlt	r3, [r4, #12]
 8006380:	bd10      	pop	{r4, pc}

08006382 <__swrite>:
 8006382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006386:	461f      	mov	r7, r3
 8006388:	898b      	ldrh	r3, [r1, #12]
 800638a:	05db      	lsls	r3, r3, #23
 800638c:	4605      	mov	r5, r0
 800638e:	460c      	mov	r4, r1
 8006390:	4616      	mov	r6, r2
 8006392:	d505      	bpl.n	80063a0 <__swrite+0x1e>
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	2302      	movs	r3, #2
 800639a:	2200      	movs	r2, #0
 800639c:	f000 f868 	bl	8006470 <_lseek_r>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	4632      	mov	r2, r6
 80063ae:	463b      	mov	r3, r7
 80063b0:	4628      	mov	r0, r5
 80063b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b6:	f000 b817 	b.w	80063e8 <_write_r>

080063ba <__sseek>:
 80063ba:	b510      	push	{r4, lr}
 80063bc:	460c      	mov	r4, r1
 80063be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c2:	f000 f855 	bl	8006470 <_lseek_r>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	bf15      	itete	ne
 80063cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063d6:	81a3      	strheq	r3, [r4, #12]
 80063d8:	bf18      	it	ne
 80063da:	81a3      	strhne	r3, [r4, #12]
 80063dc:	bd10      	pop	{r4, pc}

080063de <__sclose>:
 80063de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e2:	f000 b813 	b.w	800640c <_close_r>
	...

080063e8 <_write_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_write_r+0x20>)
 80063ec:	4604      	mov	r4, r0
 80063ee:	4608      	mov	r0, r1
 80063f0:	4611      	mov	r1, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fa ff43 	bl	8001282 <_write>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_write_r+0x1e>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_write_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	200001f4 	.word	0x200001f4

0800640c <_close_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	; (8006428 <_close_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa ff4f 	bl	80012ba <_close>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_close_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_close_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	200001f4 	.word	0x200001f4

0800642c <_fstat_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_fstat_r+0x20>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f7fa ff4a 	bl	80012d2 <_fstat>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d102      	bne.n	8006448 <_fstat_r+0x1c>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	b103      	cbz	r3, 8006448 <_fstat_r+0x1c>
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	200001f4 	.word	0x200001f4

08006450 <_isatty_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_isatty_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa ff49 	bl	80012f2 <_isatty>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_isatty_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_isatty_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200001f4 	.word	0x200001f4

08006470 <_lseek_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	; (8006490 <_lseek_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fa ff42 	bl	8001308 <_lseek>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_lseek_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_lseek_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	200001f4 	.word	0x200001f4

08006494 <_read_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	; (80064b4 <_read_r+0x20>)
 8006498:	4604      	mov	r4, r0
 800649a:	4608      	mov	r0, r1
 800649c:	4611      	mov	r1, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fa fed0 	bl	8001248 <_read>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_read_r+0x1e>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_read_r+0x1e>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	200001f4 	.word	0x200001f4

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
